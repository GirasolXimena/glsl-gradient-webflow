{"mappings":"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","sources":["node_modules/twgl.js/dist/4.x/twgl-full.module.js","src/modules/gl/utils/scroll.js","src/modules/gl/camera.js","node_modules/lil-gui/dist/lil-gui.esm.js","src/modules/gl/mat/fsq/index.js","src/modules/gl/mat/fsq/vertex.vert","src/modules/gl/mat/fsq/fragment.frag","src/modules/gl/mod/_fsq.js","src/modules/gl/scene.js","src/modules/gl/post/mat/index.js","src/modules/gl/post/mat/vertex.vert","src/modules/gl/post/mat/fragment.frag","src/modules/gl/post/quad.js","src/modules/gl/post/post.js","src/modules/gl/gl.js","src/app.js"],"sourcesContent":["/* @license twgl.js 4.24.0 Copyright (c) 2015, Gregg Tavares All Rights Reserved.\nAvailable via the MIT license.\nsee: http://github.com/greggman/twgl.js for details */\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n *\n * Vec3 math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new Vec3. In other words you can do this\n *\n *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n *\n * or\n *\n *     var v = v3.create();\n *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any vector as the destination. So for example\n *\n *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n * @module twgl/v3\n */\n\nlet VecType = Float32Array;\n\n/**\n * A JavaScript array with 3 values or a Float32Array with 3 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/v3.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Vec3\n * @memberOf module:twgl/v3\n */\n\n/**\n * Sets the type this library creates for a Vec3\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Vec3\n * @memberOf module:twgl/v3\n */\nfunction setDefaultType(ctor) {\n  const oldType = VecType;\n  VecType = ctor;\n  return oldType;\n}\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @param {number} [x] Initial x value.\n * @param {number} [y] Initial y value.\n * @param {number} [z] Initial z value.\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\nfunction create(x, y, z) {\n  const dst = new VecType(3);\n  if (x) {\n    dst[0] = x;\n  }\n  if (y) {\n    dst[1] = y;\n  }\n  if (z) {\n    dst[2] = z;\n  }\n  return dst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector tha tis the sum of a and b.\n * @memberOf module:twgl/v3\n */\nfunction add(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n\n  return dst;\n}\n\n/**\n * Subtracts two vectors.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector that is the difference of a and b.\n * @memberOf module:twgl/v3\n */\nfunction subtract(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {number} t Interpolation coefficient.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerp(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n  dst[2] = a[2] + t * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} t Interpolation coefficients vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} the linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerpV(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t[0] * (b[0] - a[0]);\n  dst[1] = a[1] + t[1] * (b[1] - a[1]);\n  dst[2] = a[2] + t[2] * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The max components vector.\n * @memberOf module:twgl/v3\n */\nfunction max(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.max(a[0], b[0]);\n  dst[1] = Math.max(a[1], b[1]);\n  dst[2] = Math.max(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The min components vector.\n * @memberOf module:twgl/v3\n */\nfunction min(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.min(a[0], b[0]);\n  dst[1] = Math.min(a[1], b[1]);\n  dst[2] = Math.min(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction mulScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n  dst[2] = v[2] * k;\n\n  return dst;\n}\n\n/**\n * Divides a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction divScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n  dst[2] = v[2] / k;\n\n  return dst;\n}\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of a cross b.\n * @memberOf module:twgl/v3\n */\nfunction cross(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  const t1 = a[2] * b[0] - a[0] * b[2];\n  const t2 = a[0] * b[1] - a[1] * b[0];\n  dst[0] = a[1] * b[2] - a[2] * b[1];\n  dst[1] = t1;\n  dst[2] = t2;\n\n  return dst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @return {number} dot product\n * @memberOf module:twgl/v3\n */\nfunction dot(a, b) {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n}\n\n/**\n * Computes the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} length of vector.\n * @memberOf module:twgl/v3\n */\nfunction length$1(v) {\n  return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n}\n\n/**\n * Computes the square of the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} square of the length of vector.\n * @memberOf module:twgl/v3\n */\nfunction lengthSq(v) {\n  return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n}\n\n/**\n * Computes the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distance(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n\n/**\n * Computes the square of the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} square of the distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distanceSq(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param {module:twgl/v3.Vec3} a The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The normalized vector.\n * @memberOf module:twgl/v3\n */\nfunction normalize(a, dst) {\n  dst = dst || new VecType(3);\n\n  const lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];\n  const len = Math.sqrt(lenSq);\n  if (len > 0.00001) {\n    dst[0] = a[0] / len;\n    dst[1] = a[1] / len;\n    dst[2] = a[2] / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n  }\n\n  return dst;\n}\n\n/**\n * Negates a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} -v.\n * @memberOf module:twgl/v3\n */\nfunction negate(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n  dst[2] = -v[2];\n\n  return dst;\n}\n\n/**\n * Copies a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A copy of v.\n * @memberOf module:twgl/v3\n */\nfunction copy(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0];\n  dst[1] = v[1];\n  dst[2] = v[2];\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of products of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction multiply(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] * b[0];\n  dst[1] = a[1] * b[1];\n  dst[2] = a[2] * b[2];\n\n  return dst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction divide(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] / b[0];\n  dst[1] = a[1] / b[1];\n  dst[2] = a[2] / b[2];\n\n  return dst;\n}\n\nvar v3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  add: add,\n  copy: copy,\n  create: create,\n  cross: cross,\n  distance: distance,\n  distanceSq: distanceSq,\n  divide: divide,\n  divScalar: divScalar,\n  dot: dot,\n  lerp: lerp,\n  lerpV: lerpV,\n  length: length$1,\n  lengthSq: lengthSq,\n  max: max,\n  min: min,\n  mulScalar: mulScalar,\n  multiply: multiply,\n  negate: negate,\n  normalize: normalize,\n  setDefaultType: setDefaultType,\n  subtract: subtract\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = m4.create();\n *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = m4.identity();\n *     const trans = m4.translation([1, 2, 3]);\n *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n * @module twgl/m4\n */\nlet MatType = Float32Array;\n\n/**\n * A JavaScript array with 16 values or a Float32Array with 16 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/m4.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Mat4\n * @memberOf module:twgl/m4\n */\n\n/**\n * Sets the type this library creates for a Mat4\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Mat4\n * @memberOf module:twgl/m4\n */\nfunction setDefaultType$1(ctor) {\n  const oldType = MatType;\n  MatType = ctor;\n  return oldType;\n}\n\n/**\n * Negates a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} -m.\n * @memberOf module:twgl/m4\n */\nfunction negate$1(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = -m[ 0];\n  dst[ 1] = -m[ 1];\n  dst[ 2] = -m[ 2];\n  dst[ 3] = -m[ 3];\n  dst[ 4] = -m[ 4];\n  dst[ 5] = -m[ 5];\n  dst[ 6] = -m[ 6];\n  dst[ 7] = -m[ 7];\n  dst[ 8] = -m[ 8];\n  dst[ 9] = -m[ 9];\n  dst[10] = -m[10];\n  dst[11] = -m[11];\n  dst[12] = -m[12];\n  dst[13] = -m[13];\n  dst[14] = -m[14];\n  dst[15] = -m[15];\n\n  return dst;\n}\n\n/**\n * Creates a matrix.\n * @return {module:twgl/m4.Mat4} A new matrix.\n * @memberOf module:twgl/m4\n */\nfunction create$1() {\n  return new MatType(16).fill(0);\n}\n\n/**\n * Copies a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] The matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A copy of m.\n * @memberOf module:twgl/m4\n */\nfunction copy$1(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = m[ 0];\n  dst[ 1] = m[ 1];\n  dst[ 2] = m[ 2];\n  dst[ 3] = m[ 3];\n  dst[ 4] = m[ 4];\n  dst[ 5] = m[ 5];\n  dst[ 6] = m[ 6];\n  dst[ 7] = m[ 7];\n  dst[ 8] = m[ 8];\n  dst[ 9] = m[ 9];\n  dst[10] = m[10];\n  dst[11] = m[11];\n  dst[12] = m[12];\n  dst[13] = m[13];\n  dst[14] = m[14];\n  dst[15] = m[15];\n\n  return dst;\n}\n\n/**\n * Creates an n-by-n identity matrix.\n *\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.\n * @memberOf module:twgl/m4\n */\nfunction identity(dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The transpose of m.\n * @memberOf module:twgl/m4\n */\n function transpose(m, dst) {\n  dst = dst || new MatType(16);\n  if (dst === m) {\n    let t;\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[3];\n    m[3] = m[12];\n    m[12] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    t = m[7];\n    m[7] = m[13];\n    m[13] = t;\n\n    t = m[11];\n    m[11] = m[14];\n    m[14] = t;\n    return dst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  dst[ 0] = m00;\n  dst[ 1] = m10;\n  dst[ 2] = m20;\n  dst[ 3] = m30;\n  dst[ 4] = m01;\n  dst[ 5] = m11;\n  dst[ 6] = m21;\n  dst[ 7] = m31;\n  dst[ 8] = m02;\n  dst[ 9] = m12;\n  dst[10] = m22;\n  dst[11] = m32;\n  dst[12] = m03;\n  dst[13] = m13;\n  dst[14] = m23;\n  dst[15] = m33;\n\n  return dst;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The inverse of m.\n * @memberOf module:twgl/m4\n */\nfunction inverse(m, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n  const tmp_0  = m22 * m33;\n  const tmp_1  = m32 * m23;\n  const tmp_2  = m12 * m33;\n  const tmp_3  = m32 * m13;\n  const tmp_4  = m12 * m23;\n  const tmp_5  = m22 * m13;\n  const tmp_6  = m02 * m33;\n  const tmp_7  = m32 * m03;\n  const tmp_8  = m02 * m23;\n  const tmp_9  = m22 * m03;\n  const tmp_10 = m02 * m13;\n  const tmp_11 = m12 * m03;\n  const tmp_12 = m20 * m31;\n  const tmp_13 = m30 * m21;\n  const tmp_14 = m10 * m31;\n  const tmp_15 = m30 * m11;\n  const tmp_16 = m10 * m21;\n  const tmp_17 = m20 * m11;\n  const tmp_18 = m00 * m31;\n  const tmp_19 = m30 * m01;\n  const tmp_20 = m00 * m21;\n  const tmp_21 = m20 * m01;\n  const tmp_22 = m00 * m11;\n  const tmp_23 = m10 * m01;\n\n  const t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\n      (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n  const t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\n      (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n  const t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\n      (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n  const t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\n      (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n\n  const d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n\n  dst[ 0] = d * t0;\n  dst[ 1] = d * t1;\n  dst[ 2] = d * t2;\n  dst[ 3] = d * t3;\n  dst[ 4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\n          (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n  dst[ 5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\n          (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n  dst[ 6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\n          (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n  dst[ 7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\n          (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n  dst[ 8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\n          (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n  dst[ 9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\n          (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n  dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\n          (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n  dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\n          (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n  dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\n          (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n  dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\n          (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n  dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\n          (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n  dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\n          (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n\n  return dst;\n}\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param {module:twgl/m4.Mat4} a The matrix on the left.\n * @param {module:twgl/m4.Mat4} b The matrix on the right.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix product of a and b.\n * @memberOf module:twgl/m4\n */\nfunction multiply$1(a, b, dst) {\n  dst = dst || new MatType(16);\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a13 = a[ 4 + 3];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const a23 = a[ 8 + 3];\n  const a30 = a[12 + 0];\n  const a31 = a[12 + 1];\n  const a32 = a[12 + 2];\n  const a33 = a[12 + 3];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b03 = b[3];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b13 = b[ 4 + 3];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n  const b23 = b[ 8 + 3];\n  const b30 = b[12 + 0];\n  const b31 = b[12 + 1];\n  const b32 = b[12 + 2];\n  const b33 = b[12 + 3];\n\n  dst[ 0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n  dst[ 1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n  dst[ 2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n  dst[ 3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n  dst[ 4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n  dst[ 5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n  dst[ 6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n  dst[ 7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n  dst[ 8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n  dst[ 9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n  dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n  dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n  dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n  dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n  dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n  dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n\n  return dst;\n}\n\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param {module:twgl/m4.Mat4} a The matrix.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with translation set.\n * @memberOf module:twgl/m4\n */\nfunction setTranslation(a, v, dst) {\n  dst = dst || identity();\n  if (a !== dst) {\n    dst[ 0] = a[ 0];\n    dst[ 1] = a[ 1];\n    dst[ 2] = a[ 2];\n    dst[ 3] = a[ 3];\n    dst[ 4] = a[ 4];\n    dst[ 5] = a[ 5];\n    dst[ 6] = a[ 6];\n    dst[ 7] = a[ 7];\n    dst[ 8] = a[ 8];\n    dst[ 9] = a[ 9];\n    dst[10] = a[10];\n    dst[11] = a[11];\n  }\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The translation component of m.\n * @memberOf module:twgl/m4\n */\nfunction getTranslation(m, dst) {\n  dst = dst || create();\n  dst[0] = m[12];\n  dst[1] = m[13];\n  dst[2] = m[14];\n  return dst;\n}\n\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} axis The axis 0 = x, 1 = y, 2 = z;\n * @return {module:twgl/v3.Vec3} [dst] vector.\n * @return {module:twgl/v3.Vec3} The axis component of m.\n * @memberOf module:twgl/m4\n */\nfunction getAxis(m, axis, dst) {\n  dst = dst || create();\n  const off = axis * 4;\n  dst[0] = m[off + 0];\n  dst[1] = m[off + 1];\n  dst[2] = m[off + 2];\n  return dst;\n}\n\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v the axis vector\n * @param {number} axis The axis  0 = x, 1 = y, 2 = z;\n * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with axis set.\n * @memberOf module:twgl/m4\n */\nfunction setAxis(a, v, axis, dst) {\n  if (dst !== a) {\n    dst = copy$1(a, dst);\n  }\n  const off = axis * 4;\n  dst[off + 0] = v[0];\n  dst[off + 1] = v[1];\n  dst[off + 2] = v[2];\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).\n * @param {number} aspect The aspect ratio width / height.\n * @param {number} zNear The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} zFar The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n  dst = dst || new MatType(16);\n\n  const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n  const rangeInv = 1.0 / (zNear - zFar);\n\n  dst[0]  = f / aspect;\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = f;\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = (zNear + zFar) * rangeInv;\n  dst[11] = -1;\n\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = zNear * zFar * rangeInv * 2;\n  dst[15] = 0;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 orthogonal transformation matrix given the left, right,\n * bottom, and top dimensions of the near clipping plane as well as the\n * near and far clipping plane distances.\n * @param {number} left Left side of the near clipping plane viewport.\n * @param {number} right Right side of the near clipping plane viewport.\n * @param {number} bottom Bottom of the near clipping plane viewport.\n * @param {number} top Top of the near clipping plane viewport.\n * @param {number} near The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} far The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction ortho(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  dst[0]  = 2 / (right - left);\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = 2 / (top - bottom);\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = 2 / (near - far);\n  dst[11] = 0;\n\n  dst[12] = (right + left) / (left - right);\n  dst[13] = (top + bottom) / (bottom - top);\n  dst[14] = (far + near) / (near - far);\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param {number} left The x coordinate of the left plane of the box.\n * @param {number} right The x coordinate of the right plane of the box.\n * @param {number} bottom The y coordinate of the bottom plane of the box.\n * @param {number} top The y coordinate of the right plane of the box.\n * @param {number} near The negative z coordinate of the near plane of the box.\n * @param {number} far The negative z coordinate of the far plane of the box.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective projection matrix.\n * @memberOf module:twgl/m4\n */\nfunction frustum(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n  const dz = (near - far);\n\n  dst[ 0] = 2 * near / dx;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 2 * near / dy;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = (left + right) / dx;\n  dst[ 9] = (top + bottom) / dy;\n  dst[10] = far / dz;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = near * far / dz;\n  dst[15] = 0;\n\n  return dst;\n}\n\nlet xAxis;\nlet yAxis;\nlet zAxis;\n\n/**\n * Computes a 4-by-4 look-at transformation.\n *\n * This is a matrix which positions the camera itself. If you want\n * a view matrix (a matrix which moves things in front of the camera)\n * take the inverse of this.\n *\n * @param {module:twgl/v3.Vec3} eye The position of the eye.\n * @param {module:twgl/v3.Vec3} target The position meant to be viewed.\n * @param {module:twgl/v3.Vec3} up A vector pointing up.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The look-at matrix.\n * @memberOf module:twgl/m4\n */\nfunction lookAt(eye, target, up, dst) {\n  dst = dst || new MatType(16);\n\n  xAxis = xAxis || create();\n  yAxis = yAxis || create();\n  zAxis = zAxis || create();\n\n  normalize(\n      subtract(eye, target, zAxis), zAxis);\n  normalize(cross(up, zAxis, xAxis), xAxis);\n  normalize(cross(zAxis, xAxis, yAxis), yAxis);\n\n  dst[ 0] = xAxis[0];\n  dst[ 1] = xAxis[1];\n  dst[ 2] = xAxis[2];\n  dst[ 3] = 0;\n  dst[ 4] = yAxis[0];\n  dst[ 5] = yAxis[1];\n  dst[ 6] = yAxis[2];\n  dst[ 7] = 0;\n  dst[ 8] = zAxis[0];\n  dst[ 9] = zAxis[1];\n  dst[10] = zAxis[2];\n  dst[11] = 0;\n  dst[12] = eye[0];\n  dst[13] = eye[1];\n  dst[14] = eye[2];\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translation matrix.\n * @memberOf module:twgl/m4\n */\nfunction translation(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Translates the given 4-by-4 matrix by the given vector v.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translated matrix.\n * @memberOf module:twgl/m4\n */\nfunction translate(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  if (m !== dst) {\n    dst[ 0] = m00;\n    dst[ 1] = m01;\n    dst[ 2] = m02;\n    dst[ 3] = m03;\n    dst[ 4] = m10;\n    dst[ 5] = m11;\n    dst[ 6] = m12;\n    dst[ 7] = m13;\n    dst[ 8] = m20;\n    dst[ 9] = m21;\n    dst[10] = m22;\n    dst[11] = m23;\n  }\n\n  dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n  dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n  dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n  dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationX(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = c;\n  dst[ 6] = s;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = -s;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the x-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateX(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[4]  = c * m10 + s * m20;\n  dst[5]  = c * m11 + s * m21;\n  dst[6]  = c * m12 + s * m22;\n  dst[7]  = c * m13 + s * m23;\n  dst[8]  = c * m20 - s * m10;\n  dst[9]  = c * m21 - s * m11;\n  dst[10] = c * m22 - s * m12;\n  dst[11] = c * m23 - s * m13;\n\n  if (m !== dst) {\n    dst[ 0] = m[ 0];\n    dst[ 1] = m[ 1];\n    dst[ 2] = m[ 2];\n    dst[ 3] = m[ 3];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationY(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = 0;\n  dst[ 2] = -s;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = s;\n  dst[ 9] = 0;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the y-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateY(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 - s * m20;\n  dst[ 1] = c * m01 - s * m21;\n  dst[ 2] = c * m02 - s * m22;\n  dst[ 3] = c * m03 - s * m23;\n  dst[ 8] = c * m20 + s * m00;\n  dst[ 9] = c * m21 + s * m01;\n  dst[10] = c * m22 + s * m02;\n  dst[11] = c * m23 + s * m03;\n\n  if (m !== dst) {\n    dst[ 4] = m[ 4];\n    dst[ 5] = m[ 5];\n    dst[ 6] = m[ 6];\n    dst[ 7] = m[ 7];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationZ(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = s;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = -s;\n  dst[ 5] = c;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the z-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateZ(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 + s * m10;\n  dst[ 1] = c * m01 + s * m11;\n  dst[ 2] = c * m02 + s * m12;\n  dst[ 3] = c * m03 + s * m13;\n  dst[ 4] = c * m10 - s * m00;\n  dst[ 5] = c * m11 - s * m01;\n  dst[ 6] = c * m12 - s * m02;\n  dst[ 7] = c * m13 - s * m03;\n\n  if (m !== dst) {\n    dst[ 8] = m[ 8];\n    dst[ 9] = m[ 9];\n    dst[10] = m[10];\n    dst[11] = m[11];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians\n *     around the axis.\n * @memberOf module:twgl/m4\n */\nfunction axisRotation(axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  dst[ 0] = xx + (1 - xx) * c;\n  dst[ 1] = x * y * oneMinusCosine + z * s;\n  dst[ 2] = x * z * oneMinusCosine - y * s;\n  dst[ 3] = 0;\n  dst[ 4] = x * y * oneMinusCosine - z * s;\n  dst[ 5] = yy + (1 - yy) * c;\n  dst[ 6] = y * z * oneMinusCosine + x * s;\n  dst[ 7] = 0;\n  dst[ 8] = x * z * oneMinusCosine + y * s;\n  dst[ 9] = y * z * oneMinusCosine - x * s;\n  dst[10] = zz + (1 - zz) * c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction axisRotate(m, axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  const r00 = xx + (1 - xx) * c;\n  const r01 = x * y * oneMinusCosine + z * s;\n  const r02 = x * z * oneMinusCosine - y * s;\n  const r10 = x * y * oneMinusCosine - z * s;\n  const r11 = yy + (1 - yy) * c;\n  const r12 = y * z * oneMinusCosine + x * s;\n  const r20 = x * z * oneMinusCosine + y * s;\n  const r21 = y * z * oneMinusCosine - x * s;\n  const r22 = zz + (1 - zz) * c;\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n\n  dst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;\n  dst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;\n  dst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;\n  dst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;\n  dst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;\n  dst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;\n  dst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;\n  dst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;\n  dst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;\n  dst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;\n  dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n  dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param {module:twgl/v3.Vec3} v A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaling matrix.\n * @memberOf module:twgl/m4\n */\nfunction scaling(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = v[0];\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = v[1];\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = v[2];\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param {module:twgl/m4.Mat4} m The matrix to be modified.\n * @param {module:twgl/v3.Vec3} v A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaled matrix.\n * @memberOf module:twgl/m4\n */\nfunction scale(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[ 0] = v0 * m[0 * 4 + 0];\n  dst[ 1] = v0 * m[0 * 4 + 1];\n  dst[ 2] = v0 * m[0 * 4 + 2];\n  dst[ 3] = v0 * m[0 * 4 + 3];\n  dst[ 4] = v1 * m[1 * 4 + 0];\n  dst[ 5] = v1 * m[1 * 4 + 1];\n  dst[ 6] = v1 * m[1 * 4 + 2];\n  dst[ 7] = v1 * m[1 * 4 + 3];\n  dst[ 8] = v2 * m[2 * 4 + 0];\n  dst[ 9] = v2 * m[2 * 4 + 1];\n  dst[10] = v2 * m[2 * 4 + 2];\n  dst[11] = v2 * m[2 * 4 + 3];\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries,\n * interprets the vector as a point, transforms that point by the matrix, and\n * returns the result as a vector with 3 entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The point.\n * @param {module:twgl/v3.Vec3} [dst] optional vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed point.\n * @memberOf module:twgl/m4\n */\nfunction transformPoint(m, v, dst) {\n  dst = dst || create();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n\n  dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;\n  dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;\n  dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n * direction, transforms that direction by the matrix, and returns the result;\n * assumes the transformation of 3-dimensional space represented by the matrix\n * is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion. Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The direction.\n * @param {module:twgl/v3.Vec3} [dst] optional Vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed direction.\n * @memberOf module:twgl/m4\n */\nfunction transformDirection(m, v, dst) {\n  dst = dst || create();\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n  dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n  dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n * as a normal to a surface, and computes a vector which is normal upon\n * transforming that surface by the matrix. The effect of this function is the\n * same as transforming v (as a direction) by the inverse-transpose of m.  This\n * function assumes the transformation of 3-dimensional space represented by the\n * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion.  Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The normal.\n * @param {module:twgl/v3.Vec3} [dst] The direction. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed normal.\n * @memberOf module:twgl/m4\n */\nfunction transformNormal(m, v, dst) {\n  dst = dst || create();\n  const mi = inverse(m);\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\nvar m4 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  axisRotate: axisRotate,\n  axisRotation: axisRotation,\n  copy: copy$1,\n  create: create$1,\n  frustum: frustum,\n  getAxis: getAxis,\n  getTranslation: getTranslation,\n  identity: identity,\n  inverse: inverse,\n  lookAt: lookAt,\n  multiply: multiply$1,\n  negate: negate$1,\n  ortho: ortho,\n  perspective: perspective,\n  rotateX: rotateX,\n  rotateY: rotateY,\n  rotateZ: rotateZ,\n  rotationX: rotationX,\n  rotationY: rotationY,\n  rotationZ: rotationZ,\n  scale: scale,\n  scaling: scaling,\n  setAxis: setAxis,\n  setDefaultType: setDefaultType$1,\n  setTranslation: setTranslation,\n  transformDirection: transformDirection,\n  transformNormal: transformNormal,\n  transformPoint: transformPoint,\n  translate: translate,\n  translation: translation,\n  transpose: transpose\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* DataType */\nconst BYTE                           = 0x1400;\nconst UNSIGNED_BYTE                  = 0x1401;\nconst SHORT                          = 0x1402;\nconst UNSIGNED_SHORT                 = 0x1403;\nconst INT                            = 0x1404;\nconst UNSIGNED_INT                   = 0x1405;\nconst FLOAT                          = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5         = 0x8363;\nconst HALF_FLOAT                   = 0x140B;\nconst UNSIGNED_INT_2_10_10_10_REV  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nconst UNSIGNED_INT_24_8            = 0x84FA;\n\nconst glTypeToTypedArray = {};\n{\n  const tt = glTypeToTypedArray;\n  tt[BYTE]                           = Int8Array;\n  tt[UNSIGNED_BYTE]                  = Uint8Array;\n  tt[SHORT]                          = Int16Array;\n  tt[UNSIGNED_SHORT]                 = Uint16Array;\n  tt[INT]                            = Int32Array;\n  tt[UNSIGNED_INT]                   = Uint32Array;\n  tt[FLOAT]                          = Float32Array;\n  tt[UNSIGNED_SHORT_4_4_4_4]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_5_5_1]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_6_5]           = Uint16Array;\n  tt[HALF_FLOAT]                     = Uint16Array;\n  tt[UNSIGNED_INT_2_10_10_10_REV]    = Uint32Array;\n  tt[UNSIGNED_INT_10F_11F_11F_REV]   = Uint32Array;\n  tt[UNSIGNED_INT_5_9_9_9_REV]       = Uint32Array;\n  tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;\n  tt[UNSIGNED_INT_24_8]              = Uint32Array;\n}\n\n/**\n * Get the GL type for a typedArray\n * @param {ArrayBufferView} typedArray a typedArray\n * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArray instanceof Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArray instanceof Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the GL type for a typedArray type\n * @param {ArrayBufferView} typedArrayType a typedArray constructor\n * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArrayType === Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArrayType === Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArrayType === Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArrayType === Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArrayType === Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the typed array constructor for a given GL type\n * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n * @memberOf module:twgl/typedArray\n */\nfunction getTypedArrayTypeForGLType(type) {\n  const CTOR = glTypeToTypedArray[type];\n  if (!CTOR) {\n    throw new Error('unknown gl type');\n  }\n  return CTOR;\n}\n\nconst isArrayBuffer = typeof SharedArrayBuffer !== 'undefined'\n  ? function isArrayBufferOrSharedArrayBuffer(a) {\n    return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);\n  }\n  : function isArrayBuffer(a) {\n    return a && a.buffer && a.buffer instanceof ArrayBuffer;\n  };\n\nvar typedarrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getGLTypeForTypedArray: getGLTypeForTypedArray,\n  getGLTypeForTypedArrayType: getGLTypeForTypedArrayType,\n  getTypedArrayTypeForGLType: getTypedArrayTypeForGLType,\n  isArrayBuffer: isArrayBuffer\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint no-console: \"off\" */\n\n/**\n * Copy named properties\n *\n * @param {string[]} names names of properties to copy\n * @param {object} src object to copy properties from\n * @param {object} dst object to copy properties to\n * @private\n */\nfunction copyNamedProperties(names, src, dst) {\n  names.forEach(function(name) {\n    const value = src[name];\n    if (value !== undefined) {\n      dst[name] = value;\n    }\n  });\n}\n\n/**\n * Copies properties from source to dest only if a matching key is in dest\n *\n * @param {Object.<string, ?>} src the source\n * @param {Object.<string, ?>} dst the dest\n * @private\n */\nfunction copyExistingProperties(src, dst) {\n  Object.keys(dst).forEach(function(key) {\n    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {  /* eslint no-prototype-builtins: 0 */\n      dst[key] = src[key];\n    }\n  });\n}\n\nfunction error(...args) {\n  console.error(...args);\n}\n\nfunction warn(...args) {\n  console.warn(...args);\n}\n\nfunction isBuffer(gl, t) {\n  return typeof WebGLBuffer !== 'undefined' && t instanceof WebGLBuffer;\n}\n\nfunction isRenderbuffer(gl, t) {\n  return typeof WebGLRenderbuffer !== 'undefined' && t instanceof WebGLRenderbuffer;\n}\n\nfunction isShader(gl, t) {\n  return typeof WebGLShader !== 'undefined' && t instanceof WebGLShader;\n}\n\nfunction isTexture(gl, t) {\n  return typeof WebGLTexture !== 'undefined' && t instanceof WebGLTexture;\n}\n\nfunction isSampler(gl, t) {\n  return typeof WebGLSampler !== 'undefined' && t instanceof WebGLSampler;\n}\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst STATIC_DRAW                  = 0x88e4;\nconst ARRAY_BUFFER                 = 0x8892;\nconst ELEMENT_ARRAY_BUFFER         = 0x8893;\nconst BUFFER_SIZE                  = 0x8764;\n\nconst BYTE$1                         = 0x1400;\nconst UNSIGNED_BYTE$1                = 0x1401;\nconst SHORT$1                        = 0x1402;\nconst UNSIGNED_SHORT$1               = 0x1403;\nconst INT$1                          = 0x1404;\nconst UNSIGNED_INT$1                 = 0x1405;\nconst FLOAT$1                        = 0x1406;\nconst defaults = {\n  attribPrefix: \"\",\n};\n\n/**\n * Sets the default attrib prefix\n *\n * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n * In other words I'll create arrays of geometry like this\n *\n *     var arrays = {\n *       position: ...\n *       normal: ...\n *       texcoord: ...\n *     };\n *\n * But need those mapped to attributes and my attributes start with `a_`.\n *\n * @deprecated see {@link module:twgl.setDefaults}\n * @param {string} prefix prefix for attribs\n * @memberOf module:twgl/attributes\n */\nfunction setAttributePrefix(prefix) {\n  defaults.attribPrefix = prefix;\n}\n\nfunction setDefaults(newDefaults) {\n  copyExistingProperties(newDefaults, defaults);\n}\n\nfunction setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n  gl.bindBuffer(type, buffer);\n  gl.bufferData(type, array, drawType || STATIC_DRAW);\n}\n\n/**\n * Given typed array creates a WebGLBuffer and copies the typed array\n * into it.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n * @return {WebGLBuffer} the created WebGLBuffer\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromTypedArray(gl, typedArray, type, drawType) {\n  if (isBuffer(gl, typedArray)) {\n    return typedArray;\n  }\n  type = type || ARRAY_BUFFER;\n  const buffer = gl.createBuffer();\n  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n  return buffer;\n}\n\nfunction isIndices(name) {\n  return name === \"indices\";\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArray instanceof Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArrayType === Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\nfunction getArray(array) {\n  return array.length ? array : array.data;\n}\n\nconst texcoordRE = /coord|texture/i;\nconst colorRE = /color|colour/i;\n\nfunction guessNumComponentsFromName(name, length) {\n  let numComponents;\n  if (texcoordRE.test(name)) {\n    numComponents = 2;\n  } else if (colorRE.test(name)) {\n    numComponents = 4;\n  } else {\n    numComponents = 3;  // position, normals, indices ...\n  }\n\n  if (length % numComponents > 0) {\n    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\n  }\n\n  return numComponents;\n}\n\nfunction getNumComponents(array, arrayName) {\n  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);\n}\n\nfunction makeTypedArray(array, name) {\n  if (isArrayBuffer(array)) {\n    return array;\n  }\n\n  if (isArrayBuffer(array.data)) {\n    return array.data;\n  }\n\n  if (Array.isArray(array)) {\n    array = {\n      data: array,\n    };\n  }\n\n  let Type = array.type;\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint16Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n  return new Type(array.data);\n}\n\n/**\n * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n * for the attribute.\n *\n * @typedef {Object} AttribInfo\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {number} [numComponents] the number of components for this attribute.\n * @property {number} [size] synonym for `numComponents`.\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n * @property {number} [offset] offset into buffer in bytes. Default = 0\n * @property {number} [stride] the stride in bytes per element. Default = 0\n * @property {number} [divisor] the divisor in instances. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor\n *    where as anything else = do call it with this value\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * Use this type of array spec when TWGL can't guess the type or number of components of an array\n * @typedef {Object} FullArraySpec\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {(number|number[]|ArrayBufferView)} data The data of the array. A number alone becomes the number of elements of type.\n * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n *    If `coord` is in the name assumes `numComponents = 2`.\n *    If `color` is in the name assumes `numComponents = 4`.\n *    otherwise assumes `numComponents = 3`\n * @property {constructor} [type] type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).\n * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.\n * @property {number} [size] synonym for `numComponents`.\n * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor\n *    where as anything else = do call it with this value\n * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n * @property {string} [name] synonym for `attrib`.\n * @property {string} [attribName] synonym for `attrib`.\n * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer\n *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`\n *    to provide this. Example:\n *\n *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {\n *           position: [1, 2, 3, ... ],\n *         });\n *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {\n *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1\n *         });\n *\n * @memberOf module:twgl\n */\n\n/**\n * An individual array in {@link module:twgl.Arrays}\n *\n * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`\n * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n *\n * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec\n * @memberOf module:twgl\n */\n\n/**\n * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n * @memberOf module:twgl\n */\n\n\n/**\n * Creates a set of attribute data and WebGLBuffers from set of arrays\n *\n * Given\n *\n *      var arrays = {\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *      };\n *\n * returns something like\n *\n *      var attribs = {\n *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n *      };\n *\n * notes:\n *\n * *   Arrays can take various forms\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * @param {WebGLRenderingContext} gl The webgl rendering context.\n * @param {module:twgl.Arrays} arrays The arrays\n * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from\n *   This lets you share buffers. Any arrays you supply will override\n *   the buffers from srcBufferInfo.\n * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n * @memberOf module:twgl/attributes\n */\nfunction createAttribsFromArrays(gl, arrays) {\n  const attribs = {};\n  Object.keys(arrays).forEach(function(arrayName) {\n    if (!isIndices(arrayName)) {\n      const array = arrays[arrayName];\n      const attribName = array.attrib || array.name || array.attribName || (defaults.attribPrefix + arrayName);\n      if (array.value) {\n        if (!Array.isArray(array.value) && !isArrayBuffer(array.value)) {\n          throw new Error('array.value is not array or typedarray');\n        }\n        attribs[attribName] = {\n          value: array.value,\n        };\n      } else {\n        let buffer;\n        let type;\n        let normalization;\n        let numComponents;\n        if (array.buffer && array.buffer instanceof WebGLBuffer) {\n          buffer = array.buffer;\n          numComponents = array.numComponents || array.size;\n          type = array.type;\n          normalization = array.normalize;\n        } else if (typeof array === \"number\" || typeof array.data === \"number\") {\n          const numValues = array.data || array;\n          const arrayType = array.type || Float32Array;\n          const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n          type = getGLTypeForTypedArrayType(arrayType);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\n          numComponents = array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues);\n          buffer = gl.createBuffer();\n          gl.bindBuffer(ARRAY_BUFFER, buffer);\n          gl.bufferData(ARRAY_BUFFER, numBytes, array.drawType || STATIC_DRAW);\n        } else {\n          const typedArray = makeTypedArray(array, arrayName);\n          buffer = createBufferFromTypedArray(gl, typedArray, undefined, array.drawType);\n          type = getGLTypeForTypedArray(typedArray);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray);\n          numComponents = getNumComponents(array, arrayName);\n        }\n        attribs[attribName] = {\n          buffer:        buffer,\n          numComponents: numComponents,\n          type:          type,\n          normalize:     normalization,\n          stride:        array.stride || 0,\n          offset:        array.offset || 0,\n          divisor:       array.divisor === undefined ? undefined : array.divisor,\n          drawType:      array.drawType,\n        };\n      }\n    }\n  });\n  gl.bindBuffer(ARRAY_BUFFER, null);\n  return attribs;\n}\n\n/**\n * Sets the contents of a buffer attached to an attribInfo\n *\n * This is helper function to dynamically update a buffer.\n *\n * Let's say you make a bufferInfo\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n *  And you want to dynamically update the positions. You could do this\n *\n *     // assuming arrays.position has already been updated with new data.\n *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n *\n * @param {WebGLRenderingContext} gl\n * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n *   the name of the attribute will include the prefix.\n * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything\n *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n *    for the portion of the array you want to use.\n *\n *        var someArray = new Float32Array(1000); // an array with 1000 floats\n *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n *\n *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n * @memberOf module:twgl/attributes\n */\nfunction setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n  array = makeTypedArray(array);\n  if (offset !== undefined) {\n    gl.bindBuffer(ARRAY_BUFFER, attribInfo.buffer);\n    gl.bufferSubData(ARRAY_BUFFER, offset, array);\n  } else {\n    setBufferFromTypedArray(gl, ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);\n  }\n}\n\nfunction getBytesPerValueForGLType(gl, type) {\n  if (type === BYTE$1)           return 1;  // eslint-disable-line\n  if (type === UNSIGNED_BYTE$1)  return 1;  // eslint-disable-line\n  if (type === SHORT$1)          return 2;  // eslint-disable-line\n  if (type === UNSIGNED_SHORT$1) return 2;  // eslint-disable-line\n  if (type === INT$1)            return 4;  // eslint-disable-line\n  if (type === UNSIGNED_INT$1)   return 4;  // eslint-disable-line\n  if (type === FLOAT$1)          return 4;  // eslint-disable-line\n  return 0;\n}\n\n// Tries to get the number of elements from a set of arrays.\nconst positionKeys = ['position', 'positions', 'a_position'];\nfunction getNumElementsFromNonIndexedArrays(arrays) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in arrays) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(arrays)[0];\n  }\n  const array = arrays[key];\n  const length = getArray(array).length;\n  if (length === undefined) {\n    return 1;   // There's no arrays\n  }\n  const numComponents = getNumComponents(array, key);\n  const numElements = length / numComponents;\n  if (length % numComponents > 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\nfunction getNumElementsFromAttributes(gl, attribs) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in attribs) {\n      break;\n    }\n    key = defaults.attribPrefix + key;\n    if (key in attribs) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(attribs)[0];\n  }\n  const attrib = attribs[key];\n  if (!attrib.buffer) {\n    return 1; // There's no buffer\n  }\n  gl.bindBuffer(ARRAY_BUFFER, attrib.buffer);\n  const numBytes = gl.getBufferParameter(ARRAY_BUFFER, BUFFER_SIZE);\n  gl.bindBuffer(ARRAY_BUFFER, null);\n\n  const bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\n  const totalElements = numBytes / bytesPerValue;\n  const numComponents = attrib.numComponents || attrib.size;\n  // TODO: check stride\n  const numElements = totalElements / numComponents;\n  if (numElements % 1 !== 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\n/**\n * @typedef {Object} BufferInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`\n * @memberOf module:twgl\n */\n\n/**\n * Creates a BufferInfo from an object of arrays.\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * Given an object like\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n *  Creates an BufferInfo like this\n *\n *     bufferInfo = {\n *       numElements: 4,        // or whatever the number of elements is\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n *       attribs: {\n *         position: { buffer: WebGLBuffer, numComponents: 3, },\n *         normal:   { buffer: WebGLBuffer, numComponents: 3, },\n *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n *       },\n *     };\n *\n *  The properties of arrays can be JavaScript arrays in which case the number of components\n *  will be guessed.\n *\n *     var arrays = {\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n *        indices:  [0, 1, 2, 1, 2, 3],\n *     };\n *\n *  They can also be TypedArrays\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *\n *  Or AugmentedTypedArrays\n *\n *     var positions = createAugmentedTypedArray(3, 4);\n *     var texcoords = createAugmentedTypedArray(2, 4);\n *     var normals   = createAugmentedTypedArray(3, 4);\n *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n *\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n *     indices.push([0, 1, 2, 1, 2, 3]);\n *\n *     var arrays = {\n *        position: positions,\n *        texcoord: texcoords,\n *        normal:   normals,\n *        indices:  indices,\n *     };\n *\n * For the last example it is equivalent to\n *\n *     var bufferInfo = {\n *       attribs: {\n *         position: { numComponents: 3, buffer: gl.createBuffer(), },\n *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },\n *         normal: { numComponents: 3, buffer: gl.createBuffer(), },\n *       },\n *       indices: gl.createBuffer(),\n *       numElements: 6,\n *     };\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.Arrays} arrays Your data\n * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing\n *        buffer info to start from. WebGLBuffers etc specified\n *        in the srcBufferInfo will be used in a new BufferInfo\n *        with any arrays specified overriding the ones in\n *        srcBufferInfo.\n * @return {module:twgl.BufferInfo} A BufferInfo\n * @memberOf module:twgl/attributes\n */\nfunction createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {\n  const newAttribs = createAttribsFromArrays(gl, arrays);\n  const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});\n  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);\n  const indices = arrays.indices;\n  if (indices) {\n    const newIndices = makeTypedArray(indices, \"indices\");\n    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER);\n    bufferInfo.numElements = newIndices.length;\n    bufferInfo.elementType = getGLTypeForTypedArray(newIndices);\n  } else if (!bufferInfo.numElements) {\n    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\n  }\n\n  return bufferInfo;\n}\n\n/**\n * Creates a buffer from an array, typed array, or array spec\n *\n * Given something like this\n *\n *     [1, 2, 3],\n *\n * or\n *\n *     new Uint16Array([1,2,3]);\n *\n * or\n *\n *     {\n *        data: [1, 2, 3],\n *        type: Uint8Array,\n *     }\n *\n * returns a WebGLBuffer that contains the given data.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.\n * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromArray(gl, array, arrayName) {\n  const type = arrayName === \"indices\" ? ELEMENT_ARRAY_BUFFER : ARRAY_BUFFER;\n  const typedArray = makeTypedArray(array, arrayName);\n  return createBufferFromTypedArray(gl, typedArray, type);\n}\n\n/**\n * Creates buffers from arrays or typed arrays\n *\n * Given something like this\n *\n *     var arrays = {\n *        positions: [1, 2, 3],\n *        normals: [0, 0, 1],\n *     }\n *\n * returns something like\n *\n *     buffers = {\n *       positions: WebGLBuffer,\n *       normals: WebGLBuffer,\n *     }\n *\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.Arrays} arrays\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n * @memberOf module:twgl/attributes\n */\nfunction createBuffersFromArrays(gl, arrays) {\n  const buffers = { };\n  Object.keys(arrays).forEach(function(key) {\n    buffers[key] = createBufferFromArray(gl, arrays[key], key);\n  });\n\n  // Ugh!\n  if (arrays.indices) {\n    buffers.numElements = arrays.indices.length;\n    buffers.elementType = getGLTypeForTypedArray(makeTypedArray(arrays.indices));\n  } else {\n    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n  }\n\n  return buffers;\n}\n\nvar attributes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttribsFromArrays: createAttribsFromArrays,\n  createBuffersFromArrays: createBuffersFromArrays,\n  createBufferFromArray: createBufferFromArray,\n  createBufferFromTypedArray: createBufferFromTypedArray,\n  createBufferInfoFromArrays: createBufferInfoFromArrays,\n  setAttribInfoBufferFromArray: setAttribInfoBufferFromArray,\n  setAttributePrefix: setAttributePrefix,\n  setAttributeDefaults_: setDefaults,\n  getNumComponents_: getNumComponents,\n  getArray_: getArray\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst getArray$1 = getArray;  // eslint-disable-line\nconst getNumComponents$1 = getNumComponents;  // eslint-disable-line\n\n/**\n * @typedef {(Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array)} TypedArray\n */\n\n/**\n * Add `push` to a typed array. It just keeps a 'cursor'\n * and allows use to `push` values into the array so we\n * don't have to manually compute offsets\n * @param {TypedArray} typedArray TypedArray to augment\n * @param {number} numComponents number of components.\n * @private\n */\nfunction augmentTypedArray(typedArray, numComponents) {\n  let cursor = 0;\n  typedArray.push = function() {\n    for (let ii = 0; ii < arguments.length; ++ii) {\n      const value = arguments[ii];\n      if (value instanceof Array || isArrayBuffer(value)) {\n        for (let jj = 0; jj < value.length; ++jj) {\n          typedArray[cursor++] = value[jj];\n        }\n      } else {\n        typedArray[cursor++] = value;\n      }\n    }\n  };\n  typedArray.reset = function(opt_index) {\n    cursor = opt_index || 0;\n  };\n  typedArray.numComponents = numComponents;\n  Object.defineProperty(typedArray, 'numElements', {\n    get: function() {\n      return this.length / this.numComponents | 0;\n    },\n  });\n  return typedArray;\n}\n\n/**\n * creates a typed array with a `push` function attached\n * so that you can easily *push* values.\n *\n * `push` can take multiple arguments. If an argument is an array each element\n * of the array will be added to the typed array.\n *\n * Example:\n *\n *     const array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values\n *     array.push(1, 2, 3);\n *     array.push([4, 5, 6]);\n *     // array now contains [1, 2, 3, 4, 5, 6]\n *\n * Also has `numComponents` and `numElements` properties.\n *\n * @param {number} numComponents number of components\n * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.\n * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.\n * @return {ArrayBufferView} A typed array.\n * @memberOf module:twgl/primitives\n */\nfunction createAugmentedTypedArray(numComponents, numElements, opt_type) {\n  const Type = opt_type || Float32Array;\n  return augmentTypedArray(new Type(numComponents * numElements), numComponents);\n}\n\nfunction allButIndices(name) {\n  return name !== \"indices\";\n}\n\n/**\n * Given indexed vertices creates a new set of vertices un-indexed by expanding the indexed vertices.\n * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex\n * @return {Object.<string, TypedArray>} The deindexed vertices\n * @memberOf module:twgl/primitives\n */\nfunction deindexVertices(vertices) {\n  const indices = vertices.indices;\n  const newVertices = {};\n  const numElements = indices.length;\n\n  function expandToUnindexed(channel) {\n    const srcBuffer = vertices[channel];\n    const numComponents = srcBuffer.numComponents;\n    const dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);\n    for (let ii = 0; ii < numElements; ++ii) {\n      const ndx = indices[ii];\n      const offset = ndx * numComponents;\n      for (let jj = 0; jj < numComponents; ++jj) {\n        dstBuffer.push(srcBuffer[offset + jj]);\n      }\n    }\n    newVertices[channel] = dstBuffer;\n  }\n\n  Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);\n\n  return newVertices;\n}\n\n/**\n * flattens the normals of deindexed vertices in place.\n * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten\n * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)\n * @memberOf module:twgl/primitives\n */\nfunction flattenNormals(vertices) {\n  if (vertices.indices) {\n    throw new Error('can not flatten normals of indexed vertices. deindex them first');\n  }\n\n  const normals = vertices.normal;\n  const numNormals = normals.length;\n  for (let ii = 0; ii < numNormals; ii += 9) {\n    // pull out the 3 normals for this triangle\n    const nax = normals[ii + 0];\n    const nay = normals[ii + 1];\n    const naz = normals[ii + 2];\n\n    const nbx = normals[ii + 3];\n    const nby = normals[ii + 4];\n    const nbz = normals[ii + 5];\n\n    const ncx = normals[ii + 6];\n    const ncy = normals[ii + 7];\n    const ncz = normals[ii + 8];\n\n    // add them\n    let nx = nax + nbx + ncx;\n    let ny = nay + nby + ncy;\n    let nz = naz + nbz + ncz;\n\n    // normalize them\n    const length = Math.sqrt(nx * nx + ny * ny + nz * nz);\n\n    nx /= length;\n    ny /= length;\n    nz /= length;\n\n    // copy them back in\n    normals[ii + 0] = nx;\n    normals[ii + 1] = ny;\n    normals[ii + 2] = nz;\n\n    normals[ii + 3] = nx;\n    normals[ii + 4] = ny;\n    normals[ii + 5] = nz;\n\n    normals[ii + 6] = nx;\n    normals[ii + 7] = ny;\n    normals[ii + 8] = nz;\n  }\n\n  return vertices;\n}\n\nfunction applyFuncToV3Array(array, matrix, fn) {\n  const len = array.length;\n  const tmp = new Float32Array(3);\n  for (let ii = 0; ii < len; ii += 3) {\n    fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);\n    array[ii    ] = tmp[0];\n    array[ii + 1] = tmp[1];\n    array[ii + 2] = tmp[2];\n  }\n}\n\nfunction transformNormal$1(mi, v, dst) {\n  dst = dst || create();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Reorients directions by the given matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientDirections(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformDirection);\n  return array;\n}\n\n/**\n * Reorients normals by the inverse-transpose of the given\n * matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientNormals(array, matrix) {\n  applyFuncToV3Array(array, inverse(matrix), transformNormal$1);\n  return array;\n}\n\n/**\n * Reorients positions by the given matrix. In other words, it\n * multiplies each vertex by the given matrix.\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientPositions(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformPoint);\n  return array;\n}\n\n/**\n * @typedef {(number[]|TypedArray)} NativeArrayOrTypedArray\n */\n\n/**\n * Reorients arrays by the given matrix. Assumes arrays have\n * names that contains 'pos' could be reoriented as positions,\n * 'binorm' or 'tan' as directions, and 'norm' as normals.\n *\n * @param {Object.<string, NativeArrayOrTypedArray>} arrays The vertices to reorient\n * @param {module:twgl/m4.Mat4} matrix matrix to reorient by.\n * @return {Object.<string, NativeArrayOrTypedArray>} same arrays that were passed in.\n * @memberOf module:twgl/primitives\n */\nfunction reorientVertices(arrays, matrix) {\n  Object.keys(arrays).forEach(function(name) {\n    const array = arrays[name];\n    if (name.indexOf(\"pos\") >= 0) {\n      reorientPositions(array, matrix);\n    } else if (name.indexOf(\"tan\") >= 0 || name.indexOf(\"binorm\") >= 0) {\n      reorientDirections(array, matrix);\n    } else if (name.indexOf(\"norm\") >= 0) {\n      reorientNormals(array, matrix);\n    }\n  });\n  return arrays;\n}\n\n/**\n * Creates XY quad BufferInfo\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo\n * @memberOf module:twgl/primitives\n * @function createXYQuadBuffers\n */\n\n/**\n * Creates XY quad Buffers\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {module:twgl.BufferInfo} the created XY Quad buffers\n * @memberOf module:twgl/primitives\n * @function createXYQuadBufferInfo\n */\n\n/**\n * Creates XY quad vertices\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);\n *\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, TypedArray>} the created XY Quad vertices\n * @memberOf module:twgl/primitives\n */\nfunction createXYQuadVertices(size, xOffset, yOffset) {\n  size = size || 2;\n  xOffset = xOffset || 0;\n  yOffset = yOffset || 0;\n  size *= 0.5;\n  return {\n    position: {\n      numComponents: 2,\n      data: [\n        xOffset + -1 * size, yOffset + -1 * size,\n        xOffset +  1 * size, yOffset + -1 * size,\n        xOffset + -1 * size, yOffset +  1 * size,\n        xOffset +  1 * size, yOffset +  1 * size,\n      ],\n    },\n    normal: [\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n    ],\n    texcoord: [\n      0, 0,\n      1, 0,\n      0, 1,\n      1, 1,\n    ],\n    indices: [ 0, 1, 2, 2, 1, 3 ],\n  };\n}\n\n/**\n * Creates XZ plane BufferInfo.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {module:twgl.BufferInfo} The created plane BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createPlaneBufferInfo\n */\n\n/**\n * Creates XZ plane buffers.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, WebGLBuffer>} The created plane buffers.\n * @memberOf module:twgl/primitives\n * @function createPlaneBuffers\n */\n\n/**\n * Creates XZ plane vertices.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, TypedArray>} The created plane vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createPlaneVertices(\n    width,\n    depth,\n    subdivisionsWidth,\n    subdivisionsDepth,\n    matrix) {\n  width = width || 1;\n  depth = depth || 1;\n  subdivisionsWidth = subdivisionsWidth || 1;\n  subdivisionsDepth = subdivisionsDepth || 1;\n  matrix = matrix || identity();\n\n  const numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  for (let z = 0; z <= subdivisionsDepth; z++) {\n    for (let x = 0; x <= subdivisionsWidth; x++) {\n      const u = x / subdivisionsWidth;\n      const v = z / subdivisionsDepth;\n      positions.push(\n          width * u - width * 0.5,\n          0,\n          depth * v - depth * 0.5);\n      normals.push(0, 1, 0);\n      texcoords.push(u, v);\n    }\n  }\n\n  const numVertsAcross = subdivisionsWidth + 1;\n  const indices = createAugmentedTypedArray(\n      3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n\n  for (let z = 0; z < subdivisionsDepth; z++) {  // eslint-disable-line\n    for (let x = 0; x < subdivisionsWidth; x++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (z + 0) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x,\n          (z + 0) * numVertsAcross + x + 1);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (z + 1) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x + 1,\n          (z + 0) * numVertsAcross + x + 1);\n    }\n  }\n\n  const arrays = reorientVertices({\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  }, matrix);\n  return arrays;\n}\n\n/**\n * Creates sphere BufferInfo.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {module:twgl.BufferInfo} The created sphere BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createSphereBufferInfo\n */\n\n/**\n * Creates sphere buffers.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, WebGLBuffer>} The created sphere buffers.\n * @memberOf module:twgl/primitives\n * @function createSphereBuffers\n */\n\n/**\n * Creates sphere vertices.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, TypedArray>} The created sphere vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createSphereVertices(\n    radius,\n    subdivisionsAxis,\n    subdivisionsHeight,\n    opt_startLatitudeInRadians,\n    opt_endLatitudeInRadians,\n    opt_startLongitudeInRadians,\n    opt_endLongitudeInRadians) {\n  if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {\n    throw new Error('subdivisionAxis and subdivisionHeight must be > 0');\n  }\n\n  opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;\n  opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;\n  opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;\n  opt_endLongitudeInRadians = opt_endLongitudeInRadians || (Math.PI * 2);\n\n  const latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;\n  const longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;\n\n  // We are going to generate our sphere by iterating through its\n  // spherical coordinates and generating 2 triangles for each quad on a\n  // ring of the sphere.\n  const numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let y = 0; y <= subdivisionsHeight; y++) {\n    for (let x = 0; x <= subdivisionsAxis; x++) {\n      // Generate a vertex based on its spherical coordinates\n      const u = x / subdivisionsAxis;\n      const v = y / subdivisionsHeight;\n      const theta = longRange * u + opt_startLongitudeInRadians;\n      const phi = latRange * v + opt_startLatitudeInRadians;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n      const ux = cosTheta * sinPhi;\n      const uy = cosPhi;\n      const uz = sinTheta * sinPhi;\n      positions.push(radius * ux, radius * uy, radius * uz);\n      normals.push(ux, uy, uz);\n      texcoords.push(1 - u, v);\n    }\n  }\n\n  const numVertsAround = subdivisionsAxis + 1;\n  const indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n  for (let x = 0; x < subdivisionsAxis; x++) {  // eslint-disable-line\n    for (let y = 0; y < subdivisionsHeight; y++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (y + 0) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (y + 1) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x + 1);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Array of the indices of corners of each face of a cube.\n * @type {Array.<number[]>}\n * @private\n */\nconst CUBE_FACE_INDICES = [\n  [3, 7, 5, 1],  // right\n  [6, 2, 0, 4],  // left\n  [6, 7, 3, 2],  // ??\n  [0, 1, 5, 4],  // ??\n  [7, 6, 4, 5],  // front\n  [2, 3, 1, 0],  // back\n];\n\n/**\n * Creates a BufferInfo for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCubeBufferInfo\n */\n\n/**\n * Creates the buffers and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCubeBuffers\n */\n\n/**\n * Creates the vertices and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createCubeVertices(size) {\n  size = size || 1;\n  const k = size / 2;\n\n  const cornerVertices = [\n    [-k, -k, -k],\n    [+k, -k, -k],\n    [-k, +k, -k],\n    [+k, +k, -k],\n    [-k, -k, +k],\n    [+k, -k, +k],\n    [-k, +k, +k],\n    [+k, +k, +k],\n  ];\n\n  const faceNormals = [\n    [+1, +0, +0],\n    [-1, +0, +0],\n    [+0, +1, +0],\n    [+0, -1, +0],\n    [+0, +0, +1],\n    [+0, +0, -1],\n  ];\n\n  const uvCoords = [\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [1, 1],\n  ];\n\n  const numVertices = 6 * 4;\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2 , numVertices);\n  const indices   = createAugmentedTypedArray(3, 6 * 2, Uint16Array);\n\n  for (let f = 0; f < 6; ++f) {\n    const faceIndices = CUBE_FACE_INDICES[f];\n    for (let v = 0; v < 4; ++v) {\n      const position = cornerVertices[faceIndices[v]];\n      const normal = faceNormals[f];\n      const uv = uvCoords[v];\n\n      // Each face needs all four vertices because the normals and texture\n      // coordinates are not all the same.\n      positions.push(position);\n      normals.push(normal);\n      texcoords.push(uv);\n\n    }\n    // Two triangles make a square face.\n    const offset = 4 * f;\n    indices.push(offset + 0, offset + 1, offset + 2);\n    indices.push(offset + 0, offset + 2, offset + 3);\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Creates a BufferInfo for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created cone BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBufferInfo\n */\n\n/**\n * Creates buffers for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, WebGLBuffer>} The created cone buffers.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBuffers\n */\n\n/**\n * Creates vertices for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis. .\n *\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, TypedArray>} The created cone vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTruncatedConeVertices(\n    bottomRadius,\n    topRadius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    opt_topCap,\n    opt_bottomCap) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (verticalSubdivisions < 1) {\n    throw new Error('verticalSubdivisions must be 1 or greater');\n  }\n\n  const topCap = (opt_topCap === undefined) ? true : opt_topCap;\n  const bottomCap = (opt_bottomCap === undefined) ? true : opt_bottomCap;\n\n  const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n\n  const numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra / 2) * 2, Uint16Array);\n\n  const vertsAroundEdge = radialSubdivisions + 1;\n\n  // The slant of the cone is constant across its surface\n  const slant = Math.atan2(bottomRadius - topRadius, height);\n  const cosSlant = Math.cos(slant);\n  const sinSlant = Math.sin(slant);\n\n  const start = topCap ? -2 : 0;\n  const end = verticalSubdivisions + (bottomCap ? 2 : 0);\n\n  for (let yy = start; yy <= end; ++yy) {\n    let v = yy / verticalSubdivisions;\n    let y = height * v;\n    let ringRadius;\n    if (yy < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (yy > verticalSubdivisions) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius +\n        (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n    }\n    if (yy === -2 || yy === verticalSubdivisions + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n    y -= height / 2;\n    for (let ii = 0; ii < vertsAroundEdge; ++ii) {\n      const sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n      const cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n      positions.push(sin * ringRadius, y, cos * ringRadius);\n      if (yy < 0) {\n        normals.push(0, -1, 0);\n      } else if (yy > verticalSubdivisions) {\n        normals.push(0, 1, 0);\n      } else if (ringRadius === 0.0) {\n        normals.push(0, 0, 0);\n      } else {\n        normals.push(sin * cosSlant, sinSlant, cos * cosSlant);\n      }\n      texcoords.push((ii / radialSubdivisions), 1 - v);\n    }\n  }\n\n  for (let yy = 0; yy < verticalSubdivisions + extra; ++yy) {  // eslint-disable-line\n    if (yy === 1 && topCap || yy === verticalSubdivisions + extra - 2 && bottomCap) {\n      continue;\n    }\n    for (let ii = 0; ii < radialSubdivisions; ++ii) {  // eslint-disable-line\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 0) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii);\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 0 + ii);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Expands RLE data\n * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z\n * @param {number[]} [padding] value to add each entry with.\n * @return {number[]} the expanded rleData\n * @private\n */\nfunction expandRLEData(rleData, padding) {\n  padding = padding || [];\n  const data = [];\n  for (let ii = 0; ii < rleData.length; ii += 4) {\n    const runLength = rleData[ii];\n    const element = rleData.slice(ii + 1, ii + 4);\n    element.push.apply(element, padding);\n    for (let jj = 0; jj < runLength; ++jj) {\n      data.push.apply(data, element);\n    }\n  }\n  return data;\n}\n\n/**\n * Creates 3D 'F' BufferInfo.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function create3DFBufferInfo\n */\n\n/**\n * Creates 3D 'F' buffers.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function create3DFBuffers\n */\n\n/**\n * Creates 3D 'F' vertices.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color arrays.\n *\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction create3DFVertices() {\n\n  const positions = [\n    // left column front\n    0,   0,  0,\n    0, 150,  0,\n    30,   0,  0,\n    0, 150,  0,\n    30, 150,  0,\n    30,   0,  0,\n\n    // top rung front\n    30,   0,  0,\n    30,  30,  0,\n    100,   0,  0,\n    30,  30,  0,\n    100,  30,  0,\n    100,   0,  0,\n\n    // middle rung front\n    30,  60,  0,\n    30,  90,  0,\n    67,  60,  0,\n    30,  90,  0,\n    67,  90,  0,\n    67,  60,  0,\n\n    // left column back\n      0,   0,  30,\n     30,   0,  30,\n      0, 150,  30,\n      0, 150,  30,\n     30,   0,  30,\n     30, 150,  30,\n\n    // top rung back\n     30,   0,  30,\n    100,   0,  30,\n     30,  30,  30,\n     30,  30,  30,\n    100,   0,  30,\n    100,  30,  30,\n\n    // middle rung back\n     30,  60,  30,\n     67,  60,  30,\n     30,  90,  30,\n     30,  90,  30,\n     67,  60,  30,\n     67,  90,  30,\n\n    // top\n      0,   0,   0,\n    100,   0,   0,\n    100,   0,  30,\n      0,   0,   0,\n    100,   0,  30,\n      0,   0,  30,\n\n    // top rung front\n    100,   0,   0,\n    100,  30,   0,\n    100,  30,  30,\n    100,   0,   0,\n    100,  30,  30,\n    100,   0,  30,\n\n    // under top rung\n    30,   30,   0,\n    30,   30,  30,\n    100,  30,  30,\n    30,   30,   0,\n    100,  30,  30,\n    100,  30,   0,\n\n    // between top rung and middle\n    30,   30,   0,\n    30,   60,  30,\n    30,   30,  30,\n    30,   30,   0,\n    30,   60,   0,\n    30,   60,  30,\n\n    // top of middle rung\n    30,   60,   0,\n    67,   60,  30,\n    30,   60,  30,\n    30,   60,   0,\n    67,   60,   0,\n    67,   60,  30,\n\n    // front of middle rung\n    67,   60,   0,\n    67,   90,  30,\n    67,   60,  30,\n    67,   60,   0,\n    67,   90,   0,\n    67,   90,  30,\n\n    // bottom of middle rung.\n    30,   90,   0,\n    30,   90,  30,\n    67,   90,  30,\n    30,   90,   0,\n    67,   90,  30,\n    67,   90,   0,\n\n    // front of bottom\n    30,   90,   0,\n    30,  150,  30,\n    30,   90,  30,\n    30,   90,   0,\n    30,  150,   0,\n    30,  150,  30,\n\n    // bottom\n    0,   150,   0,\n    0,   150,  30,\n    30,  150,  30,\n    0,   150,   0,\n    30,  150,  30,\n    30,  150,   0,\n\n    // left side\n    0,   0,   0,\n    0,   0,  30,\n    0, 150,  30,\n    0,   0,   0,\n    0, 150,  30,\n    0, 150,   0,\n  ];\n\n  const texcoords = [\n    // left column front\n    0.22, 0.19,\n    0.22, 0.79,\n    0.34, 0.19,\n    0.22, 0.79,\n    0.34, 0.79,\n    0.34, 0.19,\n\n    // top rung front\n    0.34, 0.19,\n    0.34, 0.31,\n    0.62, 0.19,\n    0.34, 0.31,\n    0.62, 0.31,\n    0.62, 0.19,\n\n    // middle rung front\n    0.34, 0.43,\n    0.34, 0.55,\n    0.49, 0.43,\n    0.34, 0.55,\n    0.49, 0.55,\n    0.49, 0.43,\n\n    // left column back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // middle rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // top rung front\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // under top rung\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // between top rung and middle\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // top of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // front of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom of middle rung.\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // front of bottom\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // left side\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n  ];\n\n  const normals = expandRLEData([\n    // left column front\n    // top rung front\n    // middle rung front\n    18, 0, 0, 1,\n\n    // left column back\n    // top rung back\n    // middle rung back\n    18, 0, 0, -1,\n\n    // top\n    6, 0, 1, 0,\n\n    // top rung front\n    6, 1, 0, 0,\n\n    // under top rung\n    6, 0, -1, 0,\n\n    // between top rung and middle\n    6, 1, 0, 0,\n\n    // top of middle rung\n    6, 0, 1, 0,\n\n    // front of middle rung\n    6, 1, 0, 0,\n\n    // bottom of middle rung.\n    6, 0, -1, 0,\n\n    // front of bottom\n    6, 1, 0, 0,\n\n    // bottom\n    6, 0, -1, 0,\n\n    // left side\n    6, -1, 0, 0,\n  ]);\n\n  const colors = expandRLEData([\n        // left column front\n        // top rung front\n        // middle rung front\n      18, 200,  70, 120,\n\n        // left column back\n        // top rung back\n        // middle rung back\n      18, 80, 70, 200,\n\n        // top\n      6, 70, 200, 210,\n\n        // top rung front\n      6, 200, 200, 70,\n\n        // under top rung\n      6, 210, 100, 70,\n\n        // between top rung and middle\n      6, 210, 160, 70,\n\n        // top of middle rung\n      6, 70, 180, 210,\n\n        // front of middle rung\n      6, 100, 70, 210,\n\n        // bottom of middle rung.\n      6, 76, 210, 100,\n\n        // front of bottom\n      6, 140, 210, 80,\n\n        // bottom\n      6, 90, 130, 110,\n\n        // left side\n      6, 160, 160, 220,\n  ], [255]);\n\n  const numVerts = positions.length / 3;\n\n  const arrays = {\n    position: createAugmentedTypedArray(3, numVerts),\n    texcoord: createAugmentedTypedArray(2,  numVerts),\n    normal: createAugmentedTypedArray(3, numVerts),\n    color: createAugmentedTypedArray(4, numVerts, Uint8Array),\n    indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array),\n  };\n\n  arrays.position.push(positions);\n  arrays.texcoord.push(texcoords);\n  arrays.normal.push(normals);\n  arrays.color.push(colors);\n\n  for (let ii = 0; ii < numVerts; ++ii) {\n    arrays.indices.push(ii);\n  }\n\n  return arrays;\n}\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCresentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCrescentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCrescentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n function createCrescentVertices(\n    verticalRadius,\n    outerRadius,\n    innerRadius,\n    thickness,\n    subdivisionsDown,\n    startOffset,\n    endOffset) {\n  if (subdivisionsDown <= 0) {\n    throw new Error('subdivisionDown must be > 0');\n  }\n\n  startOffset = startOffset || 0;\n  endOffset   = endOffset || 1;\n\n  const subdivisionsThick = 2;\n\n  const offsetRange = endOffset - startOffset;\n  const numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n\n  function lerp(a, b, s) {\n    return a + (b - a) * s;\n  }\n\n  function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {\n    for (let z = 0; z <= subdivisionsDown; z++) {\n      const uBack = x / (subdivisionsThick - 1);\n      const v = z / subdivisionsDown;\n      const xBack = (uBack - 0.5) * 2;\n      const angle = (startOffset + (v * offsetRange)) * Math.PI;\n      const s = Math.sin(angle);\n      const c = Math.cos(angle);\n      const radius = lerp(verticalRadius, arcRadius, s);\n      const px = xBack * thickness;\n      const py = c * verticalRadius;\n      const pz = s * radius;\n      positions.push(px, py, pz);\n      const n = add(multiply([0, s, c], normalMult), normalAdd);\n      normals.push(n);\n      texcoords.push(uBack * uMult + uAdd, v);\n    }\n  }\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let x = 0; x < subdivisionsThick; x++) {\n    const uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;\n    createArc(outerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);\n    createArc(innerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);\n  }\n\n  // Do outer surface.\n  const indices = createAugmentedTypedArray(3, (subdivisionsDown * 2) * (2 + subdivisionsThick), Uint16Array);\n\n  function createSurface(leftArcOffset, rightArcOffset) {\n    for (let z = 0; z < subdivisionsDown; ++z) {\n      // Make triangle 1 of quad.\n      indices.push(\n          leftArcOffset + z + 0,\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 0);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 1,\n          rightArcOffset + z + 0);\n    }\n  }\n\n  const numVerticesDown = subdivisionsDown + 1;\n  // front\n  createSurface(numVerticesDown * 0, numVerticesDown * 4);\n  // right\n  createSurface(numVerticesDown * 5, numVerticesDown * 7);\n  // back\n  createSurface(numVerticesDown * 6, numVerticesDown * 2);\n  // left\n  createSurface(numVerticesDown * 3, numVerticesDown * 1);\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n/**\n * Creates cylinder BufferInfo. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCylinderBufferInfo\n */\n\n /**\n  * Creates cylinder buffers. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, WebGLBuffer>} The created buffers.\n  * @memberOf module:twgl/primitives\n  * @function createCylinderBuffers\n  */\n\n /**\n  * Creates cylinder vertices. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, TypedArray>} The created vertices.\n  * @memberOf module:twgl/primitives\n  */\nfunction createCylinderVertices(\n    radius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    topCap,\n    bottomCap) {\n  return createTruncatedConeVertices(\n      radius,\n      radius,\n      height,\n      radialSubdivisions,\n      verticalSubdivisions,\n      topCap,\n      bottomCap);\n}\n\n/**\n * Creates BufferInfo for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTorusBufferInfo\n */\n\n/**\n * Creates buffers for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createTorusBuffers\n */\n\n/**\n * Creates vertices for a torus\n *\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTorusVertices(\n    radius,\n    thickness,\n    radialSubdivisions,\n    bodySubdivisions,\n    startAngle,\n    endAngle) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (bodySubdivisions < 3) {\n    throw new Error('verticalSubdivisions must be 3 or greater');\n  }\n\n  startAngle = startAngle || 0;\n  endAngle = endAngle || Math.PI * 2;\n  const range = endAngle - startAngle;\n\n  const radialParts = radialSubdivisions + 1;\n  const bodyParts   = bodySubdivisions + 1;\n  const numVertices = radialParts * bodyParts;\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n  const indices     = createAugmentedTypedArray(3, (radialSubdivisions) * (bodySubdivisions) * 2, Uint16Array);\n\n  for (let slice = 0; slice < bodyParts; ++slice) {\n    const v = slice / bodySubdivisions;\n    const sliceAngle = v * Math.PI * 2;\n    const sliceSin = Math.sin(sliceAngle);\n    const ringRadius = radius + sliceSin * thickness;\n    const ny = Math.cos(sliceAngle);\n    const y = ny * thickness;\n    for (let ring = 0; ring < radialParts; ++ring) {\n      const u = ring / radialSubdivisions;\n      const ringAngle = startAngle + u * range;\n      const xSin = Math.sin(ringAngle);\n      const zCos = Math.cos(ringAngle);\n      const x = xSin * ringRadius;\n      const z = zCos * ringRadius;\n      const nx = xSin * sliceSin;\n      const nz = zCos * sliceSin;\n      positions.push(x, y, z);\n      normals.push(nx, ny, nz);\n      texcoords.push(u, 1 - v);\n    }\n  }\n\n  for (let slice = 0; slice < bodySubdivisions; ++slice) {  // eslint-disable-line\n    for (let ring = 0; ring < radialSubdivisions; ++ring) {  // eslint-disable-line\n      const nextRingIndex  = 1 + ring;\n      const nextSliceIndex = 1 + slice;\n      indices.push(radialParts * slice          + ring,\n                   radialParts * nextSliceIndex + ring,\n                   radialParts * slice          + nextRingIndex);\n      indices.push(radialParts * nextSliceIndex + ring,\n                   radialParts * nextSliceIndex + nextRingIndex,\n                   radialParts * slice          + nextRingIndex);\n    }\n  }\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n\n/**\n * Creates a disc BufferInfo. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createDiscBufferInfo\n */\n\n/**\n * Creates disc buffers. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createDiscBuffers\n */\n\n/**\n * Creates disc vertices. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createDiscVertices(\n    radius,\n    divisions,\n    stacks,\n    innerRadius,\n    stackPower) {\n  if (divisions < 3) {\n    throw new Error('divisions must be at least 3');\n  }\n\n  stacks = stacks ? stacks : 1;\n  stackPower = stackPower ? stackPower : 1;\n  innerRadius = innerRadius ? innerRadius : 0;\n\n  // Note: We don't share the center vertex because that would\n  // mess up texture coordinates.\n  const numVertices = (divisions + 1) * (stacks + 1);\n\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n\n  let firstIndex = 0;\n  const radiusSpan = radius - innerRadius;\n  const pointsPerStack = divisions + 1;\n\n  // Build the disk one stack at a time.\n  for (let stack = 0; stack <= stacks; ++stack) {\n    const stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n\n    for (let i = 0; i <= divisions; ++i) {\n      const theta = 2.0 * Math.PI * i / divisions;\n      const x = stackRadius * Math.cos(theta);\n      const z = stackRadius * Math.sin(theta);\n\n      positions.push(x, 0, z);\n      normals.push(0, 1, 0);\n      texcoords.push(1 - (i / divisions), stack / stacks);\n      if (stack > 0 && i !== divisions) {\n        // a, b, c and d are the indices of the vertices of a quad.  unless\n        // the current stack is the one closest to the center, in which case\n        // the vertices a and b connect to the center vertex.\n        const a = firstIndex + (i + 1);\n        const b = firstIndex + i;\n        const c = firstIndex + i - pointsPerStack;\n        const d = firstIndex + (i + 1) - pointsPerStack;\n\n        // Make a quad of the vertices a, b, c, d.\n        indices.push(a, b, c);\n        indices.push(a, c, d);\n      }\n    }\n\n    firstIndex += divisions + 1;\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * creates a random integer between 0 and range - 1 inclusive.\n * @param {number} range\n * @return {number} random value between 0 and range - 1 inclusive.\n * @private\n */\nfunction randInt(range) {\n  return Math.random() * range | 0;\n}\n\n/**\n * Used to supply random colors\n * @callback RandomColorFunc\n * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed\n * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha\n * @return {number} a number from 0 to 255\n * @memberOf module:twgl/primitives\n */\n\n/**\n * @typedef {Object} RandomVerticesOptions\n * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices\n * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers\n * @memberOf module:twgl/primitives\n */\n\n/**\n * Creates an augmentedTypedArray of random vertex colors.\n * If the vertices are indexed (have an indices array) then will\n * just make random colors. Otherwise assumes they are triangles\n * and makes one random color for every 3 vertices.\n * @param {Object.<string, AugmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.\n * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.\n * @return {Object.<string, AugmentedTypedArray>} same vertices as passed in with `color` added.\n * @memberOf module:twgl/primitives\n */\nfunction makeRandomVertexColors(vertices, options) {\n  options = options || {};\n  const numElements = vertices.position.numElements;\n  const vColors = createAugmentedTypedArray(4, numElements, Uint8Array);\n  const rand = options.rand || function(ndx, channel) {\n    return channel < 3 ? randInt(256) : 255;\n  };\n  vertices.color = vColors;\n  if (vertices.indices) {\n    // just make random colors if index\n    for (let ii = 0; ii < numElements; ++ii) {\n      vColors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));\n    }\n  } else {\n    // make random colors per triangle\n    const numVertsPerColor = options.vertsPerColor || 3;\n    const numSets = numElements / numVertsPerColor;\n    for (let ii = 0; ii < numSets; ++ii) {  // eslint-disable-line\n      const color = [rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3)];\n      for (let jj = 0; jj < numVertsPerColor; ++jj) {\n        vColors.push(color);\n      }\n    }\n  }\n  return vertices;\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a buffers for them\n * @private\n */\nfunction createBufferFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));\n    return createBuffersFromArrays(gl, arrays);\n  };\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a bufferInfo object for them\n * @private\n */\nfunction createBufferInfoFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(null,  Array.prototype.slice.call(arguments, 1));\n    return createBufferInfoFromArrays(gl, arrays);\n  };\n}\n\nconst arraySpecPropertyNames = [\n  \"numComponents\",\n  \"size\",\n  \"type\",\n  \"normalize\",\n  \"stride\",\n  \"offset\",\n  \"attrib\",\n  \"name\",\n  \"attribName\",\n];\n\n/**\n * Copy elements from one array to another\n *\n * @param {Array|TypedArray} src source array\n * @param {Array|TypedArray} dst dest array\n * @param {number} dstNdx index in dest to copy src\n * @param {number} [offset] offset to add to copied values\n * @private\n */\nfunction copyElements(src, dst, dstNdx, offset) {\n  offset = offset || 0;\n  const length = src.length;\n  for (let ii = 0; ii < length; ++ii) {\n    dst[dstNdx + ii] = src[ii] + offset;\n  }\n}\n\n/**\n * Creates an array of the same time\n *\n * @param {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} srcArray array who's type to copy\n * @param {number} length size of new array\n * @return {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} array with same type as srcArray\n * @private\n */\nfunction createArrayOfSameType(srcArray, length) {\n  const arraySrc = getArray$1(srcArray);\n  const newArray = new arraySrc.constructor(length);\n  let newArraySpec = newArray;\n  // If it appears to have been augmented make new one augmented\n  if (arraySrc.numComponents && arraySrc.numElements) {\n    augmentTypedArray(newArray, arraySrc.numComponents);\n  }\n  // If it was a full spec make new one a full spec\n  if (srcArray.data) {\n    newArraySpec = {\n      data: newArray,\n    };\n    copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);\n  }\n  return newArraySpec;\n}\n\n/**\n * Concatenates sets of vertices\n *\n * Assumes the vertices match in composition. For example\n * if one set of vertices has positions, normals, and indices\n * all sets of vertices must have positions, normals, and indices\n * and of the same type.\n *\n * Example:\n *\n *      const cubeVertices = twgl.primitives.createCubeVertices(2);\n *      const sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);\n *      // move the sphere 2 units up\n *      twgl.primitives.reorientVertices(\n *          sphereVertices, twgl.m4.translation([0, 2, 0]));\n *      // merge the sphere with the cube\n *      const cubeSphereVertices = twgl.primitives.concatVertices(\n *          [cubeVertices, sphereVertices]);\n *      // turn them into WebGL buffers and attrib data\n *      const bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);\n *\n * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices\n * @return {module:twgl.Arrays} The concatenated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction concatVertices(arrayOfArrays) {\n  const names = {};\n  let baseName;\n  // get names of all arrays.\n  // and numElements for each set of vertices\n  for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n    const arrays = arrayOfArrays[ii];\n    Object.keys(arrays).forEach(function(name) {  // eslint-disable-line\n      if (!names[name]) {\n        names[name] = [];\n      }\n      if (!baseName && name !== 'indices') {\n        baseName = name;\n      }\n      const arrayInfo = arrays[name];\n      const numComponents = getNumComponents$1(arrayInfo, name);\n      const array = getArray$1(arrayInfo);\n      const numElements = array.length / numComponents;\n      names[name].push(numElements);\n    });\n  }\n\n  // compute length of combined array\n  // and return one for reference\n  function getLengthOfCombinedArrays(name) {\n    let length = 0;\n    let arraySpec;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray$1(arrayInfo);\n      length += array.length;\n      if (!arraySpec || arrayInfo.data) {\n        arraySpec = arrayInfo;\n      }\n    }\n    return {\n      length: length,\n      spec: arraySpec,\n    };\n  }\n\n  function copyArraysToNewArray(name, base, newArray) {\n    let baseIndex = 0;\n    let offset = 0;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray$1(arrayInfo);\n      if (name === 'indices') {\n        copyElements(array, newArray, offset, baseIndex);\n        baseIndex += base[ii];\n      } else {\n        copyElements(array, newArray, offset);\n      }\n      offset += array.length;\n    }\n  }\n\n  const base = names[baseName];\n\n  const newArrays = {};\n  Object.keys(names).forEach(function(name) {\n    const info = getLengthOfCombinedArrays(name);\n    const newArraySpec = createArrayOfSameType(info.spec, info.length);\n    copyArraysToNewArray(name, base, getArray$1(newArraySpec));\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\n/**\n * Creates a duplicate set of vertices\n *\n * This is useful for calling reorientVertices when you\n * also want to keep the original available\n *\n * @param {module:twgl.Arrays} arrays of vertices\n * @return {module:twgl.Arrays} The duplicated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction duplicateVertices(arrays) {\n  const newArrays = {};\n  Object.keys(arrays).forEach(function(name) {\n    const arraySpec = arrays[name];\n    const srcArray = getArray$1(arraySpec);\n    const newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);\n    copyElements(srcArray, getArray$1(newArraySpec), 0);\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\nconst create3DFBufferInfo = createBufferInfoFunc(create3DFVertices);\nconst create3DFBuffers = createBufferFunc(create3DFVertices);\nconst createCubeBufferInfo = createBufferInfoFunc(createCubeVertices);\nconst createCubeBuffers = createBufferFunc(createCubeVertices);\nconst createPlaneBufferInfo = createBufferInfoFunc(createPlaneVertices);\nconst createPlaneBuffers = createBufferFunc(createPlaneVertices);\nconst createSphereBufferInfo = createBufferInfoFunc(createSphereVertices);\nconst createSphereBuffers = createBufferFunc(createSphereVertices);\nconst createTruncatedConeBufferInfo = createBufferInfoFunc(createTruncatedConeVertices);\nconst createTruncatedConeBuffers = createBufferFunc(createTruncatedConeVertices);\nconst createXYQuadBufferInfo = createBufferInfoFunc(createXYQuadVertices);\nconst createXYQuadBuffers = createBufferFunc(createXYQuadVertices);\nconst createCrescentBufferInfo = createBufferInfoFunc(createCrescentVertices);\nconst createCrescentBuffers = createBufferFunc(createCrescentVertices);\nconst createCylinderBufferInfo = createBufferInfoFunc(createCylinderVertices);\nconst createCylinderBuffers = createBufferFunc(createCylinderVertices);\nconst createTorusBufferInfo = createBufferInfoFunc(createTorusVertices);\nconst createTorusBuffers = createBufferFunc(createTorusVertices);\nconst createDiscBufferInfo = createBufferInfoFunc(createDiscVertices);\nconst createDiscBuffers = createBufferFunc(createDiscVertices);\n\n// these were mis-spelled until 4.12\nconst createCresentBufferInfo = createCrescentBufferInfo;\nconst createCresentBuffers = createCrescentBuffers;\nconst createCresentVertices = createCrescentVertices;\n\nvar primitives = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  create3DFBufferInfo: create3DFBufferInfo,\n  create3DFBuffers: create3DFBuffers,\n  create3DFVertices: create3DFVertices,\n  createAugmentedTypedArray: createAugmentedTypedArray,\n  createCubeBufferInfo: createCubeBufferInfo,\n  createCubeBuffers: createCubeBuffers,\n  createCubeVertices: createCubeVertices,\n  createPlaneBufferInfo: createPlaneBufferInfo,\n  createPlaneBuffers: createPlaneBuffers,\n  createPlaneVertices: createPlaneVertices,\n  createSphereBufferInfo: createSphereBufferInfo,\n  createSphereBuffers: createSphereBuffers,\n  createSphereVertices: createSphereVertices,\n  createTruncatedConeBufferInfo: createTruncatedConeBufferInfo,\n  createTruncatedConeBuffers: createTruncatedConeBuffers,\n  createTruncatedConeVertices: createTruncatedConeVertices,\n  createXYQuadBufferInfo: createXYQuadBufferInfo,\n  createXYQuadBuffers: createXYQuadBuffers,\n  createXYQuadVertices: createXYQuadVertices,\n  createCresentBufferInfo: createCresentBufferInfo,\n  createCresentBuffers: createCresentBuffers,\n  createCresentVertices: createCresentVertices,\n  createCrescentBufferInfo: createCrescentBufferInfo,\n  createCrescentBuffers: createCrescentBuffers,\n  createCrescentVertices: createCrescentVertices,\n  createCylinderBufferInfo: createCylinderBufferInfo,\n  createCylinderBuffers: createCylinderBuffers,\n  createCylinderVertices: createCylinderVertices,\n  createTorusBufferInfo: createTorusBufferInfo,\n  createTorusBuffers: createTorusBuffers,\n  createTorusVertices: createTorusVertices,\n  createDiscBufferInfo: createDiscBufferInfo,\n  createDiscBuffers: createDiscBuffers,\n  createDiscVertices: createDiscVertices,\n  deindexVertices: deindexVertices,\n  flattenNormals: flattenNormals,\n  makeRandomVertexColors: makeRandomVertexColors,\n  reorientDirections: reorientDirections,\n  reorientNormals: reorientNormals,\n  reorientPositions: reorientPositions,\n  reorientVertices: reorientVertices,\n  concatVertices: concatVertices,\n  duplicateVertices: duplicateVertices\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Gets the gl version as a number\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {number} version of gl\n * @private\n */\n//function getVersionAsNumber(gl) {\n//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n//}\n\n/**\n * Check if context is WebGL 2.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 2.0\n * @memberOf module:twgl\n */\nfunction isWebGL2(gl) {\n  // This is the correct check but it's slow\n  //  return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGL2RenderingContext;\n  return !!gl.texStorage2D;\n}\n\n/**\n * Check if context is WebGL 1.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 1.0\n * @memberOf module:twgl\n */\nfunction isWebGL1(gl) {\n  // This is the correct check but it's slow\n  // const version = getVersionAsNumber(gl);\n  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGLRenderingContext;\n  return !gl.texStorage2D;\n}\n\n/**\n * Gets a string for WebGL enum\n *\n * Note: Several enums are the same. Without more\n * context (which function) it's impossible to always\n * give the correct enum. As it is, for matching values\n * it gives all enums. Checking the WebGL2RenderingContext\n * that means\n *\n *      0     = ZERO | POINT | NONE | NO_ERROR\n *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT\n *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB\n *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING\n *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING\n *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING\n *\n * It's also not useful for bits really unless you pass in individual bits.\n * In other words\n *\n *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\n *     twgl.glEnumToString(gl, bits);  // not going to work\n *\n * Note that some enums only exist on extensions. If you\n * want them to show up you need to pass the extension at least\n * once. For example\n *\n *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');\n *     if (ext) {\n *        twgl.glEnumToString(ext, 0);  // just prime the function\n *\n *        ..later..\n *\n *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n *        console.log(twgl.glEnumToString(gl, internalFormat));\n *\n * Notice I didn't have to pass the extension the second time. This means\n * you can have place that generically gets an enum for texture formats for example.\n * and as long as you primed the function with the extensions\n *\n * If you're using `twgl.addExtensionsToContext` to enable your extensions\n * then twgl will automatically get the extension's enums.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object\n * @param {number} value the value of the enum you want to look up.\n * @return {string} enum string or hex value\n * @memberOf module:twgl\n * @function glEnumToString\n */\nconst glEnumToString = (function() {\n  const haveEnumsForType = {};\n  const enums = {};\n\n  function addEnums(gl) {\n    const type = gl.constructor.name;\n    if (!haveEnumsForType[type]) {\n      for (const key in gl) {\n        if (typeof gl[key] === 'number') {\n          const existing = enums[gl[key]];\n          enums[gl[key]] = existing ? `${existing} | ${key}` : key;\n        }\n      }\n      haveEnumsForType[type] = true;\n    }\n  }\n\n  return function glEnumToString(gl, value) {\n    addEnums(gl);\n    return enums[value] || (typeof value === 'number' ? `0x${value.toString(16)}` : value);\n  };\n}());\n\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  glEnumToString: glEnumToString,\n  isWebGL1: isWebGL1,\n  isWebGL2: isWebGL2\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults$1 = {\n  textureColor: new Uint8Array([128, 192, 255, 255]),\n  textureOptions: {},\n  crossOrigin: undefined,\n};\nconst isArrayBuffer$1 = isArrayBuffer;\n\n// Should we make this on demand?\nconst getShared2DContext = function() {\n  let s_ctx;\n  return function getShared2DContext() {\n    s_ctx = s_ctx ||\n        ((typeof document !== 'undefined' && document.createElement)\n          ? document.createElement(\"canvas\").getContext(\"2d\")\n          : null);\n    return s_ctx;\n  };\n}();\n\n// NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but\n//       not only does Firefox NOT support it but Firefox freezes immediately\n//       if you try to create one instead of just returning null and continuing.\n//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext(\"2d\"));  // OffscreenCanvas may not support 2d\n\n// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2\n// we can use the various unpack settings. Otherwise we could try using\n// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap\n// is async and the current TWGL code expects a non-Async result though that\n// might not be a problem. ImageBitmap though is not available in Edge or Safari\n// as of 2018-01-02\n\n/* PixelFormat */\nconst ALPHA                          = 0x1906;\nconst RGB                            = 0x1907;\nconst RGBA                           = 0x1908;\nconst LUMINANCE                      = 0x1909;\nconst LUMINANCE_ALPHA                = 0x190A;\nconst DEPTH_COMPONENT                = 0x1902;\nconst DEPTH_STENCIL                  = 0x84F9;\n\n/* TextureWrapMode */\n// const REPEAT                         = 0x2901;\n// const MIRRORED_REPEAT                = 0x8370;\nconst CLAMP_TO_EDGE                  = 0x812f;\n\n/* TextureMagFilter */\nconst NEAREST                        = 0x2600;\nconst LINEAR                         = 0x2601;\n\n/* TextureMinFilter */\n// const NEAREST_MIPMAP_NEAREST         = 0x2700;\n// const LINEAR_MIPMAP_NEAREST          = 0x2701;\n// const NEAREST_MIPMAP_LINEAR          = 0x2702;\n// const LINEAR_MIPMAP_LINEAR           = 0x2703;\n\n/* Texture Target */\nconst TEXTURE_2D                     = 0x0de1;\nconst TEXTURE_CUBE_MAP               = 0x8513;\nconst TEXTURE_3D                     = 0x806f;\nconst TEXTURE_2D_ARRAY               = 0x8c1a;\n\n/* Cubemap Targets */\nconst TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\nconst TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\nconst TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\nconst TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851a;\n\n/* Texture Parameters */\nconst TEXTURE_MIN_FILTER             = 0x2801;\nconst TEXTURE_MAG_FILTER             = 0x2800;\nconst TEXTURE_WRAP_S                 = 0x2802;\nconst TEXTURE_WRAP_T                 = 0x2803;\nconst TEXTURE_WRAP_R                 = 0x8072;\nconst TEXTURE_MIN_LOD                = 0x813a;\nconst TEXTURE_MAX_LOD                = 0x813b;\nconst TEXTURE_BASE_LEVEL             = 0x813c;\nconst TEXTURE_MAX_LEVEL              = 0x813d;\n\n\n/* Pixel store */\nconst UNPACK_ALIGNMENT                   = 0x0cf5;\nconst UNPACK_ROW_LENGTH                  = 0x0cf2;\nconst UNPACK_IMAGE_HEIGHT                = 0x806e;\nconst UNPACK_SKIP_PIXELS                 = 0x0cf4;\nconst UNPACK_SKIP_ROWS                   = 0x0cf3;\nconst UNPACK_SKIP_IMAGES                 = 0x806d;\nconst UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\nconst UNPACK_PREMULTIPLY_ALPHA_WEBGL     = 0x9241;\nconst UNPACK_FLIP_Y_WEBGL                = 0x9240;\n\nconst R8                           = 0x8229;\nconst R8_SNORM                     = 0x8F94;\nconst R16F                         = 0x822D;\nconst R32F                         = 0x822E;\nconst R8UI                         = 0x8232;\nconst R8I                          = 0x8231;\nconst RG16UI                       = 0x823A;\nconst RG16I                        = 0x8239;\nconst RG32UI                       = 0x823C;\nconst RG32I                        = 0x823B;\nconst RG8                          = 0x822B;\nconst RG8_SNORM                    = 0x8F95;\nconst RG16F                        = 0x822F;\nconst RG32F                        = 0x8230;\nconst RG8UI                        = 0x8238;\nconst RG8I                         = 0x8237;\nconst R16UI                        = 0x8234;\nconst R16I                         = 0x8233;\nconst R32UI                        = 0x8236;\nconst R32I                         = 0x8235;\nconst RGB8                         = 0x8051;\nconst SRGB8                        = 0x8C41;\nconst RGB565                       = 0x8D62;\nconst RGB8_SNORM                   = 0x8F96;\nconst R11F_G11F_B10F               = 0x8C3A;\nconst RGB9_E5                      = 0x8C3D;\nconst RGB16F                       = 0x881B;\nconst RGB32F                       = 0x8815;\nconst RGB8UI                       = 0x8D7D;\nconst RGB8I                        = 0x8D8F;\nconst RGB16UI                      = 0x8D77;\nconst RGB16I                       = 0x8D89;\nconst RGB32UI                      = 0x8D71;\nconst RGB32I                       = 0x8D83;\nconst RGBA8                        = 0x8058;\nconst SRGB8_ALPHA8                 = 0x8C43;\nconst RGBA8_SNORM                  = 0x8F97;\nconst RGB5_A1                      = 0x8057;\nconst RGBA4                        = 0x8056;\nconst RGB10_A2                     = 0x8059;\nconst RGBA16F                      = 0x881A;\nconst RGBA32F                      = 0x8814;\nconst RGBA8UI                      = 0x8D7C;\nconst RGBA8I                       = 0x8D8E;\nconst RGB10_A2UI                   = 0x906F;\nconst RGBA16UI                     = 0x8D76;\nconst RGBA16I                      = 0x8D88;\nconst RGBA32I                      = 0x8D82;\nconst RGBA32UI                     = 0x8D70;\n\nconst DEPTH_COMPONENT16            = 0x81A5;\nconst DEPTH_COMPONENT24            = 0x81A6;\nconst DEPTH_COMPONENT32F           = 0x8CAC;\nconst DEPTH32F_STENCIL8            = 0x8CAD;\nconst DEPTH24_STENCIL8             = 0x88F0;\n\n/* DataType */\nconst BYTE$2                         = 0x1400;\nconst UNSIGNED_BYTE$2                = 0x1401;\nconst SHORT$2                        = 0x1402;\nconst UNSIGNED_SHORT$2               = 0x1403;\nconst INT$2                          = 0x1404;\nconst UNSIGNED_INT$2                 = 0x1405;\nconst FLOAT$2                        = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4$1       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1$1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5$1         = 0x8363;\nconst HALF_FLOAT$1                   = 0x140B;\nconst HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(\nconst UNSIGNED_INT_2_10_10_10_REV$1  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV$1 = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV$1     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV$1 = 0x8DAD;\nconst UNSIGNED_INT_24_8$1            = 0x84FA;\n\nconst RG                           = 0x8227;\nconst RG_INTEGER                   = 0x8228;\nconst RED                          = 0x1903;\nconst RED_INTEGER                  = 0x8D94;\nconst RGB_INTEGER                  = 0x8D98;\nconst RGBA_INTEGER                 = 0x8D99;\n\nconst formatInfo = {};\n{\n  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n  // the name.\n  const f = formatInfo;\n  f[ALPHA]           = { numColorComponents: 1, };\n  f[LUMINANCE]       = { numColorComponents: 1, };\n  f[LUMINANCE_ALPHA] = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RED]             = { numColorComponents: 1, };\n  f[RED_INTEGER]     = { numColorComponents: 1, };\n  f[RG]              = { numColorComponents: 2, };\n  f[RG_INTEGER]      = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGB_INTEGER]     = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RGBA_INTEGER]    = { numColorComponents: 4, };\n  f[DEPTH_COMPONENT] = { numColorComponents: 1, };\n  f[DEPTH_STENCIL]   = { numColorComponents: 2, };\n}\n\n/**\n * @typedef {Object} TextureFormatDetails\n * @property {number} textureFormat format to pass texImage2D and similar functions.\n * @property {boolean} colorRenderable true if you can render to this format of texture.\n * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.\n * @property {number[]} type Array of possible types you can pass to texImage2D and similar function\n * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element\n * @private\n */\n\nlet s_textureInternalFormatInfo;\nfunction getTextureInternalFormatInfo(internalFormat) {\n  if (!s_textureInternalFormatInfo) {\n    // NOTE: these properties need unique names so we can let Uglify mangle the name.\n    const t = {};\n    // unsized formats\n    t[ALPHA]              = { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[LUMINANCE]          = { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[LUMINANCE_ALPHA]    = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[RGB]                = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_5_6_5$1], };\n    t[RGBA]               = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_4_4_4_4$1, UNSIGNED_SHORT_5_5_5_1$1], };\n    t[DEPTH_COMPONENT]    = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],              type: [UNSIGNED_INT$2, UNSIGNED_SHORT$2], };\n\n    // sized formats\n    t[R8]                 = { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };\n    t[R8_SNORM]           = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE$2], };\n    t[R16F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT$2, HALF_FLOAT$1], };\n    t[R32F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };\n    t[R8UI]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };\n    t[R8I]                = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE$2], };\n    t[R16UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT$2], };\n    t[R16I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT$2], };\n    t[R32UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };\n    t[R32I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT$2], };\n    t[RG8]                = { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };\n    t[RG8_SNORM]          = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE$2], };\n    t[RG16F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RG32F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT$2], };\n    t[RG8UI]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };\n    t[RG8I]               = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE$2], };\n    t[RG16UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT$2], };\n    t[RG16I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT$2], };\n    t[RG32UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT$2], };\n    t[RG32I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT$2], };\n    t[RGB8]               = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[SRGB8]              = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[RGB565]             = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_6_5$1], };\n    t[RGB8_SNORM]         = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE$2], };\n    t[R11F_G11F_B10F]     = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_10F_11F_11F_REV$1], };\n    t[RGB9_E5]            = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_5_9_9_9_REV$1], };\n    t[RGB16F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RGB32F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT$2], };\n    t[RGB8UI]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[RGB8I]              = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE$2], };\n    t[RGB16UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT$2], };\n    t[RGB16I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT$2], };\n    t[RGB32UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT$2], };\n    t[RGB32I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT$2], };\n    t[RGBA8]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[SRGB8_ALPHA8]       = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[RGBA8_SNORM]        = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE$2], };\n    t[RGB5_A1]            = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_5_5_1$1, UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA4]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_4_4_4_4$1], };\n    t[RGB10_A2]           = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA16F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RGBA32F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT$2], };\n    t[RGBA8UI]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[RGBA8I]             = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE$2], };\n    t[RGB10_A2UI]         = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA16UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT$2], };\n    t[RGBA16I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT$2], };\n    t[RGBA32I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT$2], };\n    t[RGBA32UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT$2], };\n    // Sized Internal\n    t[DEPTH_COMPONENT16]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT$2, UNSIGNED_INT$2], };\n    t[DEPTH_COMPONENT24]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };\n    t[DEPTH_COMPONENT32F] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };\n    t[DEPTH24_STENCIL8]   = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8$1], };\n    t[DEPTH32F_STENCIL8]  = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV$1], };\n\n    Object.keys(t).forEach(function(internalFormat) {\n      const info = t[internalFormat];\n      info.bytesPerElementMap = {};\n      info.bytesPerElement.forEach(function(bytesPerElement, ndx) {\n        const type = info.type[ndx];\n        info.bytesPerElementMap[type] = bytesPerElement;\n      });\n    });\n    s_textureInternalFormatInfo = t;\n  }\n  return s_textureInternalFormatInfo[internalFormat];\n}\n\n/**\n * Gets the number of bytes per element for a given internalFormat / type\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {number} the number of bytes per element for the given internalFormat, type combo\n * @memberOf module:twgl/textures\n */\nfunction getBytesPerElementForInternalFormat(internalFormat, type) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  const bytesPerElement = info.bytesPerElementMap[type];\n  if (bytesPerElement === undefined) {\n    throw \"unknown internal format\";\n  }\n  return bytesPerElement;\n}\n\n/**\n * Info related to a specific texture internalFormat as returned\n * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.\n *\n * @typedef {Object} TextureFormatInfo\n * @property {number} format Format to pass to texImage2D and related functions\n * @property {number} type Type to pass to texImage2D and related functions\n * @memberOf module:twgl/textures\n */\n\n/**\n * Gets the format and type for a given internalFormat\n *\n * @param {number} internalFormat The internal format\n * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,\n * @memberOf module:twgl/textures\n */\nfunction getFormatAndTypeForInternalFormat(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return {\n    format: info.textureFormat,\n    type: info.type[0],\n  };\n}\n\n/**\n * Returns true if value is power of 2\n * @param {number} value number to check.\n * @return true if value is power of 2\n * @private\n */\nfunction isPowerOf2(value) {\n  return (value & (value - 1)) === 0;\n}\n\n/**\n * Gets whether or not we can generate mips for the given\n * internal format.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number} width The width parameter from texImage2D etc..\n * @param {number} height The height parameter from texImage2D etc..\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canGenerateMipmap(gl, width, height, internalFormat) {\n  if (!isWebGL2(gl)) {\n    return isPowerOf2(width) && isPowerOf2(height);\n  }\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.colorRenderable && info.textureFilterable;\n}\n\n/**\n * Gets whether or not we can generate mips for the given format\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canFilter(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.textureFilterable;\n}\n\n/**\n * Gets the number of components for a given image format.\n * @param {number} format the format.\n * @return {number} the number of components for the format.\n * @memberOf module:twgl/textures\n */\nfunction getNumComponentsForFormat(format) {\n  const info = formatInfo[format];\n  if (!info) {\n    throw \"unknown format: \" + format;\n  }\n  return info.numColorComponents;\n}\n\n/**\n * Gets the texture type for a given array type.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @return {number} the gl texture type\n * @private\n */\nfunction getTextureTypeForArrayType(gl, src, defaultType) {\n  if (isArrayBuffer$1(src)) {\n    return getGLTypeForTypedArray(src);\n  }\n  return defaultType || UNSIGNED_BYTE$2;\n}\n\nfunction guessDimensions(gl, target, width, height, numElements) {\n  if (numElements % 1 !== 0) {\n    throw \"can't guess dimensions\";\n  }\n  if (!width && !height) {\n    const size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP ? 6 : 1));\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width;\n    if (height % 1) {\n      throw \"can't guess dimensions\";\n    }\n  } else if (!width) {\n    width = numElements / height;\n    if (width % 1) {\n      throw \"can't guess dimensions\";\n    }\n  }\n  return {\n    width: width,\n    height: height,\n  };\n}\n\n/**\n * Sets the default texture color.\n *\n * The default texture color is used when loading textures from\n * urls. Because the URL will be loaded async we'd like to be\n * able to use the texture immediately. By putting a 1x1 pixel\n * color in the texture we can start using the texture before\n * the URL has loaded.\n *\n * @param {number[]} color Array of 4 values in the range 0 to 1\n * @deprecated see {@link module:twgl.setDefaults}\n * @memberOf module:twgl/textures\n */\nfunction setDefaultTextureColor(color) {\n  defaults$1.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\nfunction setDefaults$1(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$1);\n  if (newDefaults.textureColor) {\n    setDefaultTextureColor(newDefaults.textureColor);\n  }\n}\n\n/**\n * A function to generate the source for a texture.\n * @callback TextureFunc\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options the texture options\n * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.\n * @memberOf module:twgl\n */\n\n/**\n * Texture options passed to most texture functions. Each function will use whatever options\n * are appropriate for its needs. This lets you pass the same options to all functions.\n *\n * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,\n * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.\n *\n * @typedef {Object} TextureOptions\n * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.\n * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n * @property {number} [minMag] both the min and mag filter settings.\n * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`\n *     is ArrayBufferView defaults to type that matches ArrayBufferView type.\n * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [minLod] TEXTURE_MIN_LOD setting\n * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.\n *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`\n *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink\n * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and\n *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above\n *    then then `auto` is assumed to be `false` unless explicity set to `true`.\n * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n *\n *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n *\n * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n *\n *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.\n *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n *    The pieces will be uploaded in `cubeFaceOrder`\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture\n *    and will be scaled to the specified width and height OR to the size of the first image that loads.\n *\n *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n *    `HTMLCanvasElement`, `HTMLVideoElement`.\n *\n *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is\n *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`\n *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n *    by 6. Then\n *\n *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n *\n *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n *\n * If `number[]` will be converted to `type`.\n *\n * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n * an array etc...\n *\n * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n *\n * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n *    default: undefined. Also see {@link module:twgl.setDefaults}.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets any packing state that will be set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setPackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n  }\n  if (options.premultiplyAlpha !== undefined) {\n    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n  }\n  if (options.flipY !== undefined) {\n    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);\n  }\n}\n\n/**\n * Set skip state to defaults\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setSkipStateToDefault(gl) {\n  gl.pixelStorei(UNPACK_ALIGNMENT, 4);\n  if (isWebGL2(gl)) {\n    gl.pixelStorei(UNPACK_ROW_LENGTH, 0);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_PIXELS, 0);\n    gl.pixelStorei(UNPACK_SKIP_ROWS, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n  }\n}\n\n/**\n * Sets the parameters of a texture or sampler\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number|WebGLSampler} target texture target or sampler\n * @param {function()} parameteriFn texParameteri or samplerParameteri fn\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @private\n */\nfunction setTextureSamplerParameters(gl, target, parameteriFn, options) {\n  if (options.minMag) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);\n  }\n  if (options.min) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);\n  }\n  if (options.mag) {\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);\n  }\n  if (options.wrap) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);\n    if (target === TEXTURE_3D || isSampler(gl, target)) {\n      parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);\n    }\n  }\n  if (options.wrapR) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);\n  }\n  if (options.wrapS) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);\n  }\n  if (options.wrapT) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);\n  }\n  if (options.minLod) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);\n  }\n  if (options.maxLod) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);\n  }\n  if (options.baseLevel) {\n    parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);\n  }\n  if (options.maxLevel) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);\n  }\n}\n\n/**\n * Sets the texture parameters of a texture.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureParameters(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n}\n\n/**\n * Sets the sampler parameters of a sampler.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setSamplerParameters(gl, sampler, options) {\n  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n}\n\n/**\n * Creates a new sampler object and sets parameters.\n *\n * Example:\n *\n *      const sampler = twgl.createSampler(gl, {\n *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n * @return {Object.<string,WebGLSampler>} the created samplers by name\n * @private\n */\nfunction createSampler(gl, options) {\n  const sampler = gl.createSampler();\n  setSamplerParameters(gl, sampler, options);\n  return sampler;\n}\n\n/**\n * Creates a multiple sampler objects and sets parameters on each.\n *\n * Example:\n *\n *      const samplers = twgl.createSamplers(gl, {\n *        nearest: {\n *          minMag: gl.NEAREST,\n *        },\n *        nearestClampS: {\n *          minMag: gl.NEAREST,\n *          wrapS: gl.CLAMP_TO_NEAREST,\n *        },\n *        linear: {\n *          minMag: gl.LINEAR,\n *        },\n *        nearestClamp: {\n *          minMag: gl.NEAREST,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClamp: {\n *          minMag: gl.LINEAR,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClampT: {\n *          minMag: gl.LINEAR,\n *          wrapT: gl.CLAMP_TO_EDGE,\n *        },\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n * @private\n */\nfunction createSamplers(gl, samplerOptions) {\n  const samplers = {};\n  Object.keys(samplerOptions).forEach(function(name) {\n    samplers[name] = createSampler(gl, samplerOptions[name]);\n  });\n  return samplers;\n}\n\n/**\n * Makes a 1x1 pixel\n * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values\n * @return {Uint8Array} Unit8Array with color.\n * @private\n */\nfunction make1Pixel(color) {\n  color = color || defaults$1.textureColor;\n  if (isArrayBuffer$1(color)) {\n    return color;\n  }\n  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\n/**\n * Sets filtering or generates mips for texture based on width or height\n * If width or height is not passed in uses `options.width` and//or `options.height`\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @param {number} [width] width of texture\n * @param {number} [height] height of texture\n * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n * @memberOf module:twgl/textures\n */\nfunction setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {\n  options = options || defaults$1.textureOptions;\n  internalFormat = internalFormat || RGBA;\n  const target = options.target || TEXTURE_2D;\n  width = width || options.width;\n  height = height || options.height;\n  gl.bindTexture(target, tex);\n  if (canGenerateMipmap(gl, width, height, internalFormat)) {\n    gl.generateMipmap(target);\n  } else {\n    const filtering = canFilter(internalFormat) ? LINEAR : NEAREST;\n    gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n}\n\nfunction shouldAutomaticallySetTextureFilteringForSize(options) {\n  return options.auto === true || (options.auto === undefined && options.level === undefined);\n}\n\n/**\n * Gets an array of cubemap face enums\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @return {number[]} cubemap face enums\n * @private\n */\nfunction getCubeFaceOrder(gl, options) {\n  options = options || {};\n  return options.cubeFaceOrder || [\n      TEXTURE_CUBE_MAP_POSITIVE_X,\n      TEXTURE_CUBE_MAP_NEGATIVE_X,\n      TEXTURE_CUBE_MAP_POSITIVE_Y,\n      TEXTURE_CUBE_MAP_NEGATIVE_Y,\n      TEXTURE_CUBE_MAP_POSITIVE_Z,\n      TEXTURE_CUBE_MAP_NEGATIVE_Z,\n    ];\n}\n\n/**\n * @typedef {Object} FaceInfo\n * @property {number} face gl enum for texImage2D\n * @property {number} ndx face index (0 - 5) into source data\n * @ignore\n */\n\n/**\n * Gets an array of FaceInfos\n * There's a bug in some NVidia drivers that will crash the driver if\n * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n * the user's desired order from his faces to WebGL and make sure we\n * do the faces in WebGL order\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but\n *    it's needed internally to sort the array of `ndx` properties by `face`.\n * @private\n */\nfunction getCubeFacesWithNdx(gl, options) {\n  const faces = getCubeFaceOrder(gl, options);\n  // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n  const facesWithNdx = faces.map(function(face, ndx) {\n    return { face: face, ndx: ndx };\n  });\n  facesWithNdx.sort(function(a, b) {\n    return a.face - b.face;\n  });\n  return facesWithNdx;\n}\n\n/**\n * Set a texture from the contents of an element. Will also set\n * texture filtering or generate mips based on the dimensions of the element\n * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {HTMLElement} element a canvas, img, or video element.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @kind function\n */\nfunction setTextureFromElement(gl, tex, element, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  const level = options.level || 0;\n  let width = element.width;\n  let height = element.height;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // guess the parts\n    const imgWidth  = element.width;\n    const imgHeight = element.height;\n    let size;\n    let slices;\n    if (imgWidth / 6 === imgHeight) {\n      // It's 6x1\n      size = imgHeight;\n      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    } else if (imgHeight / 6 === imgWidth) {\n      // It's 1x6\n      size = imgWidth;\n      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n    } else if (imgWidth / 3 === imgHeight / 2) {\n      // It's 3x2\n      size = imgWidth / 3;\n      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n    } else if (imgWidth / 2 === imgHeight / 3) {\n      // It's 2x3\n      size = imgWidth / 2;\n      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n    } else {\n      throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n    }\n    const ctx = getShared2DContext();\n    if (ctx) {\n      ctx.canvas.width = size;\n      ctx.canvas.height = size;\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);\n      });\n      // Free up the canvas memory\n      ctx.canvas.width = 1;\n      ctx.canvas.height = 1;\n    } else if (typeof createImageBitmap !== 'undefined') {\n      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's\n      // note lossy? (alpha is not premultiplied? although I'm not sure what\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        // We can't easily use a default texture color here as it would have to match\n        // the type across all faces where as with a 2D one there's only one face\n        // so we're replacing everything all at once. It also has to be the correct size.\n        // On the other hand we need all faces to be the same size so as one face loads\n        // the rest match else the texture will be un-renderable.\n        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);\n        createImageBitmap(element, xOffset, yOffset, size, size, {\n          premultiplyAlpha: 'none',\n          colorSpaceConversion: 'none',\n        })\n        .then(function(imageBitmap) {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n          }\n        });\n      });\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    const smallest = Math.min(element.width, element.height);\n    const largest = Math.max(element.width, element.height);\n    const depth = largest / smallest;\n    if (depth % 1 !== 0) {\n      throw \"can not compute 3D dimensions of element\";\n    }\n    const xMult = element.width  === largest ? 1 : 0;\n    const yMult = element.height === largest ? 1 : 0;\n    gl.pixelStorei(UNPACK_ALIGNMENT, 1);\n    gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n    for (let d = 0; d < depth; ++d) {\n      const srcX = d * smallest * xMult;\n      const srcY = d * smallest * yMult;\n      gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);\n      gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);\n      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);\n    }\n    setSkipStateToDefault(gl);\n  } else {\n    gl.texImage2D(target, level, internalFormat, format, type, element);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n}\n\nfunction noop() {\n}\n\n/**\n * Checks whether the url's origin is the same so that we can set the `crossOrigin`\n * @param {string} url url to image\n * @returns {boolean} true if the window's origin is the same as image's url\n * @private\n */\nfunction urlIsSameOrigin(url) {\n  if (typeof document !== 'undefined') {\n    // for IE really\n    const a = document.createElement('a');\n    a.href = url;\n    return a.hostname === location.hostname &&\n           a.port     === location.port &&\n           a.protocol === location.protocol;\n  } else {\n    const localOrigin = (new URL(location.href)).origin;\n    const urlOrigin = (new URL(url, location.href)).origin;\n    return urlOrigin === localOrigin;\n  }\n}\n\nfunction setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {\n  return crossOrigin === undefined && !urlIsSameOrigin(url)\n     ? 'anonymous'\n     : crossOrigin;\n}\n\n/**\n * Loads an image\n * @param {string} url url to image\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @return {HTMLImageElement} the image being loaded.\n * @private\n */\nfunction loadImage(url, crossOrigin, callback) {\n  callback = callback || noop;\n  let img;\n  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults$1.crossOrigin;\n  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);\n  if (typeof Image !== 'undefined') {\n    img = new Image();\n    if (crossOrigin !== undefined) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    const clearEventHandlers = function clearEventHandlers() {\n      img.removeEventListener('error', onError);  // eslint-disable-line\n      img.removeEventListener('load', onLoad);  // eslint-disable-line\n      img = null;\n    };\n\n    const onError = function onError() {\n      const msg = \"couldn't load image: \" + url;\n      error(msg);\n      callback(msg, img);\n      clearEventHandlers();\n    };\n\n    const onLoad = function onLoad() {\n      callback(null, img);\n      clearEventHandlers();\n    };\n\n    img.addEventListener('error', onError);\n    img.addEventListener('load', onLoad);\n    img.src = url;\n    return img;\n  } else if (typeof ImageBitmap !== 'undefined') {\n    let err;\n    let bm;\n    const cb = function cb() {\n      callback(err, bm);\n    };\n\n    const options = {};\n    if (crossOrigin) {\n      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin\n    }\n    fetch(url, options).then(function(response) {\n      if (!response.ok) {\n        throw response;\n      }\n      return response.blob();\n    }).then(function(blob) {\n      return createImageBitmap(blob, {\n        premultiplyAlpha: 'none',\n        colorSpaceConversion: 'none',\n      });\n    }).then(function(bitmap) {\n      // not sure if this works. We don't want\n      // to catch the user's error. So, call\n      // the callback in a timeout so we're\n      // not in this scope inside the promise.\n      bm = bitmap;\n      setTimeout(cb);\n    }).catch(function(e) {\n      err = e;\n      setTimeout(cb);\n    });\n    img = null;\n  }\n  return img;\n}\n\n/**\n * check if object is a TexImageSource\n *\n * @param {Object} obj Object to test\n * @return {boolean} true if object is a TexImageSource\n * @private\n */\nfunction isTexImageSource(obj) {\n  return (typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap) ||\n         (typeof ImageData !== 'undefined'  && obj instanceof ImageData) ||\n         (typeof HTMLElement !== 'undefined'  && obj instanceof HTMLElement);\n}\n\n/**\n * if obj is an TexImageSource then just\n * uses it otherwise if obj is a string\n * then load it first.\n *\n * @param {string|TexImageSource} obj\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @private\n */\nfunction loadAndUseImage(obj, crossOrigin, callback) {\n  if (isTexImageSource(obj)) {\n    setTimeout(function() {\n      callback(null, obj);\n    });\n    return obj;\n  }\n\n  return loadImage(obj, crossOrigin, callback);\n}\n\n/**\n * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction setTextureTo1PixelColor(gl, tex, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  if (options.color === false) {\n    return;\n  }\n  // Assume it's a URL\n  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n  const color = make1Pixel(options.color);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, 0, RGBA, 1, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n  } else {\n    gl.texImage2D(target, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n  }\n}\n\n/**\n * The src image(s) used to create a texture.\n *\n * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n * you can pass in urls for images to load into the textures. If it's a single url\n * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n * this will be a corresponding array of images for the cubemap.\n *\n * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback TextureReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} texture the texture.\n * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when all images have finished downloading and been uploaded into their respective textures\n * @callback TexturesReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback CubemapReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each face.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback ThreeDReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each slice.\n * @memberOf module:twgl\n */\n\n/**\n * Loads a texture from an image from a Url as specified in `options.src`\n * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n * immediately useable. It will be updated with the contents of the image once the image has finished\n * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n *    be non null if there was an error.\n * @return {HTMLImageElement} the image being downloaded.\n * @memberOf module:twgl/textures\n */\nfunction loadTextureFromUrl(gl, tex, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  const img = loadAndUseImage(options.src, options.crossOrigin, function(err, img) {\n    if (err) {\n      callback(err, tex, img);\n    } else {\n      setTextureFromElement(gl, tex, img, options);\n      callback(null, tex, img);\n    }\n  });\n  return img;\n}\n\n/**\n * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction loadCubemapFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  if (urls.length !== 6) {\n    throw \"there must be 6 urls for a cubemap\";\n  }\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$2;\n  const target = options.target || TEXTURE_2D;\n  if (target !== TEXTURE_CUBE_MAP) {\n    throw \"target must be TEXTURE_CUBE_MAP\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = 6;\n  const errors = [];\n  const faces = getCubeFaceOrder(gl, options);\n  let imgs;  // eslint-disable-line\n\n  function uploadImg(faceTarget) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        if (img.width !== img.height) {\n          errors.push(\"cubemap face img is not a square: \" + img.src);\n        } else {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n\n          // So assuming this is the first image we now have one face that's img sized\n          // and 5 faces that are 1x1 pixel so size the other faces\n          if (numToLoad === 5) {\n            // use the default order\n            getCubeFaceOrder().forEach(function(otherTarget) {\n              // Should we re-use the same face or a color?\n              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);\n            });\n          } else {\n            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);\n          }\n\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            gl.generateMipmap(target);\n          }\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n  });\n}\n\n/**\n * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.\n * Will set the texture to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n *\n * If the width and height is not specified the width and height of the first\n * image loaded will be used. Note that since images are loaded async\n * which image downloads first is unknown.\n *\n * If an image is not the same size as the width and height it will be scaled\n * to that width and height.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction loadSlicesFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$2;\n  const target = options.target || TEXTURE_2D_ARRAY;\n  if (target !== TEXTURE_3D && target !== TEXTURE_2D_ARRAY) {\n    throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = urls.length;\n  const errors = [];\n  let imgs;  // eslint-disable-line\n  const level = options.level || 0;\n  let width = options.width;\n  let height = options.height;\n  const depth = urls.length;\n  let firstImage = true;\n\n  function uploadImg(slice) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        setPackState(gl, options);\n        gl.bindTexture(target, tex);\n\n        if (firstImage) {\n          firstImage = false;\n          width = options.width || img.width;\n          height = options.height || img.height;\n          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n\n          // put it in every slice otherwise some slices will be 0,0,0,0\n          for (let s = 0; s < depth; ++s) {\n            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);\n          }\n        } else {\n          let src = img;\n          let ctx;\n          if (img.width !== width || img.height !== height) {\n            // Size the image to fix\n            ctx = getShared2DContext();\n            src = ctx.canvas;\n            ctx.canvas.width = width;\n            ctx.canvas.height = height;\n            ctx.drawImage(img, 0, 0, width, height);\n          }\n\n          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);\n\n          // free the canvas memory\n          if (ctx && src === ctx.canvas) {\n            ctx.canvas.width = 0;\n            ctx.canvas.height = 0;\n          }\n        }\n\n        if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n          gl.generateMipmap(target);\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));\n  });\n}\n\n/**\n * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n * guess the size. See {@link module:twgl.TextureOptions}.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureFromArray(gl, tex, src, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  let width = options.width;\n  let height = options.height;\n  let depth = options.depth;\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  if (!isArrayBuffer$1(src)) {\n    const Type = getTypedArrayTypeForGLType(type);\n    src = new Type(src);\n  } else if (src instanceof Uint8ClampedArray) {\n    src = new Uint8Array(src.buffer);\n  }\n\n  const bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\n  const numElements = src.byteLength / bytesPerElement;  // TODO: check UNPACK_ALIGNMENT?\n  if (numElements % 1) {\n    throw \"length wrong size for format: \" + glEnumToString(gl, format);\n  }\n  let dimensions;\n  if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    if (!width && !height && !depth) {\n      const size = Math.cbrt(numElements);\n      if (size % 1 !== 0) {\n        throw \"can't guess cube size of array of numElements: \" + numElements;\n      }\n      width = size;\n      height = size;\n      depth = size;\n    } else if (width && (!height || !depth)) {\n      dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n      height = dimensions.width;\n      depth = dimensions.height;\n    } else if (height && (!width || !depth)) {\n      dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n      width = dimensions.width;\n      depth = dimensions.height;\n    } else {\n      dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n      width = dimensions.width;\n      height = dimensions.height;\n    }\n  } else {\n    dimensions = guessDimensions(gl, target, width, height, numElements);\n    width = dimensions.width;\n    height = dimensions.height;\n  }\n  setSkipStateToDefault(gl);\n  gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n    const faceSize = numElements / 6 * elementsPerElement;\n\n    getCubeFacesWithNdx(gl, options).forEach(f => {\n      const offset = faceSize * f.ndx;\n      const data = src.subarray(offset, offset + faceSize);\n      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);\n    });\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);\n  }\n  return {\n    width: width,\n    height: height,\n    depth: depth,\n    type: type,\n  };\n}\n\n/**\n * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n * You must set `options.width` and `options.height`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setEmptyTexture(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);\n  }\n}\n\n/**\n * Creates a texture based on the options passed in.\n *\n * Note: may reset UNPACK_ALIGNMENT, UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_IMAGES\n * UNPACK_SKIP_PIXELS, and UNPACK_SKIP_ROWS\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n * @return {WebGLTexture} the created texture.\n * @memberOf module:twgl/textures\n */\nfunction createTexture(gl, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  const tex = gl.createTexture();\n  const target = options.target || TEXTURE_2D;\n  let width  = options.width  || 1;\n  let height = options.height || 1;\n  const internalFormat = options.internalFormat || RGBA;\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // this should have been the default for cubemaps :(\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n  let src = options.src;\n  if (src) {\n    if (typeof src === \"function\") {\n      src = src(gl, options);\n    }\n    if (typeof (src) === \"string\") {\n      loadTextureFromUrl(gl, tex, options, callback);\n    } else if (isArrayBuffer$1(src) ||\n               (Array.isArray(src) && (\n                    typeof src[0] === 'number' ||\n                    Array.isArray(src[0]) ||\n                    isArrayBuffer$1(src[0]))\n               )\n              ) {\n      const dimensions = setTextureFromArray(gl, tex, src, options);\n      width  = dimensions.width;\n      height = dimensions.height;\n    } else if (Array.isArray(src) && (typeof (src[0]) === 'string' || isTexImageSource(src[0]))) {\n      if (target === TEXTURE_CUBE_MAP) {\n        loadCubemapFromUrls(gl, tex, options, callback);\n      } else {\n        loadSlicesFromUrls(gl, tex, options, callback);\n      }\n    } else { // if (isTexImageSource(src))\n      setTextureFromElement(gl, tex, src, options);\n      width  = src.width;\n      height = src.height;\n    }\n  } else {\n    setEmptyTexture(gl, tex, options);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n  return tex;\n}\n\n/**\n * Resizes a texture based on the options passed in.\n *\n * Note: This is not a generic resize anything function.\n * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n * It will use `options.src` if it exists to try to determine a `type`\n * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n * for the texture. Texture parameters will be set accordingly\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the texture to resize\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {number} [width] the new width. If not passed in will use `options.width`\n * @param {number} [height] the new height. If not passed in will use `options.height`\n * @param {number} [depth] the new depth. If not passed in will use `options.depth`\n * @memberOf module:twgl/textures\n */\nfunction resizeTexture(gl, tex, options, width, height, depth) {\n  width = width || options.width;\n  height = height || options.height;\n  depth = depth || options.depth;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  let type;\n  const src = options.src;\n  if (!src) {\n    type = options.type || formatType.type;\n  } else if (isArrayBuffer$1(src) || (Array.isArray(src) && typeof (src[0]) === 'number')) {\n    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  } else {\n    type = options.type || formatType.type;\n  }\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);\n  }\n}\n\n/**\n * Check if a src is an async request.\n * if src is a string we're going to download an image\n * if src is an array of strings we're going to download cubemap images\n * @param {*} src The src from a TextureOptions\n * @returns {bool} true if src is async.\n * @private\n */\nfunction isAsyncSrc(src) {\n  return typeof src === 'string' ||\n         (Array.isArray(src) && typeof src[0] === 'string');\n}\n\n/**\n * Creates a bunch of textures based on the passed in options.\n *\n * Example:\n *\n *     const textures = twgl.createTextures(gl, {\n *       // a power of 2 image\n *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n *       // a non-power of 2 image\n *       clover: { src: \"images/clover.jpg\" },\n *       // From a canvas\n *       fromCanvas: { src: ctx.canvas },\n *       // A cubemap from 6 images\n *       yokohama: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: [\n *           'images/yokohama/posx.jpg',\n *           'images/yokohama/negx.jpg',\n *           'images/yokohama/posy.jpg',\n *           'images/yokohama/negy.jpg',\n *           'images/yokohama/posz.jpg',\n *           'images/yokohama/negz.jpg',\n *         ],\n *       },\n *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n *       goldengate: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: 'images/goldengate.jpg',\n *       },\n *       // A 2x2 pixel texture from a JavaScript array\n *       checker: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         src: [\n *           255,255,255,255,\n *           192,192,192,255,\n *           192,192,192,255,\n *           255,255,255,255,\n *         ],\n *       },\n *       // a 1x2 pixel texture from a typed array.\n *       stripe: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         format: gl.LUMINANCE,\n *         src: new Uint8Array([\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *         ]),\n *         width: 1,\n *       },\n *     });\n *\n * Now\n *\n * *   `textures.hftIcon` will be a 2d texture\n * *   `textures.clover` will be a 2d texture\n * *   `textures.fromCanvas` will be a 2d texture\n * *   `textures.yohohama` will be a cubemap texture\n * *   `textures.goldengate` will be a cubemap texture\n * *   `textures.checker` will be a 2d texture\n * *   `textures.stripe` will be a 2d texture\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n * @return {Object.<string,WebGLTexture>} the created textures by name\n * @memberOf module:twgl/textures\n */\nfunction createTextures(gl, textureOptions, callback) {\n  callback = callback || noop;\n  let numDownloading = 0;\n  const errors = [];\n  const textures = {};\n  const images = {};\n\n  function callCallbackIfReady() {\n    if (numDownloading === 0) {\n      setTimeout(function() {\n        callback(errors.length ? errors : undefined, textures, images);\n      }, 0);\n    }\n  }\n\n  Object.keys(textureOptions).forEach(function(name) {\n    const options = textureOptions[name];\n    let onLoadFn;\n    if (isAsyncSrc(options.src)) {\n      onLoadFn = function(err, tex, img) {\n        images[name] = img;\n        --numDownloading;\n        if (err) {\n          errors.push(err);\n        }\n        callCallbackIfReady();\n      };\n      ++numDownloading;\n    }\n    textures[name] = createTexture(gl, options, onLoadFn);\n  });\n\n  // queue the callback if there are no images to download.\n  // We do this because if your code is structured to wait for\n  // images to download but then you comment out all the async\n  // images your code would break.\n  callCallbackIfReady();\n\n  return textures;\n}\n\nvar textures = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  setTextureDefaults_: setDefaults$1,\n  createSampler: createSampler,\n  createSamplers: createSamplers,\n  setSamplerParameters: setSamplerParameters,\n  createTexture: createTexture,\n  setEmptyTexture: setEmptyTexture,\n  setTextureFromArray: setTextureFromArray,\n  loadTextureFromUrl: loadTextureFromUrl,\n  setTextureFromElement: setTextureFromElement,\n  setTextureFilteringForSize: setTextureFilteringForSize,\n  setTextureParameters: setTextureParameters,\n  setDefaultTextureColor: setDefaultTextureColor,\n  createTextures: createTextures,\n  resizeTexture: resizeTexture,\n  canGenerateMipmap: canGenerateMipmap,\n  canFilter: canFilter,\n  getNumComponentsForFormat: getNumComponentsForFormat,\n  getBytesPerElementForInternalFormat: getBytesPerElementForInternalFormat,\n  getFormatAndTypeForInternalFormat: getFormatAndTypeForInternalFormat\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level shader program related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.programs` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/programs\n */\n\nconst error$1 = error;\nconst warn$1 = warn;\nfunction getElementById(id) {\n  return (typeof document !== 'undefined' && document.getElementById)\n      ? document.getElementById(id)\n      : null;\n}\n\nconst TEXTURE0                       = 0x84c0;\nconst DYNAMIC_DRAW                   = 0x88e8;\n\nconst ARRAY_BUFFER$1                   = 0x8892;\nconst ELEMENT_ARRAY_BUFFER$1           = 0x8893;\nconst UNIFORM_BUFFER                 = 0x8a11;\nconst TRANSFORM_FEEDBACK_BUFFER      = 0x8c8e;\n\nconst TRANSFORM_FEEDBACK             = 0x8e22;\n\nconst COMPILE_STATUS                 = 0x8b81;\nconst LINK_STATUS                    = 0x8b82;\nconst FRAGMENT_SHADER                = 0x8b30;\nconst VERTEX_SHADER                  = 0x8b31;\nconst SEPARATE_ATTRIBS               = 0x8c8d;\n\nconst ACTIVE_UNIFORMS                = 0x8b86;\nconst ACTIVE_ATTRIBUTES              = 0x8b89;\nconst TRANSFORM_FEEDBACK_VARYINGS    = 0x8c83;\nconst ACTIVE_UNIFORM_BLOCKS          = 0x8a36;\nconst UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = 0x8a44;\nconst UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;\nconst UNIFORM_BLOCK_DATA_SIZE                     = 0x8a40;\nconst UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = 0x8a43;\n\nconst FLOAT$3                         = 0x1406;\nconst FLOAT_VEC2                    = 0x8B50;\nconst FLOAT_VEC3                    = 0x8B51;\nconst FLOAT_VEC4                    = 0x8B52;\nconst INT$3                           = 0x1404;\nconst INT_VEC2                      = 0x8B53;\nconst INT_VEC3                      = 0x8B54;\nconst INT_VEC4                      = 0x8B55;\nconst BOOL                          = 0x8B56;\nconst BOOL_VEC2                     = 0x8B57;\nconst BOOL_VEC3                     = 0x8B58;\nconst BOOL_VEC4                     = 0x8B59;\nconst FLOAT_MAT2                    = 0x8B5A;\nconst FLOAT_MAT3                    = 0x8B5B;\nconst FLOAT_MAT4                    = 0x8B5C;\nconst SAMPLER_2D                    = 0x8B5E;\nconst SAMPLER_CUBE                  = 0x8B60;\nconst SAMPLER_3D                    = 0x8B5F;\nconst SAMPLER_2D_SHADOW             = 0x8B62;\nconst FLOAT_MAT2x3                  = 0x8B65;\nconst FLOAT_MAT2x4                  = 0x8B66;\nconst FLOAT_MAT3x2                  = 0x8B67;\nconst FLOAT_MAT3x4                  = 0x8B68;\nconst FLOAT_MAT4x2                  = 0x8B69;\nconst FLOAT_MAT4x3                  = 0x8B6A;\nconst SAMPLER_2D_ARRAY              = 0x8DC1;\nconst SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;\nconst SAMPLER_CUBE_SHADOW           = 0x8DC5;\nconst UNSIGNED_INT$3                  = 0x1405;\nconst UNSIGNED_INT_VEC2             = 0x8DC6;\nconst UNSIGNED_INT_VEC3             = 0x8DC7;\nconst UNSIGNED_INT_VEC4             = 0x8DC8;\nconst INT_SAMPLER_2D                = 0x8DCA;\nconst INT_SAMPLER_3D                = 0x8DCB;\nconst INT_SAMPLER_CUBE              = 0x8DCC;\nconst INT_SAMPLER_2D_ARRAY          = 0x8DCF;\nconst UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;\nconst UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;\nconst UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;\nconst UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\n\nconst TEXTURE_2D$1                    = 0x0DE1;\nconst TEXTURE_CUBE_MAP$1              = 0x8513;\nconst TEXTURE_3D$1                    = 0x806F;\nconst TEXTURE_2D_ARRAY$1              = 0x8C1A;\n\nconst typeMap = {};\n\n/**\n * Returns the corresponding bind point for a given sampler type\n * @private\n */\nfunction getBindPointForSamplerType(gl, type) {\n  return typeMap[type].bindPoint;\n}\n\n// This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n// this code could be a lot smaller but that is sadly really slow (T_T)\n\nfunction floatSetter(gl, location) {\n  return function(v) {\n    gl.uniform1f(location, v);\n  };\n}\n\nfunction floatArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1fv(location, v);\n  };\n}\n\nfunction floatVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2fv(location, v);\n  };\n}\n\nfunction floatVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3fv(location, v);\n  };\n}\n\nfunction floatVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4fv(location, v);\n  };\n}\n\nfunction intSetter(gl, location) {\n  return function(v) {\n    gl.uniform1i(location, v);\n  };\n}\n\nfunction intArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1iv(location, v);\n  };\n}\n\nfunction intVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2iv(location, v);\n  };\n}\n\nfunction intVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3iv(location, v);\n  };\n}\n\nfunction intVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4iv(location, v);\n  };\n}\n\nfunction uintSetter(gl, location) {\n  return function(v) {\n    gl.uniform1ui(location, v);\n  };\n}\n\nfunction uintArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1uiv(location, v);\n  };\n}\n\nfunction uintVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2uiv(location, v);\n  };\n}\n\nfunction uintVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3uiv(location, v);\n  };\n}\n\nfunction uintVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4uiv(location, v);\n  };\n}\n\nfunction floatMat2Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2fv(location, false, v);\n  };\n}\n\nfunction floatMat3Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3fv(location, false, v);\n  };\n}\n\nfunction floatMat4Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4fv(location, false, v);\n  };\n}\n\nfunction floatMat23Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x3fv(location, false, v);\n  };\n}\n\nfunction floatMat32Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x2fv(location, false, v);\n  };\n}\n\nfunction floatMat24Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x4fv(location, false, v);\n  };\n}\n\nfunction floatMat42Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x2fv(location, false, v);\n  };\n}\n\nfunction floatMat34Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x4fv(location, false, v);\n  };\n}\n\nfunction floatMat43Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x3fv(location, false, v);\n  };\n}\n\nfunction samplerSetter(gl, type, unit, location) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  return isWebGL2(gl) ? function(textureOrPair) {\n    let texture;\n    let sampler;\n    if (isTexture(gl, textureOrPair)) {\n      texture = textureOrPair;\n      sampler = null;\n    } else {\n      texture = textureOrPair.texture;\n      sampler = textureOrPair.sampler;\n    }\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n    gl.bindSampler(unit, sampler);\n  } : function(texture) {\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n  };\n}\n\nfunction samplerArraySetter(gl, type, unit, location, size) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  const units = new Int32Array(size);\n  for (let ii = 0; ii < size; ++ii) {\n    units[ii] = unit + ii;\n  }\n\n  return isWebGL2(gl) ? function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(textureOrPair, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      let texture;\n      let sampler;\n      if (isTexture(gl, textureOrPair)) {\n        texture = textureOrPair;\n        sampler = null;\n      } else {\n        texture = textureOrPair.texture;\n        sampler = textureOrPair.sampler;\n      }\n      gl.bindSampler(unit, sampler);\n      gl.bindTexture(bindPoint, texture);\n    });\n  } : function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(texture, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      gl.bindTexture(bindPoint, texture);\n    });\n  };\n}\n\ntypeMap[FLOAT$3]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };\ntypeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  cols: 2, };\ntypeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  cols: 3, };\ntypeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  cols: 4, };\ntypeMap[INT$3]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[UNSIGNED_INT$3]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };\ntypeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   cols: 2, };\ntypeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   cols: 3, };\ntypeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   cols: 4, };\ntypeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 32, setter: floatMat2Setter,  rows: 2, cols: 2, };\ntypeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 48, setter: floatMat3Setter,  rows: 3, cols: 3, };\ntypeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  rows: 4, cols: 4, };\ntypeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 32, setter: floatMat23Setter, rows: 2, cols: 3, };\ntypeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, rows: 2, cols: 4, };\ntypeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 48, setter: floatMat32Setter, rows: 3, cols: 2, };\ntypeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, rows: 3, cols: 4, };\ntypeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 64, setter: floatMat42Setter, rows: 4, cols: 2, };\ntypeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 64, setter: floatMat43Setter, rows: 4, cols: 3, };\ntypeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\n\nfunction floatAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      switch (b.value.length) {\n        case 4:\n          gl.vertexAttrib4fv(index, b.value);\n          break;\n        case 3:\n          gl.vertexAttrib3fv(index, b.value);\n          break;\n        case 2:\n          gl.vertexAttrib2fv(index, b.value);\n          break;\n        case 1:\n          gl.vertexAttrib1fv(index, b.value);\n          break;\n        default:\n          throw new Error('the length of a float constant value must be between 1 and 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribPointer(\n          index, b.numComponents || b.size, b.type || FLOAT$3, b.normalize || false, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction intAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4iv(index, b.value);\n      } else {\n        throw new Error('The length of an integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || INT$3, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction uintAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4uiv(index, b.value);\n      } else {\n        throw new Error('The length of an unsigned integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || UNSIGNED_INT$3, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction matAttribSetter(gl, index, typeInfo) {\n  const defaultSize = typeInfo.size;\n  const count = typeInfo.count;\n\n  return function(b) {\n    gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n    const numComponents = b.size || b.numComponents || defaultSize;\n    const size = numComponents / count;\n    const type = b.type || FLOAT$3;\n    const typeInfo = typeMap[type];\n    const stride = typeInfo.size * numComponents;\n    const normalize = b.normalize || false;\n    const offset = b.offset || 0;\n    const rowOffset = stride / count;\n    for (let i = 0; i < count; ++i) {\n      gl.enableVertexAttribArray(index + i);\n      gl.vertexAttribPointer(\n          index + i, size, type, normalize, stride, offset + rowOffset * i);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index + i, b.divisor);\n      }\n    }\n  };\n}\n\n\n\nconst attrTypeMap = {};\nattrTypeMap[FLOAT$3]             = { size:  4, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC2]        = { size:  8, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC3]        = { size: 12, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC4]        = { size: 16, setter: floatAttribSetter, };\nattrTypeMap[INT$3]               = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC2]          = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC3]          = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC4]          = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[UNSIGNED_INT$3]      = { size:  4, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC2] = { size:  8, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: uintAttribSetter,  };\nattrTypeMap[BOOL]              = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC2]         = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC3]         = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC4]         = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[FLOAT_MAT2]        = { size:  4, setter: matAttribSetter,   count: 2, };\nattrTypeMap[FLOAT_MAT3]        = { size:  9, setter: matAttribSetter,   count: 3, };\nattrTypeMap[FLOAT_MAT4]        = { size: 16, setter: matAttribSetter,   count: 4, };\n\nconst errorRE = /ERROR:\\s*\\d+:(\\d+)/gi;\nfunction addLineNumbersWithError(src, log = '', lineOffset = 0) {\n  // Note: Error message formats are not defined by any spec so this may or may not work.\n  const matches = [...log.matchAll(errorRE)];\n  const lineNoToErrorMap = new Map(matches.map((m, ndx) => {\n    const lineNo = parseInt(m[1]);\n    const next = matches[ndx + 1];\n    const end = next ? next.index : log.length;\n    const msg = log.substring(m.index, end);\n    return [lineNo - 1, msg];\n  }));\n  return src.split('\\n').map((line, lineNo) => {\n    const err = lineNoToErrorMap.get(lineNo);\n    return `${lineNo + 1 + lineOffset}: ${line}${err ? `\\n\\n^^^ ${err}` : ''}`;\n  }).join('\\n');\n}\n\n/**\n * Error Callback\n * @callback ErrorCallback\n * @param {string} msg error message.\n * @param {number} [lineOffset] amount to add to line number\n * @memberOf module:twgl\n */\n\n/**\n * Program Callback\n * @callback ProgramCallback\n * @param {string} [err] error message, falsy if no error\n * @param {WebGLProgram|module:twgl.ProgramInfo} [result] the program or programInfo\n */\n\nconst spaceRE = /^[ \\t]*\\n/;\n\n/**\n * Remove the first end of line because WebGL 2.0 requires\n * #version 300 es\n * as the first line. No whitespace allowed before that line\n * so\n *\n * <script>\n * #version 300 es\n * </script>\n *\n * Has one line before it which is invalid according to GLSL ES 3.00\n *\n * @param {string} shaderSource The source of the shader\n * @returns {{shaderSource: string, lineOffset: number}}\n * @private\n */\nfunction prepShaderSource(shaderSource) {\n  let lineOffset = 0;\n  if (spaceRE.test(shaderSource)) {\n    lineOffset = 1;\n    shaderSource = shaderSource.replace(spaceRE, '');\n  }\n  return {lineOffset, shaderSource};\n}\n\n/**\n * @param {module:twgl.ProgramOptions} progOptions\n * @param {string} msg\n * @return null\n * @private\n */\nfunction reportError(progOptions, msg) {\n  progOptions.errorCallback(msg);\n  if (progOptions.callback) {\n    setTimeout(() => {\n      progOptions.callback(`${msg}\\n${progOptions.errors.join('\\n')}`);\n    });\n  }\n  return null;\n}\n\n/**\n * Loads a shader.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} shaderSource The shader source.\n * @param {number} shaderType The type of shader.\n * @param {module:twgl.ProgramOptions} progOptions\n * @return {WebGLShader} The created shader.\n * @private\n */\nfunction loadShader(gl, shaderSource, shaderType, progOptions) {\n  // Create the shader object\n  const shader = gl.createShader(shaderType);\n\n  // Load the shader source\n  gl.shaderSource(shader, prepShaderSource(shaderSource).shaderSource);\n\n  // Compile the shader\n  gl.compileShader(shader);\n\n  if (!progOptions.callback && !checkShaderStatus(gl, shaderType, shader, progOptions.errorCallback)) {\n    gl.deleteShader(shader);\n    return null;\n  }\n\n  return shader;\n}\n\n/**\n * Check Shader status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {number} shaderType The shader type\n * @param {WebGLShader} shader The shader\n * @param {ErrorCallback} [errFn] function to receive error message.\n * @return {bool} true if shader is ok.\n * @private\n */\nfunction checkShaderStatus(gl, shaderType, shader, errFn) {\n  errFn = errFn || error$1;\n  // Check the compile status\n  const compiled = gl.getShaderParameter(shader, COMPILE_STATUS);\n  if (!compiled) {\n    // Something went wrong during compilation; get the error\n    const lastError = gl.getShaderInfoLog(shader);\n    const {lineOffset, shaderSource} = prepShaderSource(gl.getShaderSource(shader));\n    errFn(`${addLineNumbersWithError(shaderSource, lastError, lineOffset)}\\nError compiling ${glEnumToString(gl, shaderType)}: ${lastError}`);\n  }\n  return compiled;\n}\n\n/**\n * @typedef {Object} ProgramOptions\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>} [attribLocations] a attribute name to location map\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @property {ProgramCallback} [callback] callback for async program compilation.\n * @memberOf module:twgl\n */\n\n/**\n * Gets the program options based on all these optional arguments\n * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in\n * @private\n */\nfunction getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n  let transformFeedbackVaryings;\n  let transformFeedbackMode;\n  let callback;\n  if (typeof opt_locations === 'function') {\n    opt_errorCallback = opt_locations;\n    opt_locations = undefined;\n  }\n  if (typeof opt_attribs === 'function') {\n    opt_errorCallback = opt_attribs;\n    opt_attribs = undefined;\n  } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n    // If we have an errorCallback we can just return this object\n    // Otherwise we need to construct one with default errorCallback\n    if (opt_attribs.errorCallback && opt_attribs.errors) {\n      return opt_attribs;\n    }\n    const opt = opt_attribs;\n    opt_errorCallback = opt.errorCallback;\n    opt_attribs = opt.attribLocations;\n    transformFeedbackVaryings = opt.transformFeedbackVaryings;\n    transformFeedbackMode = opt.transformFeedbackMode;\n    callback = opt.callback;\n  }\n\n  const errorCallback = opt_errorCallback || error$1;\n  const errors = [];\n  const options = {\n    errorCallback(msg, ...args) {\n      errors.push(msg);\n      errorCallback(msg, ...args);\n    },\n    transformFeedbackVaryings,\n    transformFeedbackMode,\n    callback,\n    errors,\n  };\n\n  if (opt_attribs) {\n    let attribLocations = {};\n    if (Array.isArray(opt_attribs)) {\n      opt_attribs.forEach(function(attrib,  ndx) {\n        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n      });\n    } else {\n      attribLocations = opt_attribs;\n    }\n    options.attribLocations = attribLocations;\n  }\n\n  return options;\n}\n\nconst defaultShaderType = [\n  \"VERTEX_SHADER\",\n  \"FRAGMENT_SHADER\",\n];\n\nfunction getShaderTypeFromScriptType(gl, scriptType) {\n  if (scriptType.indexOf(\"frag\") >= 0) {\n    return FRAGMENT_SHADER;\n  } else if (scriptType.indexOf(\"vert\") >= 0) {\n    return VERTEX_SHADER;\n  }\n  return undefined;\n}\n\nfunction deleteShaders(gl, shaders) {\n  shaders.forEach(function(shader) {\n    gl.deleteShader(shader);\n  });\n}\n\nconst wait = (ms = 0) => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n * program.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgram(gl, [vs, fs], options);\n *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error of a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgram(\n    gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n  // This code is really convoluted, because it may or may not be async\n  // Maybe it would be better to have a separate function\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const realShaders = [];\n  const newShaders = [];\n  for (let ndx = 0; ndx < shaders.length; ++ndx) {\n    let shader = shaders[ndx];\n    if (typeof (shader) === 'string') {\n      const elem = getElementById(shader);\n      const src = elem ? elem.text : shader;\n      let type = gl[defaultShaderType[ndx]];\n      if (elem && elem.type) {\n        type = getShaderTypeFromScriptType(gl, elem.type) || type;\n      }\n      shader = loadShader(gl, src, type, progOptions);\n      newShaders.push(shader);\n    }\n    if (isShader(gl, shader)) {\n      realShaders.push(shader);\n    }\n  }\n\n  if (realShaders.length !== shaders.length) {\n    deleteShaders(gl, newShaders);\n    return reportError(progOptions, \"not enough shaders for program\");\n  }\n\n  const program = gl.createProgram();\n  realShaders.forEach(function(shader) {\n    gl.attachShader(program, shader);\n  });\n  if (progOptions.attribLocations) {\n    Object.keys(progOptions.attribLocations).forEach(function(attrib) {\n      gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);\n    });\n  }\n  let varyings = progOptions.transformFeedbackVaryings;\n  if (varyings) {\n    if (varyings.attribs) {\n      varyings = varyings.attribs;\n    }\n    if (!Array.isArray(varyings)) {\n      varyings = Object.keys(varyings);\n    }\n    gl.transformFeedbackVaryings(program, varyings, progOptions.transformFeedbackMode || SEPARATE_ATTRIBS);\n  }\n\n  gl.linkProgram(program);\n  if (progOptions.callback) {\n    checkForProgramLinkCompletionAsync(gl, program, progOptions);\n    return null;\n  } else {\n    if (!checkProgramStatus(gl, program, progOptions.errorCallback)) {\n      gl.deleteProgram(program);\n      deleteShaders(gl, newShaders);\n      return null;\n    }\n    return program;\n  }\n}\n\n/**\n * Same as createProgram but returns a promise\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramAsync(gl, [vs, fs], options);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<WebGLProgram>} The created program\n * @memberOf module:twgl/programs\n */\nfunction createProgramAsync(gl, shaders, ...args) {\n  return new Promise((resolve, reject) => {\n    const programOptions = getProgramOptions(...args);\n    programOptions.callback = (err, program) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(program);\n      }\n    };\n    createProgram(gl, shaders, programOptions);\n  });\n}\n\n/**\n * Same as createProgramInfo but returns a promise\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<module:twgl.ProgramInfo>} The created ProgramInfo\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfoAsync(gl, shaders, ...args) {\n  return new Promise((resolve, reject) => {\n    const programOptions = getProgramOptions(...args);\n    programOptions.callback = (err, programInfo) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(programInfo);\n      }\n    };\n    createProgramInfo(gl, shaders, programOptions);\n  });\n}\n\n\n/**\n * Asynchronously wait for program to link.\n * Note: if 'KHR_parallel_shader_compile' extension does not\n * exist then compilation will not be truly async.\n * @param {WebGLRenderingContext} gl The context\n * @param {WebGLProgram} program The program\n * @param {module:twgl.ProgramOptions} progOptions Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @private\n */\nasync function checkForProgramLinkCompletionAsync(gl, program, progOptions) {\n  const ext = gl.getExtension('KHR_parallel_shader_compile');\n  const checkFn = ext\n      ? (gl, program) => gl.getProgramParameter(program, ext.COMPLETION_STATUS_KHR)\n      : () => true;\n\n  let waitTime = 0;\n  do {\n    await wait(waitTime);  // must wait at least once\n    waitTime = 1000 / 60;\n  } while (!checkFn(gl, program));\n\n  const success = checkProgramStatus(gl, program, progOptions.errorCallback);\n  const err = success ? undefined : progOptions.errors.join('\\n');\n  if (!success) {\n    const errFn = progOptions.errorCallback || error$1;\n    errFn(err);\n    gl.deleteProgram(program);\n    // TODO: delete shaders, but only shaders that were created newly for this\n    // program\n    program = null;\n  }\n  progOptions.callback(err, program);\n}\n\n/**\n * Check a program's link status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program Program to check\n * @param {ErrorCallback} [errFn] func for errors\n * @return {bool} true if program is ok\n * @private\n */\nfunction checkProgramStatus(gl, program, errFn) {\n  errFn = errFn || error$1;\n  // Check the link status\n  const linked = gl.getProgramParameter(program, LINK_STATUS);\n  if (!linked) {\n    // something went wrong with the link\n    const lastError = gl.getProgramInfoLog(program);\n    errFn(`Error in program linking: ${lastError}`);\n  }\n  return linked;\n}\n\n/**\n * Loads a shader from a script tag.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} scriptId The id of the script tag.\n * @param {number} [opt_shaderType] The type of shader. If not passed in it will\n *     be derived from the type of the script tag.\n * @param {module:twgl.ProgramOptions} [progOptions] callback for errors.\n * @return {WebGLShader?} The created shader or null if error.\n * @private\n */\nfunction createShaderFromScript(\n    gl, scriptId, opt_shaderType, progOptions) {\n  let shaderSource = \"\";\n  const shaderScript = getElementById(scriptId);\n  if (!shaderScript) {\n    return reportError(progOptions, `unknown script element: ${scriptId}`);\n  }\n  shaderSource = shaderScript.text;\n\n  const shaderType = opt_shaderType || getShaderTypeFromScriptType(gl, shaderScript.type);\n  if (!shaderType) {\n    return reportError(progOptions, 'unknown shader type');\n  }\n\n  return loadShader(gl, shaderSource, shaderType, progOptions);\n}\n\n/**\n * Creates a program from 2 script tags.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderScriptIds Array of ids of the script\n *        tags for the shaders. The first is assumed to be the\n *        vertex shader, the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromScripts(\n    gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (let ii = 0; ii < shaderScriptIds.length; ++ii) {\n    const shader = createShaderFromScript(\n        gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], progOptions);\n    if (!shader) {\n      return null;\n    }\n    shaders.push(shader);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Creates a program from 2 sources.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromSources(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (let ii = 0; ii < shaderSources.length; ++ii) {\n    const shader = loadShader(gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions);\n    if (!progOptions.callback && !shader) {\n      return null;\n    }\n    shaders.push(shader);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Returns true if attribute/uniform is a reserved/built in\n *\n * It makes no sense to me why GL returns these because it's\n * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`\n * with names that start with `gl_` (and `webgl_` in WebGL)\n *\n * I can only assume they are there because they might count\n * when computing the number of uniforms/attributes used when you want to\n * know if you are near the limit. That doesn't really make sense\n * to me but the fact that these get returned are in the spec.\n *\n * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or\n *    `gl.getActiveAttrib`.\n * @return {bool} true if it's reserved\n * @private\n */\nfunction isBuiltIn(info) {\n  const name = info.name;\n  return name.startsWith(\"gl_\") || name.startsWith(\"webgl_\");\n}\n\nconst tokenRE = /(\\.|\\[|]|\\w+)/g;\nconst isDigit = s => s >= '0' && s <= '9';\nfunction addSetterToUniformTree(fullPath, setter, node, uniformSetters) {\n  const tokens = fullPath.split(tokenRE).filter(s => s !== '');\n  let tokenNdx = 0;\n  let path = '';\n\n  for (;;) {\n    const token = tokens[tokenNdx++];  // has to be name or number\n    path += token;\n    const isArrayIndex = isDigit(token[0]);\n    const accessor = isArrayIndex\n        ? parseInt(token)\n        : token;\n    if (isArrayIndex) {\n      path += tokens[tokenNdx++];  // skip ']'\n    }\n    const isLastToken = tokenNdx === tokens.length;\n    if (isLastToken) {\n      node[accessor] = setter;\n      break;\n    } else {\n      const token = tokens[tokenNdx++];  // has to be . or [\n      const isArray = token === '[';\n      const child = node[accessor] || (isArray ? [] : {});\n      node[accessor] = child;\n      node = child;\n      uniformSetters[path] = uniformSetters[path] || function(node) {\n        return function(value) {\n          setUniformTree(node, value);\n        };\n      }(child);\n      path += token;\n    }\n  }\n}\n\n/**\n * Creates setter functions for all uniforms of a shader\n * program.\n *\n * @see {@link module:twgl.setUniforms}\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\n * @memberOf module:twgl/programs\n */\nfunction createUniformSetters(gl, program) {\n  let textureUnit = 0;\n\n  /**\n   * Creates a setter for a uniform of the given program with it's\n   * location embedded in the setter.\n   * @param {WebGLProgram} program\n   * @param {WebGLUniformInfo} uniformInfo\n   * @returns {function} the created setter.\n   */\n  function createUniformSetter(program, uniformInfo, location) {\n    const isArray = uniformInfo.name.endsWith(\"[0]\");\n    const type = uniformInfo.type;\n    const typeInfo = typeMap[type];\n    if (!typeInfo) {\n      throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.\n    }\n    let setter;\n    if (typeInfo.bindPoint) {\n      // it's a sampler\n      const unit = textureUnit;\n      textureUnit += uniformInfo.size;\n      if (isArray) {\n        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n      } else {\n        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n      }\n    } else {\n      if (typeInfo.arraySetter && isArray) {\n        setter = typeInfo.arraySetter(gl, location);\n      } else {\n        setter = typeInfo.setter(gl, location);\n      }\n    }\n    setter.location = location;\n    return setter;\n  }\n\n  const uniformSetters = {};\n  const uniformTree = {};\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    if (isBuiltIn(uniformInfo)) {\n      continue;\n    }\n    let name = uniformInfo.name;\n    // remove the array suffix.\n    if (name.endsWith(\"[0]\")) {\n      name = name.substr(0, name.length - 3);\n    }\n    const location = gl.getUniformLocation(program, uniformInfo.name);\n    // the uniform will have no location if it's in a uniform block\n    if (location) {\n      const setter = createUniformSetter(program, uniformInfo, location);\n      uniformSetters[name] = setter;\n      addSetterToUniformTree(name, setter, uniformTree, uniformSetters);\n    }\n  }\n\n  return uniformSetters;\n}\n\n/**\n * @typedef {Object} TransformFeedbackInfo\n * @property {number} index index of transform feedback\n * @property {number} type GL type\n * @property {number} size 1 - 4\n * @memberOf module:twgl\n */\n\n/**\n * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n * @memberOf module:twgl\n */\nfunction createTransformFeedbackInfo(gl, program) {\n  const info = {};\n  const numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);\n  for (let ii = 0; ii < numVaryings; ++ii) {\n    const varying = gl.getTransformFeedbackVarying(program, ii);\n    info[varying.name] = {\n      index: ii,\n      type: varying.type,\n      size: varying.size,\n    };\n  }\n  return info;\n}\n\n/**\n * Binds buffers for transform feedback.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @memberOf module:twgl\n */\nfunction bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n  if (transformFeedbackInfo.transformFeedbackInfo) {\n    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n  }\n  if (bufferInfo.attribs) {\n    bufferInfo = bufferInfo.attribs;\n  }\n  for (const name in bufferInfo) {\n    const varying = transformFeedbackInfo[name];\n    if (varying) {\n      const buf = bufferInfo[name];\n      if (buf.offset) {\n        gl.bindBufferRange(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n      } else {\n        gl.bindBufferBase(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n      }\n    }\n  }\n}\n\n/**\n * Creates a transform feedback and sets the buffers\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @return {WebGLTransformFeedback} the created transform feedback\n * @memberOf module:twgl\n */\nfunction createTransformFeedback(gl, programInfo, bufferInfo) {\n  const tf = gl.createTransformFeedback();\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);\n  gl.useProgram(programInfo.program);\n  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, null);\n  return tf;\n}\n\n/**\n * @typedef {Object} UniformData\n * @property {string} name The name of the uniform\n * @property {number} type The WebGL type enum for this uniform\n * @property {number} size The number of elements for this uniform\n * @property {number} blockNdx The block index this uniform appears in\n * @property {number} offset The byte offset in the block for this uniform's value\n * @memberOf module:twgl\n */\n\n/**\n * The specification for one UniformBlockObject\n *\n * @typedef {Object} BlockSpec\n * @property {number} index The index of the block.\n * @property {number} size The size in bytes needed for the block\n * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n * @property {bool} usedByVertexShader Self explanatory\n * @property {bool} usedByFragmentShader Self explanatory\n * @property {bool} used Self explanatory\n * @memberOf module:twgl\n */\n\n/**\n * A `UniformBlockSpec` represents the data needed to create and bind\n * UniformBlockObjects for a given program\n *\n * @typedef {Object} UniformBlockSpec\n * @property {Object.<string, module:twgl.BlockSpec>} blockSpecs The BlockSpec for each block by block name\n * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a UniformBlockSpec for the given program.\n *\n * A UniformBlockSpec represents the data needed to create and bind\n * UniformBlockObjects\n *\n * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockSpecFromProgram(gl, program) {\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n  const uniformData = [];\n  const uniformIndices = [];\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    uniformIndices.push(ii);\n    uniformData.push({});\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    uniformData[ii].name = uniformInfo.name;\n  }\n\n  [\n    [ \"UNIFORM_TYPE\", \"type\" ],\n    [ \"UNIFORM_SIZE\", \"size\" ],  // num elements\n    [ \"UNIFORM_BLOCK_INDEX\", \"blockNdx\" ],\n    [ \"UNIFORM_OFFSET\", \"offset\", ],\n  ].forEach(function(pair) {\n    const pname = pair[0];\n    const key = pair[1];\n    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {\n      uniformData[ndx][key] = value;\n    });\n  });\n\n  const blockSpecs = {};\n\n  const numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);\n  for (let ii = 0; ii < numUniformBlocks; ++ii) {\n    const name = gl.getActiveUniformBlockName(program, ii);\n    const blockSpec = {\n      index: gl.getUniformBlockIndex(program, name),\n      usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n      size: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_DATA_SIZE),\n      uniformIndices: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),\n    };\n    blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;\n    blockSpecs[name] = blockSpec;\n  }\n\n  return {\n    blockSpecs: blockSpecs,\n    uniformData: uniformData,\n  };\n}\n\nconst arraySuffixRE = /\\[\\d+\\]\\.$/;  // better way to check?\n\nconst pad = (v, padding) => ((v + (padding - 1)) / padding | 0) * padding;\n\nfunction createUniformBlockUniformSetter(view, isArray, rows, cols) {\n  if (isArray || rows) {\n    cols = cols || 1;\n    const numElements = view.length;\n    const totalRows = numElements / 4;\n    return function(value) {\n      let dst = 0;\n      let src = 0;\n      for (let row = 0; row < totalRows; ++row) {\n        for (let col = 0; col < cols; ++col) {\n          view[dst++] = value[src++];\n        }\n        dst += 4 - cols;\n      }\n    };\n  } else {\n    return function(value) {\n      if (value.length) {\n        view.set(value);\n      } else {\n        view[0] = value;\n      }\n    };\n  }\n}\n\n/**\n * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n * and a corresponding WebGLBuffer to hold those values on the GPU\n *\n * @typedef {Object} UniformBlockInfo\n * @property {string} name The name of the block\n * @property {ArrayBuffer} array The array buffer that contains the uniform values\n * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n *    inspecting the contents of the buffer in the debugger.\n * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n * @property {number} [offset] offset into buffer\n * @property {Object<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n *   `Int32Array` view, etc.\n * @property {Object<string, function>} setters A setter for this uniform.\n *   The reason to use setters is elements of arrays are padded to vec4 sizes which\n *   means if you want to set an array of 4 floats you'd need to set 16 values\n *   (or set elements 0, 4, 8, 12). In other words\n *   `someBlockInfo.uniforms.some4FloatArrayUniform.set([0, , , , 1, , , , 2, , , , 3])`\n *   where as the setter handles just passing in [0, 1, 2, 3] either directly as in\n *   `someBlockInfo.setter.some4FloatArrayUniform.set([0, 1, 2, 3])` (not recommended)\n *   or via {@link module:twgl.setBlockUniforms}\n * @memberOf module:twgl\n */\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {WebGLProgram} program A WebGLProgram\n * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned\n *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\n  const blockSpecs = uniformBlockSpec.blockSpecs;\n  const uniformData = uniformBlockSpec.uniformData;\n  const blockSpec = blockSpecs[blockName];\n  if (!blockSpec) {\n    warn$1(\"no uniform block object named:\", blockName);\n    return {\n      name: blockName,\n      uniforms: {},\n    };\n  }\n  const array = new ArrayBuffer(blockSpec.size);\n  const buffer = gl.createBuffer();\n  const uniformBufferIndex = blockSpec.index;\n  gl.bindBuffer(UNIFORM_BUFFER, buffer);\n  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n\n  let prefix = blockName + \".\";\n  if (arraySuffixRE.test(prefix)) {\n    prefix = prefix.replace(arraySuffixRE, \".\");\n  }\n  const uniforms = {};\n  const setters = {};\n  const setterTree = {};\n  blockSpec.uniformIndices.forEach(function(uniformNdx) {\n    const data = uniformData[uniformNdx];\n    let name = data.name;\n    if (name.startsWith(prefix)) {\n      name = name.substr(prefix.length);\n    }\n    const isArray = name.endsWith('[0]');\n    if (isArray) {\n      name = name.substr(0, name.length - 3);\n    }\n    const typeInfo = typeMap[data.type];\n    const Type = typeInfo.Type;\n    const byteLength = isArray\n        ? pad(typeInfo.size, 16) * data.size\n        : typeInfo.size * data.size;\n    const uniformView = new Type(array, data.offset, byteLength / Type.BYTES_PER_ELEMENT);\n    uniforms[name] = uniformView;\n    // Note: I'm not sure what to do here. The original\n    // idea was to create TypedArray views into each part\n    // of the block. This is useful, for example if you have\n    // a block with { mat4: model; mat4 view; mat4 projection; }\n    // you'll get a Float32Array for each one suitable for\n    // passing to most JS math libraries including twgl's and glMatrix.js.\n    //\n    // But, if you have a an array of structures, especially if that\n    // array is large, you get a whole bunch of TypedArray views.\n    // Every one of them has overhead and switching between them all\n    // is probably a cache miss. In that case it would really be better\n    // to just have one view (asFloat) and have all the setters\n    // just reference the correct portion. But, then you can't easily\n    // treat a matrix, or a vec4, as a standalone thing like you can\n    // with all the views.\n    //\n    // Another problem with the views is they are not shared. With\n    // uniforms you have one set of setters. With UniformBlockInfo\n    // you have a set of setters *pre block instance*. That's because\n    // TypedArray views can't be mapped to different buffers.\n    //\n    // My gut right now is if you really want the speed and compactness\n    // then you should probably roll your own solution. TWGL's goal\n    // here is ease of use as AFAICT there is no simple generic efficient\n    // solution.\n    const setter = createUniformBlockUniformSetter(uniformView, isArray, typeInfo.rows, typeInfo.cols);\n    setters[name] = setter;\n    addSetterToUniformTree(name, setter, setterTree, setters);\n  });\n  return {\n    name: blockName,\n    array,\n    asFloat: new Float32Array(array),  // for debugging\n    buffer,\n    uniforms,\n    setters,\n  };\n}\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo}\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfo(gl, programInfo, blockName) {\n  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n}\n\n/**\n * Binds a uniform block to the matching uniform block point.\n * Matches by blocks by name so blocks must have the same name not just the same\n * structure.\n *\n * If you have changed any values and you upload the values into the corresponding WebGLBuffer\n * call {@link module:twgl.setUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n *     no buffer is bound.\n * @memberOf module:twgl/programs\n */\nfunction bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n  const uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n  const blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n  if (blockSpec) {\n    const bufferBindIndex = blockSpec.index;\n    gl.bindBufferRange(UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Uploads the current uniform values to the corresponding WebGLBuffer\n * and binds that buffer to the program's corresponding bind point for the uniform block object.\n *\n * If you haven't changed any values and you only need to bind the uniform block object\n * call {@link module:twgl.bindUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @memberOf module:twgl/programs\n */\nfunction setUniformBlock(gl, programInfo, uniformBlockInfo) {\n  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n    gl.bufferData(UNIFORM_BUFFER, uniformBlockInfo.array, DYNAMIC_DRAW);\n  }\n}\n\n/**\n * Sets values of a uniform block object\n *\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n *    type of uniform. So for example given a block like\n *\n *       uniform SomeBlock {\n *         float someFloat;\n *         vec2 someVec2;\n *         vec3 someVec3Array[2];\n *         int someInt;\n *       }\n *\n *  You can set the values of the uniform block with\n *\n *       twgl.setBlockUniforms(someBlockInfo, {\n *          someFloat: 12.3,\n *          someVec2: [1, 2],\n *          someVec3Array: [1, 2, 3, 4, 5, 6],\n *          someInt: 5,\n *       }\n *\n *  Arrays can be JavaScript arrays or typed arrays\n *\n *  You can also fill out structure and array values either via\n *  shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Lights {\n *       Light lights[2];\n *     };\n *\n *     // in JavaScript\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices.\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n *  **IMPORTANT!**, packing in a UniformBlock is unintuitive.\n *  For example the actual layout of `someVec3Array` above in memory\n *  is `1, 2, 3, unused, 4, 5, 6, unused`. twgl takes in 6 values\n *  as shown about and copies them, skipping the padding. This might\n *  be confusing if you're already familiar with Uniform blocks.\n *\n *  If you want to deal with the padding yourself you can access the array\n *  buffer views directly. eg:\n *\n *      someBlockInfo.someVec3Array.set([1, 2, 3, 0, 4, 5, 6, 0]);\n *\n *  Any name that doesn't match will be ignored\n * @memberOf module:twgl/programs\n */\nfunction setBlockUniforms(uniformBlockInfo, values) {\n  const setters = uniformBlockInfo.setters;\n  for (const name in values) {\n    const setter = setters[name];\n    if (setter) {\n      const value = values[name];\n      setter(value);\n    }\n  }\n}\n\nfunction setUniformTree(tree, values) {\n  for (const name in values) {\n    const prop = tree[name];\n    if (typeof prop === 'function') {\n      prop(values[name]);\n    } else {\n      setUniformTree(tree[name], values[name]);\n    }\n  }\n}\n\n/**\n * Set uniforms and binds related textures.\n *\n * example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     const tex1 = gl.createTexture();\n *     const tex2 = gl.createTexture();\n *\n *     ... assume we setup the textures with data ...\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the textures AND set the\n * uniforms.\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *\n * For the example above it is equivalent to\n *\n *     var texUnit = 0;\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ]);\n *\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *     };\n *\n *     const moreUniforms {\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *     twgl.setUniforms(programInfo, moreUniforms);\n *\n * You can also add WebGLSamplers to uniform samplers as in\n *\n *     const uniforms = {\n *       u_someSampler: {\n *         texture: someWebGLTexture,\n *         sampler: someWebGLSampler,\n *       },\n *     };\n *\n * In which case both the sampler and texture will be bound to the\n * same unit.\n *\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n *        uniforms.\n *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n *\n *     const sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     const localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, sharedUniforms);\n *     twgl.setUniforms(programInfo, localUniforms};\n *\n *   You can also fill out structure and array values either via\n *   shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Light lights[2];\n *\n *     // in JavaScript\n *\n *     twgl.setUniforms(programInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setUniforms(programInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n * @memberOf module:twgl/programs\n */\nfunction setUniforms(setters, ...args) {  // eslint-disable-line\n  const actualSetters = setters.uniformSetters || setters;\n  const numArgs = args.length;\n  for (let aNdx = 0; aNdx < numArgs; ++aNdx) {\n    const values = args[aNdx];\n    if (Array.isArray(values)) {\n      const numValues = values.length;\n      for (let ii = 0; ii < numValues; ++ii) {\n        setUniforms(actualSetters, values[ii]);\n      }\n    } else {\n      for (const name in values) {\n        const setter = actualSetters[name];\n        if (setter) {\n          setter(values[name]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Alias for `setUniforms`\n * @function\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n * @memberOf module:twgl/programs\n */\nconst setUniformsAndBindTextures = setUniforms;\n\n/**\n * Creates setter functions for all attributes of a shader\n * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n *\n * @see {@link module:twgl.setAttributes} for example\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\n * @memberOf module:twgl/programs\n */\nfunction createAttributeSetters(gl, program) {\n  const attribSetters = {\n  };\n\n  const numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);\n  for (let ii = 0; ii < numAttribs; ++ii) {\n    const attribInfo = gl.getActiveAttrib(program, ii);\n    if (isBuiltIn(attribInfo)) {\n      continue;\n    }\n    const index = gl.getAttribLocation(program, attribInfo.name);\n    const typeInfo = attrTypeMap[attribInfo.type];\n    const setter = typeInfo.setter(gl, index, typeInfo);\n    setter.location = index;\n    attribSetters[attribInfo.name] = setter;\n  }\n\n  return attribSetters;\n}\n\n/**\n * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n *\n * Example:\n *\n *     const program = createProgramFromScripts(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const attribSetters = createAttributeSetters(program);\n *\n *     const positionBuffer = gl.createBuffer();\n *     const texcoordBuffer = gl.createBuffer();\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setAttributes(attribSetters, attribs);\n *\n * Properties of attribs. For each attrib you can add\n * properties:\n *\n * *   type: the type of data in the buffer. Default = gl.FLOAT\n * *   normalize: whether or not to normalize the data. Default = false\n * *   stride: the stride. Default = 0\n * *   offset: offset into the buffer. Default = 0\n * *   divisor: the divisor for instances. Default = undefined\n *\n * For example if you had 3 value float positions, 2 value\n * float texcoord and 4 value uint8 colors you'd setup your\n * attribs like this\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *       a_color: {\n *         buffer: colorBuffer,\n *         numComponents: 4,\n *         type: gl.UNSIGNED_BYTE,\n *         normalize: true,\n *       },\n *     };\n *\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n * @memberOf module:twgl/programs\n * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n * @private\n */\nfunction setAttributes(setters, buffers) {\n  for (const name in buffers) {\n    const setter = setters[name];\n    if (setter) {\n      setter(buffers[name]);\n    }\n  }\n}\n\n/**\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n *\n * Example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *     };\n *\n *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n *\n * For the example above it is equivalent to\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n *     gl.enableVertexAttribArray(a_positionLocation);\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n *     gl.enableVertexAttribArray(a_texcoordLocation);\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n * @memberOf module:twgl/programs\n */\nfunction setBuffersAndAttributes(gl, programInfo, buffers) {\n  if (buffers.vertexArrayObject) {\n    gl.bindVertexArray(buffers.vertexArrayObject);\n  } else {\n    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n    if (buffers.indices) {\n      gl.bindBuffer(ELEMENT_ARRAY_BUFFER$1, buffers.indices);\n    }\n  }\n}\n\n/**\n * @typedef {Object} ProgramInfo\n * @property {WebGLProgram} program A shader program\n * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n * @property {module:twgl.UniformBlockSpec} [uniformBlockSpec] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n * @memberOf module:twgl\n */\n\n/**\n * Creates a ProgramInfo from an existing program.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfoFromProgram(gl, program) {\n  const uniformSetters = createUniformSetters(gl, program);\n  const attribSetters = createAttributeSetters(gl, program);\n  const programInfo = {\n    program,\n    uniformSetters,\n    attribSetters,\n  };\n\n  if (isWebGL2(gl)) {\n    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\n  }\n\n  return programInfo;\n}\n\nconst notIdRE = /\\s|{|}|;/;\n\n/**\n * Creates a ProgramInfo from 2 sources.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramInfo(gl, [vs, fs], options);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfo(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const errors = [];\n  shaderSources = shaderSources.map(function(source) {\n    // Lets assume if there is no \\n it's an id\n    if (!notIdRE.test(source)) {\n      const script = getElementById(source);\n      if (!script) {\n        const err = `no element with id: ${source}`;\n        progOptions.errorCallback(err);\n        errors.push(err);\n      } else {\n        source = script.text;\n      }\n    }\n    return source;\n  });\n  if (errors.length) {\n    return reportError(progOptions, '');\n  }\n  const origCallback = progOptions.callback;\n  if (origCallback) {\n    progOptions.callback = (err, program) => {\n      let programInfo;\n      if (!err) {\n        programInfo = createProgramInfoFromProgram(gl, program);\n      }\n      origCallback(err, programInfo);\n    };\n  }\n  const program = createProgramFromSources(gl, shaderSources, progOptions);\n  if (!program) {\n    return null;\n  }\n  return createProgramInfoFromProgram(gl, program);\n}\n\nvar programs = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttributeSetters: createAttributeSetters,\n  createProgram: createProgram,\n  createProgramAsync: createProgramAsync,\n  createProgramFromScripts: createProgramFromScripts,\n  createProgramFromSources: createProgramFromSources,\n  createProgramInfo: createProgramInfo,\n  createProgramInfoAsync: createProgramInfoAsync,\n  createProgramInfoFromProgram: createProgramInfoFromProgram,\n  createUniformSetters: createUniformSetters,\n  createUniformBlockSpecFromProgram: createUniformBlockSpecFromProgram,\n  createUniformBlockInfoFromProgram: createUniformBlockInfoFromProgram,\n  createUniformBlockInfo: createUniformBlockInfo,\n  createTransformFeedback: createTransformFeedback,\n  createTransformFeedbackInfo: createTransformFeedbackInfo,\n  bindTransformFeedbackInfo: bindTransformFeedbackInfo,\n  setAttributes: setAttributes,\n  setBuffersAndAttributes: setBuffersAndAttributes,\n  setUniforms: setUniforms,\n  setUniformsAndBindTextures: setUniformsAndBindTextures,\n  setUniformBlock: setUniformBlock,\n  setBlockUniforms: setBlockUniforms,\n  bindUniformBlock: bindUniformBlock\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst TRIANGLES                      = 0x0004;\nconst UNSIGNED_SHORT$3                 = 0x1403;\n\n/**\n * Drawing related functions\n *\n * For backward compatibility they are available at both `twgl.draw` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/draw\n */\n\n/**\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n *\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n * but calling this means if you switch from indexed data to non-indexed\n * data you don't have to remember to update your draw call.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n * @param {number} [offset] An optional offset. Defaults to 0.\n * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called\n * @memberOf module:twgl/draw\n */\nfunction drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {\n  type = type === undefined ? TRIANGLES : type;\n  const indices = bufferInfo.indices;\n  const elementType = bufferInfo.elementType;\n  const numElements = count === undefined ? bufferInfo.numElements : count;\n  offset = offset === undefined ? 0 : offset;\n  if (elementType || indices) {\n    if (instanceCount !== undefined) {\n      gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset, instanceCount);\n    } else {\n      gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset);\n    }\n  } else {\n    if (instanceCount !== undefined) {\n      gl.drawArraysInstanced(type, offset, numElements, instanceCount);\n    } else {\n      gl.drawArrays(type, offset, numElements);\n    }\n  }\n}\n\n/**\n * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n *\n * You need either a `BufferInfo` or a `VertexArrayInfo`.\n *\n * @typedef {Object} DrawObject\n * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`\n * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @property {Object<string, ?>} uniforms The values for the uniforms.\n *   You can pass multiple objects by putting them in an array. For example\n *\n *     var sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     var localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     var drawObj = {\n *       ...\n *       uniforms: [sharedUniforms, localUniforms],\n *     };\n *\n * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.\n * @property {number} [instanceCount] the number of instances. Defaults to undefined.\n * @memberOf module:twgl\n */\n\n/**\n * Draws a list of objects\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n * @memberOf module:twgl/draw\n */\nfunction drawObjectList(gl, objectsToDraw) {\n  let lastUsedProgramInfo = null;\n  let lastUsedBufferInfo = null;\n\n  objectsToDraw.forEach(function(object) {\n    if (object.active === false) {\n      return;\n    }\n\n    const programInfo = object.programInfo;\n    const bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n    let bindBuffers = false;\n    const type = object.type === undefined ? TRIANGLES : object.type;\n\n    if (programInfo !== lastUsedProgramInfo) {\n      lastUsedProgramInfo = programInfo;\n      gl.useProgram(programInfo.program);\n\n      // We have to rebind buffers when changing programs because we\n      // only bind buffers the program uses. So if 2 programs use the same\n      // bufferInfo but the 1st one uses only positions the when the\n      // we switch to the 2nd one some of the attributes will not be on.\n      bindBuffers = true;\n    }\n\n    // Setup all the needed attributes.\n    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n        gl.bindVertexArray(null);\n      }\n      lastUsedBufferInfo = bufferInfo;\n      setBuffersAndAttributes(gl, programInfo, bufferInfo);\n    }\n\n    // Set the uniforms.\n    setUniforms(programInfo, object.uniforms);\n\n    // Draw\n    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);\n  });\n\n  if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {\n    gl.bindVertexArray(null);\n  }\n}\n\nvar draw = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  drawBufferInfo: drawBufferInfo,\n  drawObjectList: drawObjectList\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst FRAMEBUFFER                    = 0x8d40;\nconst RENDERBUFFER                   = 0x8d41;\nconst TEXTURE_2D$2                     = 0x0de1;\n\nconst UNSIGNED_BYTE$3                  = 0x1401;\n\n/* PixelFormat */\nconst DEPTH_COMPONENT$1                = 0x1902;\nconst RGBA$1                           = 0x1908;\nconst DEPTH_COMPONENT24$1              = 0x81a6;\nconst DEPTH_COMPONENT32F$1             = 0x8cac;\nconst DEPTH24_STENCIL8$1               = 0x88f0;\nconst DEPTH32F_STENCIL8$1              = 0x8cad;\n\n/* Framebuffer Object. */\nconst RGBA4$1                          = 0x8056;\nconst RGB5_A1$1                        = 0x8057;\nconst RGB565$1                         = 0x8D62;\nconst DEPTH_COMPONENT16$1              = 0x81A5;\nconst STENCIL_INDEX                  = 0x1901;\nconst STENCIL_INDEX8                 = 0x8D48;\nconst DEPTH_STENCIL$1                  = 0x84F9;\nconst COLOR_ATTACHMENT0              = 0x8CE0;\nconst DEPTH_ATTACHMENT               = 0x8D00;\nconst STENCIL_ATTACHMENT             = 0x8D20;\nconst DEPTH_STENCIL_ATTACHMENT       = 0x821A;\n\n/* TextureWrapMode */\nconst CLAMP_TO_EDGE$1                  = 0x812F;\n\n/* TextureMagFilter */\nconst LINEAR$1                         = 0x2601;\n\n/**\n * The options for a framebuffer attachment.\n *\n * Note: For a `format` that is a texture include all the texture\n * options from {@link module:twgl.TextureOptions} for example\n * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n *\n * @typedef {Object} AttachmentOptions\n * @property {number} [attachmentPoint] The attachment point. Defaults\n *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type\n *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n *   on the format or attachment type.\n * @property {number} [format] The format. If one of `gl.RGBA4`,\n *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n * @property {number} [samples] The number of samples. Default = 1\n * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.\n *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`\n * @property {(WebGLRenderbuffer | WebGLTexture)} [attachment] An existing renderbuffer or texture.\n *    If provided will attach this Object. This allows you to share\n *    attachments across framebuffers.\n * @memberOf module:twgl\n * @mixes module:twgl.TextureOptions\n */\n\nconst defaultAttachments = [\n  { format: RGBA$1, type: UNSIGNED_BYTE$3, min: LINEAR$1, wrap: CLAMP_TO_EDGE$1, },\n  { format: DEPTH_STENCIL$1, },\n];\n\nconst attachmentsByFormat = {};\nattachmentsByFormat[DEPTH_STENCIL$1] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT16$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT24$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT32F$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH24_STENCIL8$1] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH32F_STENCIL8$1] = DEPTH_STENCIL_ATTACHMENT;\n\nfunction getAttachmentPointForFormat(format, internalFormat) {\n  return attachmentsByFormat[format] || attachmentsByFormat[internalFormat];\n}\n\nconst renderbufferFormats = {};\nrenderbufferFormats[RGBA4$1] = true;\nrenderbufferFormats[RGB5_A1$1] = true;\nrenderbufferFormats[RGB565$1] = true;\nrenderbufferFormats[DEPTH_STENCIL$1] = true;\nrenderbufferFormats[DEPTH_COMPONENT16$1] = true;\nrenderbufferFormats[STENCIL_INDEX] = true;\nrenderbufferFormats[STENCIL_INDEX8] = true;\n\nfunction isRenderbufferFormat(format) {\n  return renderbufferFormats[format];\n}\n\nconst MAX_COLOR_ATTACHMENT_POINTS = 32;  // even an 3090 only supports 8 but WebGL/OpenGL ES define constants for 32\n\nfunction isColorAttachmentPoint(attachmentPoint) {\n  return attachmentPoint >= COLOR_ATTACHMENT0 && attachmentPoint < COLOR_ATTACHMENT0 + MAX_COLOR_ATTACHMENT_POINTS;\n}\n\n/**\n * @typedef {Object} FramebufferInfo\n * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n * @property {Array.<(WebGLRenderbuffer | WebGLTexture)>} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n * @property {number} width The width of the framebuffer and its attachments\n * @property {number} height The width of the framebuffer and its attachments\n * @memberOf module:twgl\n */\n\n/**\n * Creates a framebuffer and attachments.\n *\n * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n * It also leaves the framebuffer it just created as the currently bound `FRAMEBUFFER`.\n * Note: If this is WebGL2 or if you called {@link module:twgl.addExtensionsToContext} then it will set the drawBuffers\n * to `[COLOR_ATTACHMENT0, COLOR_ATTACHMENT1, ...]` for how ever many color attachments were created.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n * Passing in a specific size\n *\n *     const width = 256;\n *     const height = 256;\n *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n *\n * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n * @memberOf module:twgl/framebuffers\n */\nfunction createFramebufferInfo(gl, attachments, width, height) {\n  const target = FRAMEBUFFER;\n  const fb = gl.createFramebuffer();\n  gl.bindFramebuffer(target, fb);\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  attachments = attachments || defaultAttachments;\n  const usedColorAttachmentsPoints = [];\n  const framebufferInfo = {\n    framebuffer: fb,\n    attachments: [],\n    width: width,\n    height: height,\n  };\n\n  attachments.forEach(function(attachmentOptions, i) {\n    let attachment = attachmentOptions.attachment;\n    const samples = attachmentOptions.samples;\n    const format = attachmentOptions.format;\n    let attachmentPoint = attachmentOptions.attachmentPoint || getAttachmentPointForFormat(format, attachmentOptions.internalFormat);\n    if (!attachmentPoint) {\n      attachmentPoint = COLOR_ATTACHMENT0 + i;\n    }\n    if (isColorAttachmentPoint(attachmentPoint)) {\n      usedColorAttachmentsPoints.push(attachmentPoint);\n    }\n    if (!attachment) {\n      if (samples !== undefined || isRenderbufferFormat(format)) {\n        attachment = gl.createRenderbuffer();\n        gl.bindRenderbuffer(RENDERBUFFER, attachment);\n        if (samples > 1) {\n          gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\n        } else {\n          gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n        }\n      } else {\n        const textureOptions = Object.assign({}, attachmentOptions);\n        textureOptions.width = width;\n        textureOptions.height = height;\n        if (textureOptions.auto === undefined) {\n          textureOptions.auto = false;\n          textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR$1;\n          textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR$1;\n          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE$1;\n          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE$1;\n        }\n        attachment = createTexture(gl, textureOptions);\n      }\n    }\n    if (isRenderbuffer(gl, attachment)) {\n      gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);\n    } else if (isTexture(gl, attachment)) {\n      if (attachmentOptions.layer !== undefined) {\n        gl.framebufferTextureLayer(\n          target,\n          attachmentPoint,\n          attachment,\n          attachmentOptions.level || 0,\n          attachmentOptions.layer);\n      } else {\n        gl.framebufferTexture2D(\n            target,\n            attachmentPoint,\n            attachmentOptions.target || TEXTURE_2D$2,\n            attachment,\n            attachmentOptions.level || 0);\n      }\n    } else {\n      throw new Error('unknown attachment type');\n    }\n    framebufferInfo.attachments.push(attachment);\n  });\n  if (gl.drawBuffers) {\n    gl.drawBuffers(usedColorAttachmentsPoints);\n  }\n  return framebufferInfo;\n}\n\n/**\n * Resizes the attachments of a framebuffer.\n *\n * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n * because TWGL has no idea the format/type of each attachment.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments\n *         twgl.resizeFramebufferInfo(gl, fbi);\n *       }\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments to match\n *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n *       }\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @memberOf module:twgl/framebuffers\n */\nfunction resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  framebufferInfo.width = width;\n  framebufferInfo.height = height;\n  attachments = attachments || defaultAttachments;\n  attachments.forEach(function(attachmentOptions, ndx) {\n    const attachment = framebufferInfo.attachments[ndx];\n    const format = attachmentOptions.format;\n    const samples = attachmentOptions.samples;\n    if (samples !== undefined || isRenderbuffer(gl, attachment)) {\n      gl.bindRenderbuffer(RENDERBUFFER, attachment);\n      if (samples > 1) {\n        gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\n      } else {\n        gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n      }\n    } else if (isTexture(gl, attachment)) {\n      resizeTexture(gl, attachment, attachmentOptions, width, height);\n    } else {\n      throw new Error('unknown attachment type');\n    }\n  });\n}\n\n/**\n * Binds a framebuffer\n *\n * This function pretty much solely exists because I spent hours\n * trying to figure out why something I wrote wasn't working only\n * to realize I forget to set the viewport dimensions.\n * My hope is this function will fix that.\n *\n * It is effectively the same as\n *\n *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n *   If falsy will bind the canvas.\n * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n * @memberOf module:twgl/framebuffers\n */\n\nfunction bindFramebufferInfo(gl, framebufferInfo, target) {\n  target = target || FRAMEBUFFER;\n  if (framebufferInfo) {\n    gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n  } else {\n    gl.bindFramebuffer(target, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n}\n\nvar framebuffers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  bindFramebufferInfo: bindFramebufferInfo,\n  createFramebufferInfo: createFramebufferInfo,\n  resizeFramebufferInfo: resizeFramebufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * vertex array object related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/vertexArrays\n */\n\nconst ELEMENT_ARRAY_BUFFER$2           = 0x8893;\n\n/**\n * @typedef {Object} VertexArrayInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n * @memberOf module:twgl\n */\n\n/**\n * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n *   who's attributes use the same attribute locations for the same purposes.\n *\n * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n *\n * also\n *\n * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n *   will affect the Vertex Array Object state.\n *\n * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n *\n *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n *    now attribute D's location.\n *\n *    So, you can pass in both shader 1 and shader 2's programInfo\n *\n * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVertexArrayInfo(gl, programInfos, bufferInfo) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  if (!programInfos.length) {\n    programInfos = [programInfos];\n  }\n  programInfos.forEach(function(programInfo) {\n    setBuffersAndAttributes(gl, programInfo, bufferInfo);\n  });\n  gl.bindVertexArray(null);\n  return {\n    numElements: bufferInfo.numElements,\n    elementType: bufferInfo.elementType,\n    vertexArrayObject: vao,\n  };\n}\n\n/**\n * Creates a vertex array object and then sets the attributes on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOAndSetAttributes(gl, setters, attribs, indices) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  setAttributes(setters, attribs);\n  if (indices) {\n    gl.bindBuffer(ELEMENT_ARRAY_BUFFER$2, indices);\n  }\n  // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n  // like when creating buffers for other stuff will mess up this VAO's binding\n  gl.bindVertexArray(null);\n  return vao;\n}\n\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n}\n\nvar vertexArrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createVertexArrayInfo: createVertexArrayInfo,\n  createVAOAndSetAttributes: createVAOAndSetAttributes,\n  createVAOFromBufferInfo: createVAOFromBufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults$2 = {\n  addExtensionsToContext: true,\n};\n\n/**\n * Various default settings for twgl.\n *\n * Note: You can call this any number of times. Example:\n *\n *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n *     twgl.setDefaults({ attribPrefix: 'a_' });\n *\n * is equivalent to\n *\n *     twgl.setDefaults({\n *       textureColor: [1, 0, 0, 1],\n *       attribPrefix: 'a_',\n *     });\n *\n * @typedef {Object} Defaults\n * @property {string} [attribPrefix] The prefix to stick on attributes\n *\n *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n *   In other words I'll create arrays of geometry like this\n *\n *       const arrays = {\n *         position: ...\n *         normal: ...\n *         texcoord: ...\n *       };\n *\n *   But need those mapped to attributes and my attributes start with `a_`.\n *\n *   Default: `\"\"`\n *\n * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1\n *\n *   The default texture color is used when loading textures from\n *   urls. Because the URL will be loaded async we'd like to be\n *   able to use the texture immediately. By putting a 1x1 pixel\n *   color in the texture we can start using the texture before\n *   the URL has loaded.\n *\n *   Default: `[0.5, 0.75, 1, 1]`\n *\n * @property {string} [crossOrigin]\n *\n *   If not undefined sets the crossOrigin attribute on images\n *   that twgl creates when downloading images for textures.\n *\n *   Also see {@link module:twgl.TextureOptions}.\n *\n * @property {bool} [addExtensionsToContext]\n *\n *   If true, then, when twgl will try to add any supported WebGL extensions\n *   directly to the context under their normal GL names. For example\n *   if ANGLE_instances_arrays exists then twgl would enable it,\n *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,\n *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`\n *   to the `WebGLRenderingContext`.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets various defaults for twgl.\n *\n * In the interest of terseness which is kind of the point\n * of twgl I've integrated a few of the older functions here\n *\n * @param {module:twgl.Defaults} newDefaults The default settings.\n * @memberOf module:twgl\n */\nfunction setDefaults$2(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$2);\n  setDefaults(newDefaults);  // eslint-disable-line\n  setDefaults$1(newDefaults);  // eslint-disable-line\n}\n\nconst prefixRE = /^(.*?)_/;\nfunction addExtensionToContext(gl, extensionName) {\n  glEnumToString(gl, 0);\n  const ext = gl.getExtension(extensionName);\n  if (ext) {\n    const enums = {};\n    const fnSuffix = prefixRE.exec(extensionName)[1];\n    const enumSuffix = '_' + fnSuffix;\n    for (const key in ext) {\n      const value = ext[key];\n      const isFunc = typeof (value) === 'function';\n      const suffix = isFunc ? fnSuffix : enumSuffix;\n      let name = key;\n      // examples of where this is not true are WEBGL_compressed_texture_s3tc\n      // and WEBGL_compressed_texture_pvrtc\n      if (key.endsWith(suffix)) {\n        name = key.substring(0, key.length - suffix.length);\n      }\n      if (gl[name] !== undefined) {\n        if (!isFunc && gl[name] !== value) {\n          warn(name, gl[name], value, key);\n        }\n      } else {\n        if (isFunc) {\n          gl[name] = function(origFn) {\n            return function() {\n              return origFn.apply(ext, arguments);\n            };\n          }(value);\n        } else {\n          gl[name] = value;\n          enums[name] = value;\n        }\n      }\n    }\n    // pass the modified enums to glEnumToString\n    enums.constructor = {\n      name: ext.constructor.name,\n    };\n    glEnumToString(enums, 0);\n  }\n  return ext;\n}\n\n/*\n * If you're wondering why the code doesn't just iterate\n * over all extensions using `gl.getExtensions` is that it's possible\n * some future extension is incompatible with this code. Rather than\n * have thing suddenly break it seems better to manually add to this\n * list.\n *\n */\nconst supportedExtensions = [\n  'ANGLE_instanced_arrays',\n  'EXT_blend_minmax',\n  'EXT_color_buffer_float',\n  'EXT_color_buffer_half_float',\n  'EXT_disjoint_timer_query',\n  'EXT_disjoint_timer_query_webgl2',\n  'EXT_frag_depth',\n  'EXT_sRGB',\n  'EXT_shader_texture_lod',\n  'EXT_texture_filter_anisotropic',\n  'OES_element_index_uint',\n  'OES_standard_derivatives',\n  'OES_texture_float',\n  'OES_texture_float_linear',\n  'OES_texture_half_float',\n  'OES_texture_half_float_linear',\n  'OES_vertex_array_object',\n  'WEBGL_color_buffer_float',\n  'WEBGL_compressed_texture_atc',\n  'WEBGL_compressed_texture_etc1',\n  'WEBGL_compressed_texture_pvrtc',\n  'WEBGL_compressed_texture_s3tc',\n  'WEBGL_compressed_texture_s3tc_srgb',\n  'WEBGL_depth_texture',\n  'WEBGL_draw_buffers',\n];\n\n/**\n * Attempts to enable all of the following extensions\n * and add their functions and constants to the\n * `WebGLRenderingContext` using their normal non-extension like names.\n *\n *      ANGLE_instanced_arrays\n *      EXT_blend_minmax\n *      EXT_color_buffer_float\n *      EXT_color_buffer_half_float\n *      EXT_disjoint_timer_query\n *      EXT_disjoint_timer_query_webgl2\n *      EXT_frag_depth\n *      EXT_sRGB\n *      EXT_shader_texture_lod\n *      EXT_texture_filter_anisotropic\n *      OES_element_index_uint\n *      OES_standard_derivatives\n *      OES_texture_float\n *      OES_texture_float_linear\n *      OES_texture_half_float\n *      OES_texture_half_float_linear\n *      OES_vertex_array_object\n *      WEBGL_color_buffer_float\n *      WEBGL_compressed_texture_atc\n *      WEBGL_compressed_texture_etc1\n *      WEBGL_compressed_texture_pvrtc\n *      WEBGL_compressed_texture_s3tc\n *      WEBGL_compressed_texture_s3tc_srgb\n *      WEBGL_depth_texture\n *      WEBGL_draw_buffers\n *\n * For example if `ANGLE_instanced_arrays` exists then the functions\n * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`\n * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the\n * `WebGLRenderingContext`.\n *\n * Note that if you want to know if the extension exists you should\n * probably call `gl.getExtension` for each extension. Alternatively\n * you can check for the existence of the functions or constants that\n * are expected to be added. For example\n *\n *    if (gl.drawBuffers) {\n *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2\n *      ....\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @memberOf module:twgl\n */\nfunction addExtensionsToContext(gl) {\n  for (let ii = 0; ii < supportedExtensions.length; ++ii) {\n    addExtensionToContext(gl, supportedExtensions[ii]);\n  }\n}\n\n/**\n * Creates a webgl context.\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n * @private\n */\nfunction create3DContext(canvas, opt_attribs) {\n  const names = [\"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults$2.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL1 context.\n *\n * Note: Will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n * @deprecated\n * @private\n */\nfunction getWebGLContext(canvas, opt_attribs) {\n  const gl = create3DContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Creates a webgl context.\n *\n * Will return a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *     twgl.isWebGL2(gl);\n *\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n */\nfunction createContext(canvas, opt_attribs) {\n  const names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults$2.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL context.  Will create a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *    function isWebGL2(gl) {\n *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n *    }\n *\n * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\nfunction getContext(canvas, opt_attribs) {\n  const gl = createContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Resize a canvas to match the size it's displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:twgl\n */\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\n  multiplier = multiplier || 1;\n  multiplier = Math.max(0, multiplier);\n  const width  = canvas.clientWidth  * multiplier | 0;\n  const height = canvas.clientHeight * multiplier | 0;\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n  return false;\n}\n\nexport { addExtensionsToContext, attributes, bindFramebufferInfo, bindTransformFeedbackInfo, bindUniformBlock, canFilter, canGenerateMipmap, createAttribsFromArrays, createAttributeSetters, createBufferFromArray, createBufferFromTypedArray, createBufferInfoFromArrays, createBuffersFromArrays, createFramebufferInfo, createProgram, createProgramAsync, createProgramFromScripts, createProgramFromSources, createProgramInfo, createProgramInfoAsync, createProgramInfoFromProgram, createSampler, createSamplers, createTexture, createTextures, createTransformFeedback, createTransformFeedbackInfo, createUniformBlockInfo, createUniformBlockInfoFromProgram, createUniformBlockSpecFromProgram, createUniformSetters, createVAOAndSetAttributes, createVAOFromBufferInfo, createVertexArrayInfo, draw, drawBufferInfo, drawObjectList, framebuffers, getArray as getArray_, getBytesPerElementForInternalFormat, getContext, getFormatAndTypeForInternalFormat, getGLTypeForTypedArray, getGLTypeForTypedArrayType, getNumComponentsForFormat, getNumComponents as getNumComponents_, getTypedArrayTypeForGLType, getWebGLContext, glEnumToString, isArrayBuffer, isWebGL1, isWebGL2, loadTextureFromUrl, m4, primitives, programs, resizeCanvasToDisplaySize, resizeFramebufferInfo, resizeTexture, setAttribInfoBufferFromArray, setDefaults as setAttributeDefaults_, setAttributePrefix, setAttributes, setBlockUniforms, setBuffersAndAttributes, setDefaultTextureColor, setDefaults$2 as setDefaults, setEmptyTexture, setSamplerParameters, setDefaults$1 as setTextureDefaults_, setTextureFilteringForSize, setTextureFromArray, setTextureFromElement, setTextureParameters, setUniformBlock, setUniforms, setUniformsAndBindTextures, textures, typedarrays, utils, v3, vertexArrays };\n","export default class {\n  constructor(gl) {\n    this.gl = gl;\n    this.y = 0;\n    this.isActive = this.canScroll;\n\n    document.onscroll = (e) => this.onScroll(e);\n  }\n\n  onScroll(e) {\n    if (!this.isActive) return;\n    //console.log(\"scroll\", e);\n\n    this.y = window.scrollY * this.gl.vp.px;\n  }\n\n  resize(gl) {\n    this.gl = gl;\n    this.isActive = this.canScroll;\n    this.y = window.scrollY * this.gl.vp.px;\n  }\n\n  get canScroll() {\n    //console.log(document.documentElement.scrollHeight, window.innerHeight);\n    return document.documentElement.scrollHeight > window.innerHeight;\n  }\n}\n","import * as twgl from \"twgl.js\";\n\nexport default class {\n  constructor(\n    gl,\n    data = {\n      z: -9,\n      fov: 0.6,\n      near: 1,\n      far: 1024\n    }\n  ) {\n    data.fov = degToRad(35);\n    this.camera = data;\n    // this.get(gl);\n  }\n\n  get(gl) {\n    this.camera.mat = twgl.m4.translate(\n      twgl.m4.perspective(\n        this.camera.fov,\n        gl.canvas.width / gl.canvas.height,\n        this.camera.near,\n        this.camera.far\n      ),\n      [0, 0, this.camera.z]\n    );\n\n    return this.camera;\n  }\n}\n\nfunction degToRad(d) {\n  return (d * Math.PI) / 180;\n}\n","/**\n * lil-gui\n * https://lil-gui.georgealways.com\n * @version 0.17.0\n * @author George Michael Brower\n * @license MIT\n */\n\n/**\n * Base class for all controllers.\n */\nclass Controller {\n\n\tconstructor( parent, object, property, className, widgetTag = 'div' ) {\n\n\t\t/**\n\t\t * The GUI that contains this controller.\n\t\t * @type {GUI}\n\t\t */\n\t\tthis.parent = parent;\n\n\t\t/**\n\t\t * The object this controller will modify.\n\t\t * @type {object}\n\t\t */\n\t\tthis.object = object;\n\n\t\t/**\n\t\t * The name of the property to control.\n\t\t * @type {string}\n\t\t */\n\t\tthis.property = property;\n\n\t\t/**\n\t\t * Used to determine if the controller is disabled.\n\t\t * Use `controller.disable( true|false )` to modify this value\n\t\t * @type {boolean}\n\t\t */\n\t\tthis._disabled = false;\n\n\t\t/**\n\t\t * Used to determine if the Controller is hidden.\n\t\t * Use `controller.show()` or `controller.hide()` to change this.\n\t\t * @type {boolean}\n\t\t */\n\t\tthis._hidden = false;\n\n\t\t/**\n\t\t * The value of `object[ property ]` when the controller was created.\n\t\t * @type {any}\n\t\t */\n\t\tthis.initialValue = this.getValue();\n\n\t\t/**\n\t\t * The outermost container DOM element for this controller.\n\t\t * @type {HTMLElement}\n\t\t */\n\t\tthis.domElement = document.createElement( 'div' );\n\t\tthis.domElement.classList.add( 'controller' );\n\t\tthis.domElement.classList.add( className );\n\n\t\t/**\n\t\t * The DOM element that contains the controller's name.\n\t\t * @type {HTMLElement}\n\t\t */\n\t\tthis.$name = document.createElement( 'div' );\n\t\tthis.$name.classList.add( 'name' );\n\n\t\tController.nextNameID = Controller.nextNameID || 0;\n\t\tthis.$name.id = `lil-gui-name-${++Controller.nextNameID}`;\n\n\t\t/**\n\t\t * The DOM element that contains the controller's \"widget\" (which differs by controller type).\n\t\t * @type {HTMLElement}\n\t\t */\n\t\tthis.$widget = document.createElement( widgetTag );\n\t\tthis.$widget.classList.add( 'widget' );\n\n\t\t/**\n\t\t * The DOM element that receives the disabled attribute when using disable()\n\t\t * @type {HTMLElement}\n\t\t */\n\t\tthis.$disable = this.$widget;\n\n\t\tthis.domElement.appendChild( this.$name );\n\t\tthis.domElement.appendChild( this.$widget );\n\n\t\tthis.parent.children.push( this );\n\t\tthis.parent.controllers.push( this );\n\n\t\tthis.parent.$children.appendChild( this.domElement );\n\n\t\tthis._listenCallback = this._listenCallback.bind( this );\n\n\t\tthis.name( property );\n\n\t}\n\n\t/**\n\t * Sets the name of the controller and its label in the GUI.\n\t * @param {string} name\n\t * @returns {this}\n\t */\n\tname( name ) {\n\t\t/**\n\t\t * The controller's name. Use `controller.name( 'Name' )` to modify this value.\n\t\t * @type {string}\n\t\t */\n\t\tthis._name = name;\n\t\tthis.$name.innerHTML = name;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pass a function to be called whenever the value is modified by this controller.\n\t * The function receives the new value as its first parameter. The value of `this` will be the\n\t * controller.\n\t * @param {Function} callback\n\t * @returns {this}\n\t * @example\n\t * const controller = gui.add( object, 'property' );\n\t *\n\t * controller.onChange( function( v ) {\n\t * \tconsole.log( 'The value is now ' + v );\n\t * \tconsole.assert( this === controller );\n\t * } );\n\t */\n\tonChange( callback ) {\n\t\t/**\n\t\t * Used to access the function bound to `onChange` events. Don't modify this value directly.\n\t\t * Use the `controller.onChange( callback )` method instead.\n\t\t * @type {Function}\n\t\t */\n\t\tthis._onChange = callback;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Calls the onChange methods of this controller and its parent GUI.\n\t * @protected\n\t */\n\t_callOnChange() {\n\n\t\tthis.parent._callOnChange( this );\n\n\t\tif ( this._onChange !== undefined ) {\n\t\t\tthis._onChange.call( this, this.getValue() );\n\t\t}\n\n\t\tthis._changed = true;\n\n\t}\n\n\t/**\n\t * Pass a function to be called after this controller has been modified and loses focus.\n\t * @param {Function} callback\n\t * @returns {this}\n\t * @example\n\t * const controller = gui.add( object, 'property' );\n\t *\n\t * controller.onFinishChange( function( v ) {\n\t * \tconsole.log( 'Changes complete: ' + v );\n\t * \tconsole.assert( this === controller );\n\t * } );\n\t */\n\tonFinishChange( callback ) {\n\t\t/**\n\t\t * Used to access the function bound to `onFinishChange` events. Don't modify this value\n\t\t * directly. Use the `controller.onFinishChange( callback )` method instead.\n\t\t * @type {Function}\n\t\t */\n\t\tthis._onFinishChange = callback;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Should be called by Controller when its widgets lose focus.\n\t * @protected\n\t */\n\t_callOnFinishChange() {\n\n\t\tif ( this._changed ) {\n\n\t\t\tthis.parent._callOnFinishChange( this );\n\n\t\t\tif ( this._onFinishChange !== undefined ) {\n\t\t\t\tthis._onFinishChange.call( this, this.getValue() );\n\t\t\t}\n\n\t\t}\n\n\t\tthis._changed = false;\n\n\t}\n\n\t/**\n\t * Sets the controller back to its initial value.\n\t * @returns {this}\n\t */\n\treset() {\n\t\tthis.setValue( this.initialValue );\n\t\tthis._callOnFinishChange();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Enables this controller.\n\t * @param {boolean} enabled\n\t * @returns {this}\n\t * @example\n\t * controller.enable();\n\t * controller.enable( false ); // disable\n\t * controller.enable( controller._disabled ); // toggle\n\t */\n\tenable( enabled = true ) {\n\t\treturn this.disable( !enabled );\n\t}\n\n\t/**\n\t * Disables this controller.\n\t * @param {boolean} disabled\n\t * @returns {this}\n\t * @example\n\t * controller.disable();\n\t * controller.disable( false ); // enable\n\t * controller.disable( !controller._disabled ); // toggle\n\t */\n\tdisable( disabled = true ) {\n\n\t\tif ( disabled === this._disabled ) return this;\n\n\t\tthis._disabled = disabled;\n\n\t\tthis.domElement.classList.toggle( 'disabled', disabled );\n\t\tthis.$disable.toggleAttribute( 'disabled', disabled );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Shows the Controller after it's been hidden.\n\t * @param {boolean} show\n\t * @returns {this}\n\t * @example\n\t * controller.show();\n\t * controller.show( false ); // hide\n\t * controller.show( controller._hidden ); // toggle\n\t */\n\tshow( show = true ) {\n\n\t\tthis._hidden = !show;\n\n\t\tthis.domElement.style.display = this._hidden ? 'none' : '';\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Hides the Controller.\n\t * @returns {this}\n\t */\n\thide() {\n\t\treturn this.show( false );\n\t}\n\n\t/**\n\t * Destroys this controller and replaces it with a new option controller. Provided as a more\n\t * descriptive syntax for `gui.add`, but primarily for compatibility with dat.gui.\n\t *\n\t * Use caution, as this method will destroy old references to this controller. It will also\n\t * change controller order if called out of sequence, moving the option controller to the end of\n\t * the GUI.\n\t * @example\n\t * // safe usage\n\t *\n\t * gui.add( object1, 'property' ).options( [ 'a', 'b', 'c' ] );\n\t * gui.add( object2, 'property' );\n\t *\n\t * // danger\n\t *\n\t * const c = gui.add( object1, 'property' );\n\t * gui.add( object2, 'property' );\n\t *\n\t * c.options( [ 'a', 'b', 'c' ] );\n\t * // controller is now at the end of the GUI even though it was added first\n\t *\n\t * assert( c.parent.children.indexOf( c ) === -1 )\n\t * // c references a controller that no longer exists\n\t *\n\t * @param {object|Array} options\n\t * @returns {Controller}\n\t */\n\toptions( options ) {\n\t\tconst controller = this.parent.add( this.object, this.property, options );\n\t\tcontroller.name( this._name );\n\t\tthis.destroy();\n\t\treturn controller;\n\t}\n\n\t/**\n\t * Sets the minimum value. Only works on number controllers.\n\t * @param {number} min\n\t * @returns {this}\n\t */\n\tmin( min ) {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the maximum value. Only works on number controllers.\n\t * @param {number} max\n\t * @returns {this}\n\t */\n\tmax( max ) {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Values set by this controller will be rounded to multiples of `step`. Only works on number\n\t * controllers.\n\t * @param {number} step\n\t * @returns {this}\n\t */\n\tstep( step ) {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Rounds the displayed value to a fixed number of decimals, without affecting the actual value\n\t * like `step()`. Only works on number controllers.\n\t * @example\n\t * gui.add( object, 'property' ).listen().decimals( 4 );\n\t * @param {number} decimals\n\t * @returns {this}\n\t */\n\tdecimals( decimals ) {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Calls `updateDisplay()` every animation frame. Pass `false` to stop listening.\n\t * @param {boolean} listen\n\t * @returns {this}\n\t */\n\tlisten( listen = true ) {\n\n\t\t/**\n\t\t * Used to determine if the controller is currently listening. Don't modify this value\n\t\t * directly. Use the `controller.listen( true|false )` method instead.\n\t\t * @type {boolean}\n\t\t */\n\t\tthis._listening = listen;\n\n\t\tif ( this._listenCallbackID !== undefined ) {\n\t\t\tcancelAnimationFrame( this._listenCallbackID );\n\t\t\tthis._listenCallbackID = undefined;\n\t\t}\n\n\t\tif ( this._listening ) {\n\t\t\tthis._listenCallback();\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t_listenCallback() {\n\n\t\tthis._listenCallbackID = requestAnimationFrame( this._listenCallback );\n\n\t\t// To prevent framerate loss, make sure the value has changed before updating the display.\n\t\t// Note: save() is used here instead of getValue() only because of ColorController. The !== operator\n\t\t// won't work for color objects or arrays, but ColorController.save() always returns a string.\n\n\t\tconst curValue = this.save();\n\n\t\tif ( curValue !== this._listenPrevValue ) {\n\t\t\tthis.updateDisplay();\n\t\t}\n\n\t\tthis._listenPrevValue = curValue;\n\n\t}\n\n\t/**\n\t * Returns `object[ property ]`.\n\t * @returns {any}\n\t */\n\tgetValue() {\n\t\treturn this.object[ this.property ];\n\t}\n\n\t/**\n\t * Sets the value of `object[ property ]`, invokes any `onChange` handlers and updates the display.\n\t * @param {any} value\n\t * @returns {this}\n\t */\n\tsetValue( value ) {\n\t\tthis.object[ this.property ] = value;\n\t\tthis._callOnChange();\n\t\tthis.updateDisplay();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Updates the display to keep it in sync with the current value. Useful for updating your\n\t * controllers when their values have been modified outside of the GUI.\n\t * @returns {this}\n\t */\n\tupdateDisplay() {\n\t\treturn this;\n\t}\n\n\tload( value ) {\n\t\tthis.setValue( value );\n\t\tthis._callOnFinishChange();\n\t\treturn this;\n\t}\n\n\tsave() {\n\t\treturn this.getValue();\n\t}\n\n\t/**\n\t * Destroys this controller and removes it from the parent GUI.\n\t */\n\tdestroy() {\n\t\tthis.listen( false );\n\t\tthis.parent.children.splice( this.parent.children.indexOf( this ), 1 );\n\t\tthis.parent.controllers.splice( this.parent.controllers.indexOf( this ), 1 );\n\t\tthis.parent.$children.removeChild( this.domElement );\n\t}\n\n}\n\nclass BooleanController extends Controller {\n\n\tconstructor( parent, object, property ) {\n\n\t\tsuper( parent, object, property, 'boolean', 'label' );\n\n\t\tthis.$input = document.createElement( 'input' );\n\t\tthis.$input.setAttribute( 'type', 'checkbox' );\n\t\tthis.$input.setAttribute( 'aria-labelledby', this.$name.id );\n\n\t\tthis.$widget.appendChild( this.$input );\n\n\t\tthis.$input.addEventListener( 'change', () => {\n\t\t\tthis.setValue( this.$input.checked );\n\t\t\tthis._callOnFinishChange();\n\t\t} );\n\n\t\tthis.$disable = this.$input;\n\n\t\tthis.updateDisplay();\n\n\t}\n\n\tupdateDisplay() {\n\t\tthis.$input.checked = this.getValue();\n\t\treturn this;\n\t}\n\n}\n\nfunction normalizeColorString( string ) {\n\n\tlet match, result;\n\n\tif ( match = string.match( /(#|0x)?([a-f0-9]{6})/i ) ) {\n\n\t\tresult = match[ 2 ];\n\n\t} else if ( match = string.match( /rgb\\(\\s*(\\d*)\\s*,\\s*(\\d*)\\s*,\\s*(\\d*)\\s*\\)/ ) ) {\n\n\t\tresult = parseInt( match[ 1 ] ).toString( 16 ).padStart( 2, 0 )\n\t\t\t+ parseInt( match[ 2 ] ).toString( 16 ).padStart( 2, 0 )\n\t\t\t+ parseInt( match[ 3 ] ).toString( 16 ).padStart( 2, 0 );\n\n\t} else if ( match = string.match( /^#?([a-f0-9])([a-f0-9])([a-f0-9])$/i ) ) {\n\n\t\tresult = match[ 1 ] + match[ 1 ] + match[ 2 ] + match[ 2 ] + match[ 3 ] + match[ 3 ];\n\n\t}\n\n\tif ( result ) {\n\t\treturn '#' + result;\n\t}\n\n\treturn false;\n\n}\n\nconst STRING = {\n\tisPrimitive: true,\n\tmatch: v => typeof v === 'string',\n\tfromHexString: normalizeColorString,\n\ttoHexString: normalizeColorString\n};\n\nconst INT = {\n\tisPrimitive: true,\n\tmatch: v => typeof v === 'number',\n\tfromHexString: string => parseInt( string.substring( 1 ), 16 ),\n\ttoHexString: value => '#' + value.toString( 16 ).padStart( 6, 0 )\n};\n\nconst ARRAY = {\n\tisPrimitive: false,\n\tmatch: Array.isArray,\n\tfromHexString( string, target, rgbScale = 1 ) {\n\n\t\tconst int = INT.fromHexString( string );\n\n\t\ttarget[ 0 ] = ( int >> 16 & 255 ) / 255 * rgbScale;\n\t\ttarget[ 1 ] = ( int >> 8 & 255 ) / 255 * rgbScale;\n\t\ttarget[ 2 ] = ( int & 255 ) / 255 * rgbScale;\n\n\t},\n\ttoHexString( [ r, g, b ], rgbScale = 1 ) {\n\n\t\trgbScale = 255 / rgbScale;\n\n\t\tconst int = ( r * rgbScale ) << 16 ^\n\t\t\t( g * rgbScale ) << 8 ^\n\t\t\t( b * rgbScale ) << 0;\n\n\t\treturn INT.toHexString( int );\n\n\t}\n};\n\nconst OBJECT = {\n\tisPrimitive: false,\n\tmatch: v => Object( v ) === v,\n\tfromHexString( string, target, rgbScale = 1 ) {\n\n\t\tconst int = INT.fromHexString( string );\n\n\t\ttarget.r = ( int >> 16 & 255 ) / 255 * rgbScale;\n\t\ttarget.g = ( int >> 8 & 255 ) / 255 * rgbScale;\n\t\ttarget.b = ( int & 255 ) / 255 * rgbScale;\n\n\t},\n\ttoHexString( { r, g, b }, rgbScale = 1 ) {\n\n\t\trgbScale = 255 / rgbScale;\n\n\t\tconst int = ( r * rgbScale ) << 16 ^\n\t\t\t( g * rgbScale ) << 8 ^\n\t\t\t( b * rgbScale ) << 0;\n\n\t\treturn INT.toHexString( int );\n\n\t}\n};\n\nconst FORMATS = [ STRING, INT, ARRAY, OBJECT ];\n\nfunction getColorFormat( value ) {\n\treturn FORMATS.find( format => format.match( value ) );\n}\n\nclass ColorController extends Controller {\n\n\tconstructor( parent, object, property, rgbScale ) {\n\n\t\tsuper( parent, object, property, 'color' );\n\n\t\tthis.$input = document.createElement( 'input' );\n\t\tthis.$input.setAttribute( 'type', 'color' );\n\t\tthis.$input.setAttribute( 'tabindex', -1 );\n\t\tthis.$input.setAttribute( 'aria-labelledby', this.$name.id );\n\n\t\tthis.$text = document.createElement( 'input' );\n\t\tthis.$text.setAttribute( 'type', 'text' );\n\t\tthis.$text.setAttribute( 'spellcheck', 'false' );\n\t\tthis.$text.setAttribute( 'aria-labelledby', this.$name.id );\n\n\t\tthis.$display = document.createElement( 'div' );\n\t\tthis.$display.classList.add( 'display' );\n\n\t\tthis.$display.appendChild( this.$input );\n\t\tthis.$widget.appendChild( this.$display );\n\t\tthis.$widget.appendChild( this.$text );\n\n\t\tthis._format = getColorFormat( this.initialValue );\n\t\tthis._rgbScale = rgbScale;\n\n\t\tthis._initialValueHexString = this.save();\n\t\tthis._textFocused = false;\n\n\t\tthis.$input.addEventListener( 'input', () => {\n\t\t\tthis._setValueFromHexString( this.$input.value );\n\t\t} );\n\n\t\tthis.$input.addEventListener( 'blur', () => {\n\t\t\tthis._callOnFinishChange();\n\t\t} );\n\n\t\tthis.$text.addEventListener( 'input', () => {\n\t\t\tconst tryParse = normalizeColorString( this.$text.value );\n\t\t\tif ( tryParse ) {\n\t\t\t\tthis._setValueFromHexString( tryParse );\n\t\t\t}\n\t\t} );\n\n\t\tthis.$text.addEventListener( 'focus', () => {\n\t\t\tthis._textFocused = true;\n\t\t\tthis.$text.select();\n\t\t} );\n\n\t\tthis.$text.addEventListener( 'blur', () => {\n\t\t\tthis._textFocused = false;\n\t\t\tthis.updateDisplay();\n\t\t\tthis._callOnFinishChange();\n\t\t} );\n\n\t\tthis.$disable = this.$text;\n\n\t\tthis.updateDisplay();\n\n\t}\n\n\treset() {\n\t\tthis._setValueFromHexString( this._initialValueHexString );\n\t\treturn this;\n\t}\n\n\t_setValueFromHexString( value ) {\n\n\t\tif ( this._format.isPrimitive ) {\n\n\t\t\tconst newValue = this._format.fromHexString( value );\n\t\t\tthis.setValue( newValue );\n\n\t\t} else {\n\n\t\t\tthis._format.fromHexString( value, this.getValue(), this._rgbScale );\n\t\t\tthis._callOnChange();\n\t\t\tthis.updateDisplay();\n\n\t\t}\n\n\t}\n\n\tsave() {\n\t\treturn this._format.toHexString( this.getValue(), this._rgbScale );\n\t}\n\n\tload( value ) {\n\t\tthis._setValueFromHexString( value );\n\t\tthis._callOnFinishChange();\n\t\treturn this;\n\t}\n\n\tupdateDisplay() {\n\t\tthis.$input.value = this._format.toHexString( this.getValue(), this._rgbScale );\n\t\tif ( !this._textFocused ) {\n\t\t\tthis.$text.value = this.$input.value.substring( 1 );\n\t\t}\n\t\tthis.$display.style.backgroundColor = this.$input.value;\n\t\treturn this;\n\t}\n\n}\n\nclass FunctionController extends Controller {\n\n\tconstructor( parent, object, property ) {\n\n\t\tsuper( parent, object, property, 'function' );\n\n\t\t// Buttons are the only case where widget contains name\n\t\tthis.$button = document.createElement( 'button' );\n\t\tthis.$button.appendChild( this.$name );\n\t\tthis.$widget.appendChild( this.$button );\n\n\t\tthis.$button.addEventListener( 'click', e => {\n\t\t\te.preventDefault();\n\t\t\tthis.getValue().call( this.object );\n\t\t} );\n\n\t\t// enables :active pseudo class on mobile\n\t\tthis.$button.addEventListener( 'touchstart', () => {}, { passive: true } );\n\n\t\tthis.$disable = this.$button;\n\n\t}\n\n}\n\nclass NumberController extends Controller {\n\n\tconstructor( parent, object, property, min, max, step ) {\n\n\t\tsuper( parent, object, property, 'number' );\n\n\t\tthis._initInput();\n\n\t\tthis.min( min );\n\t\tthis.max( max );\n\n\t\tconst stepExplicit = step !== undefined;\n\t\tthis.step( stepExplicit ? step : this._getImplicitStep(), stepExplicit );\n\n\t\tthis.updateDisplay();\n\n\t}\n\n\tdecimals( decimals ) {\n\t\tthis._decimals = decimals;\n\t\tthis.updateDisplay();\n\t\treturn this;\n\t}\n\n\tmin( min ) {\n\t\tthis._min = min;\n\t\tthis._onUpdateMinMax();\n\t\treturn this;\n\t}\n\n\tmax( max ) {\n\t\tthis._max = max;\n\t\tthis._onUpdateMinMax();\n\t\treturn this;\n\t}\n\n\tstep( step, explicit = true ) {\n\t\tthis._step = step;\n\t\tthis._stepExplicit = explicit;\n\t\treturn this;\n\t}\n\n\tupdateDisplay() {\n\n\t\tconst value = this.getValue();\n\n\t\tif ( this._hasSlider ) {\n\n\t\t\tlet percent = ( value - this._min ) / ( this._max - this._min );\n\t\t\tpercent = Math.max( 0, Math.min( percent, 1 ) );\n\n\t\t\tthis.$fill.style.width = percent * 100 + '%';\n\n\t\t}\n\n\t\tif ( !this._inputFocused ) {\n\t\t\tthis.$input.value = this._decimals === undefined ? value : value.toFixed( this._decimals );\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t_initInput() {\n\n\t\tthis.$input = document.createElement( 'input' );\n\t\tthis.$input.setAttribute( 'type', 'number' );\n\t\tthis.$input.setAttribute( 'step', 'any' );\n\t\tthis.$input.setAttribute( 'aria-labelledby', this.$name.id );\n\n\t\tthis.$widget.appendChild( this.$input );\n\n\t\tthis.$disable = this.$input;\n\n\t\tconst onInput = () => {\n\n\t\t\tlet value = parseFloat( this.$input.value );\n\n\t\t\tif ( isNaN( value ) ) return;\n\n\t\t\tif ( this._stepExplicit ) {\n\t\t\t\tvalue = this._snap( value );\n\t\t\t}\n\n\t\t\tthis.setValue( this._clamp( value ) );\n\n\t\t};\n\n\t\t// Keys & mouse wheel\n\t\t// ---------------------------------------------------------------------\n\n\t\tconst increment = delta => {\n\n\t\t\tconst value = parseFloat( this.$input.value );\n\n\t\t\tif ( isNaN( value ) ) return;\n\n\t\t\tthis._snapClampSetValue( value + delta );\n\n\t\t\t// Force the input to updateDisplay when it's focused\n\t\t\tthis.$input.value = this.getValue();\n\n\t\t};\n\n\t\tconst onKeyDown = e => {\n\t\t\tif ( e.code === 'Enter' ) {\n\t\t\t\tthis.$input.blur();\n\t\t\t}\n\t\t\tif ( e.code === 'ArrowUp' ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tincrement( this._step * this._arrowKeyMultiplier( e ) );\n\t\t\t}\n\t\t\tif ( e.code === 'ArrowDown' ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tincrement( this._step * this._arrowKeyMultiplier( e ) * -1 );\n\t\t\t}\n\t\t};\n\n\t\tconst onWheel = e => {\n\t\t\tif ( this._inputFocused ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tincrement( this._step * this._normalizeMouseWheel( e ) );\n\t\t\t}\n\t\t};\n\n\t\t// Vertical drag\n\t\t// ---------------------------------------------------------------------\n\n\t\tlet testingForVerticalDrag = false,\n\t\t\tinitClientX,\n\t\t\tinitClientY,\n\t\t\tprevClientY,\n\t\t\tinitValue,\n\t\t\tdragDelta;\n\n\t\t// Once the mouse is dragged more than DRAG_THRESH px on any axis, we decide\n\t\t// on the user's intent: horizontal means highlight, vertical means drag.\n\t\tconst DRAG_THRESH = 5;\n\n\t\tconst onMouseDown = e => {\n\n\t\t\tinitClientX = e.clientX;\n\t\t\tinitClientY = prevClientY = e.clientY;\n\t\t\ttestingForVerticalDrag = true;\n\n\t\t\tinitValue = this.getValue();\n\t\t\tdragDelta = 0;\n\n\t\t\twindow.addEventListener( 'mousemove', onMouseMove );\n\t\t\twindow.addEventListener( 'mouseup', onMouseUp );\n\n\t\t};\n\n\t\tconst onMouseMove = e => {\n\n\t\t\tif ( testingForVerticalDrag ) {\n\n\t\t\t\tconst dx = e.clientX - initClientX;\n\t\t\t\tconst dy = e.clientY - initClientY;\n\n\t\t\t\tif ( Math.abs( dy ) > DRAG_THRESH ) {\n\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tthis.$input.blur();\n\t\t\t\t\ttestingForVerticalDrag = false;\n\t\t\t\t\tthis._setDraggingStyle( true, 'vertical' );\n\n\t\t\t\t} else if ( Math.abs( dx ) > DRAG_THRESH ) {\n\n\t\t\t\t\tonMouseUp();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// This isn't an else so that the first move counts towards dragDelta\n\t\t\tif ( !testingForVerticalDrag ) {\n\n\t\t\t\tconst dy = e.clientY - prevClientY;\n\n\t\t\t\tdragDelta -= dy * this._step * this._arrowKeyMultiplier( e );\n\n\t\t\t\t// Clamp dragDelta so we don't have 'dead space' after dragging past bounds.\n\t\t\t\t// We're okay with the fact that bounds can be undefined here.\n\t\t\t\tif ( initValue + dragDelta > this._max ) {\n\t\t\t\t\tdragDelta = this._max - initValue;\n\t\t\t\t} else if ( initValue + dragDelta < this._min ) {\n\t\t\t\t\tdragDelta = this._min - initValue;\n\t\t\t\t}\n\n\t\t\t\tthis._snapClampSetValue( initValue + dragDelta );\n\n\t\t\t}\n\n\t\t\tprevClientY = e.clientY;\n\n\t\t};\n\n\t\tconst onMouseUp = () => {\n\t\t\tthis._setDraggingStyle( false, 'vertical' );\n\t\t\tthis._callOnFinishChange();\n\t\t\twindow.removeEventListener( 'mousemove', onMouseMove );\n\t\t\twindow.removeEventListener( 'mouseup', onMouseUp );\n\t\t};\n\n\t\t// Focus state & onFinishChange\n\t\t// ---------------------------------------------------------------------\n\n\t\tconst onFocus = () => {\n\t\t\tthis._inputFocused = true;\n\t\t};\n\n\t\tconst onBlur = () => {\n\t\t\tthis._inputFocused = false;\n\t\t\tthis.updateDisplay();\n\t\t\tthis._callOnFinishChange();\n\t\t};\n\n\t\tthis.$input.addEventListener( 'input', onInput );\n\t\tthis.$input.addEventListener( 'keydown', onKeyDown );\n\t\tthis.$input.addEventListener( 'wheel', onWheel, { passive: false } );\n\t\tthis.$input.addEventListener( 'mousedown', onMouseDown );\n\t\tthis.$input.addEventListener( 'focus', onFocus );\n\t\tthis.$input.addEventListener( 'blur', onBlur );\n\n\t}\n\n\t_initSlider() {\n\n\t\tthis._hasSlider = true;\n\n\t\t// Build DOM\n\t\t// ---------------------------------------------------------------------\n\n\t\tthis.$slider = document.createElement( 'div' );\n\t\tthis.$slider.classList.add( 'slider' );\n\n\t\tthis.$fill = document.createElement( 'div' );\n\t\tthis.$fill.classList.add( 'fill' );\n\n\t\tthis.$slider.appendChild( this.$fill );\n\t\tthis.$widget.insertBefore( this.$slider, this.$input );\n\n\t\tthis.domElement.classList.add( 'hasSlider' );\n\n\t\t// Map clientX to value\n\t\t// ---------------------------------------------------------------------\n\n\t\tconst map = ( v, a, b, c, d ) => {\n\t\t\treturn ( v - a ) / ( b - a ) * ( d - c ) + c;\n\t\t};\n\n\t\tconst setValueFromX = clientX => {\n\t\t\tconst rect = this.$slider.getBoundingClientRect();\n\t\t\tlet value = map( clientX, rect.left, rect.right, this._min, this._max );\n\t\t\tthis._snapClampSetValue( value );\n\t\t};\n\n\t\t// Mouse drag\n\t\t// ---------------------------------------------------------------------\n\n\t\tconst mouseDown = e => {\n\t\t\tthis._setDraggingStyle( true );\n\t\t\tsetValueFromX( e.clientX );\n\t\t\twindow.addEventListener( 'mousemove', mouseMove );\n\t\t\twindow.addEventListener( 'mouseup', mouseUp );\n\t\t};\n\n\t\tconst mouseMove = e => {\n\t\t\tsetValueFromX( e.clientX );\n\t\t};\n\n\t\tconst mouseUp = () => {\n\t\t\tthis._callOnFinishChange();\n\t\t\tthis._setDraggingStyle( false );\n\t\t\twindow.removeEventListener( 'mousemove', mouseMove );\n\t\t\twindow.removeEventListener( 'mouseup', mouseUp );\n\t\t};\n\n\t\t// Touch drag\n\t\t// ---------------------------------------------------------------------\n\n\t\tlet testingForScroll = false, prevClientX, prevClientY;\n\n\t\tconst beginTouchDrag = e => {\n\t\t\te.preventDefault();\n\t\t\tthis._setDraggingStyle( true );\n\t\t\tsetValueFromX( e.touches[ 0 ].clientX );\n\t\t\ttestingForScroll = false;\n\t\t};\n\n\t\tconst onTouchStart = e => {\n\n\t\t\tif ( e.touches.length > 1 ) return;\n\n\t\t\t// If we're in a scrollable container, we should wait for the first\n\t\t\t// touchmove to see if the user is trying to slide or scroll.\n\t\t\tif ( this._hasScrollBar ) {\n\n\t\t\t\tprevClientX = e.touches[ 0 ].clientX;\n\t\t\t\tprevClientY = e.touches[ 0 ].clientY;\n\t\t\t\ttestingForScroll = true;\n\n\t\t\t} else {\n\n\t\t\t\t// Otherwise, we can set the value straight away on touchstart.\n\t\t\t\tbeginTouchDrag( e );\n\n\t\t\t}\n\n\t\t\twindow.addEventListener( 'touchmove', onTouchMove, { passive: false } );\n\t\t\twindow.addEventListener( 'touchend', onTouchEnd );\n\n\t\t};\n\n\t\tconst onTouchMove = e => {\n\n\t\t\tif ( testingForScroll ) {\n\n\t\t\t\tconst dx = e.touches[ 0 ].clientX - prevClientX;\n\t\t\t\tconst dy = e.touches[ 0 ].clientY - prevClientY;\n\n\t\t\t\tif ( Math.abs( dx ) > Math.abs( dy ) ) {\n\n\t\t\t\t\t// We moved horizontally, set the value and stop checking.\n\t\t\t\t\tbeginTouchDrag( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// This was, in fact, an attempt to scroll. Abort.\n\t\t\t\t\twindow.removeEventListener( 'touchmove', onTouchMove );\n\t\t\t\t\twindow.removeEventListener( 'touchend', onTouchEnd );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\te.preventDefault();\n\t\t\t\tsetValueFromX( e.touches[ 0 ].clientX );\n\n\t\t\t}\n\n\t\t};\n\n\t\tconst onTouchEnd = () => {\n\t\t\tthis._callOnFinishChange();\n\t\t\tthis._setDraggingStyle( false );\n\t\t\twindow.removeEventListener( 'touchmove', onTouchMove );\n\t\t\twindow.removeEventListener( 'touchend', onTouchEnd );\n\t\t};\n\n\t\t// Mouse wheel\n\t\t// ---------------------------------------------------------------------\n\n\t\t// We have to use a debounced function to call onFinishChange because\n\t\t// there's no way to tell when the user is \"done\" mouse-wheeling.\n\t\tconst callOnFinishChange = this._callOnFinishChange.bind( this );\n\t\tconst WHEEL_DEBOUNCE_TIME = 400;\n\t\tlet wheelFinishChangeTimeout;\n\n\t\tconst onWheel = e => {\n\n\t\t\t// ignore vertical wheels if there's a scrollbar\n\t\t\tconst isVertical = Math.abs( e.deltaX ) < Math.abs( e.deltaY );\n\t\t\tif ( isVertical && this._hasScrollBar ) return;\n\n\t\t\te.preventDefault();\n\n\t\t\t// set value\n\t\t\tconst delta = this._normalizeMouseWheel( e ) * this._step;\n\t\t\tthis._snapClampSetValue( this.getValue() + delta );\n\n\t\t\t// force the input to updateDisplay when it's focused\n\t\t\tthis.$input.value = this.getValue();\n\n\t\t\t// debounce onFinishChange\n\t\t\tclearTimeout( wheelFinishChangeTimeout );\n\t\t\twheelFinishChangeTimeout = setTimeout( callOnFinishChange, WHEEL_DEBOUNCE_TIME );\n\n\t\t};\n\n\t\tthis.$slider.addEventListener( 'mousedown', mouseDown );\n\t\tthis.$slider.addEventListener( 'touchstart', onTouchStart, { passive: false } );\n\t\tthis.$slider.addEventListener( 'wheel', onWheel, { passive: false } );\n\n\t}\n\n\t_setDraggingStyle( active, axis = 'horizontal' ) {\n\t\tif ( this.$slider ) {\n\t\t\tthis.$slider.classList.toggle( 'active', active );\n\t\t}\n\t\tdocument.body.classList.toggle( 'lil-gui-dragging', active );\n\t\tdocument.body.classList.toggle( `lil-gui-${axis}`, active );\n\t}\n\n\t_getImplicitStep() {\n\n\t\tif ( this._hasMin && this._hasMax ) {\n\t\t\treturn ( this._max - this._min ) / 1000;\n\t\t}\n\n\t\treturn 0.1;\n\n\t}\n\n\t_onUpdateMinMax() {\n\n\t\tif ( !this._hasSlider && this._hasMin && this._hasMax ) {\n\n\t\t\t// If this is the first time we're hearing about min and max\n\t\t\t// and we haven't explicitly stated what our step is, let's\n\t\t\t// update that too.\n\t\t\tif ( !this._stepExplicit ) {\n\t\t\t\tthis.step( this._getImplicitStep(), false );\n\t\t\t}\n\n\t\t\tthis._initSlider();\n\t\t\tthis.updateDisplay();\n\n\t\t}\n\n\t}\n\n\t_normalizeMouseWheel( e ) {\n\n\t\tlet { deltaX, deltaY } = e;\n\n\t\t// Safari and Chrome report weird non-integral values for a notched wheel,\n\t\t// but still expose actual lines scrolled via wheelDelta. Notched wheels\n\t\t// should behave the same way as arrow keys.\n\t\tif ( Math.floor( e.deltaY ) !== e.deltaY && e.wheelDelta ) {\n\t\t\tdeltaX = 0;\n\t\t\tdeltaY = -e.wheelDelta / 120;\n\t\t\tdeltaY *= this._stepExplicit ? 1 : 10;\n\t\t}\n\n\t\tconst wheel = deltaX + -deltaY;\n\n\t\treturn wheel;\n\n\t}\n\n\t_arrowKeyMultiplier( e ) {\n\n\t\tlet mult = this._stepExplicit ? 1 : 10;\n\n\t\tif ( e.shiftKey ) {\n\t\t\tmult *= 10;\n\t\t} else if ( e.altKey ) {\n\t\t\tmult /= 10;\n\t\t}\n\n\t\treturn mult;\n\n\t}\n\n\t_snap( value ) {\n\n\t\t// This would be the logical way to do things, but floating point errors.\n\t\t// return Math.round( value / this._step ) * this._step;\n\n\t\t// Using inverse step solves a lot of them, but not all\n\t\t// const inverseStep = 1 / this._step;\n\t\t// return Math.round( value * inverseStep ) / inverseStep;\n\n\t\t// Not happy about this, but haven't seen it break.\n\t\tconst r = Math.round( value / this._step ) * this._step;\n\t\treturn parseFloat( r.toPrecision( 15 ) );\n\n\t}\n\n\t_clamp( value ) {\n\t\t// either condition is false if min or max is undefined\n\t\tif ( value < this._min ) value = this._min;\n\t\tif ( value > this._max ) value = this._max;\n\t\treturn value;\n\t}\n\n\t_snapClampSetValue( value ) {\n\t\tthis.setValue( this._clamp( this._snap( value ) ) );\n\t}\n\n\tget _hasScrollBar() {\n\t\tconst root = this.parent.root.$children;\n\t\treturn root.scrollHeight > root.clientHeight;\n\t}\n\n\tget _hasMin() {\n\t\treturn this._min !== undefined;\n\t}\n\n\tget _hasMax() {\n\t\treturn this._max !== undefined;\n\t}\n\n}\n\nclass OptionController extends Controller {\n\n\tconstructor( parent, object, property, options ) {\n\n\t\tsuper( parent, object, property, 'option' );\n\n\t\tthis.$select = document.createElement( 'select' );\n\t\tthis.$select.setAttribute( 'aria-labelledby', this.$name.id );\n\n\t\tthis.$display = document.createElement( 'div' );\n\t\tthis.$display.classList.add( 'display' );\n\n\t\tthis._values = Array.isArray( options ) ? options : Object.values( options );\n\t\tthis._names = Array.isArray( options ) ? options : Object.keys( options );\n\n\t\tthis._names.forEach( name => {\n\t\t\tconst $option = document.createElement( 'option' );\n\t\t\t$option.innerHTML = name;\n\t\t\tthis.$select.appendChild( $option );\n\t\t} );\n\n\t\tthis.$select.addEventListener( 'change', () => {\n\t\t\tthis.setValue( this._values[ this.$select.selectedIndex ] );\n\t\t\tthis._callOnFinishChange();\n\t\t} );\n\n\t\tthis.$select.addEventListener( 'focus', () => {\n\t\t\tthis.$display.classList.add( 'focus' );\n\t\t} );\n\n\t\tthis.$select.addEventListener( 'blur', () => {\n\t\t\tthis.$display.classList.remove( 'focus' );\n\t\t} );\n\n\t\tthis.$widget.appendChild( this.$select );\n\t\tthis.$widget.appendChild( this.$display );\n\n\t\tthis.$disable = this.$select;\n\n\t\tthis.updateDisplay();\n\n\t}\n\n\tupdateDisplay() {\n\t\tconst value = this.getValue();\n\t\tconst index = this._values.indexOf( value );\n\t\tthis.$select.selectedIndex = index;\n\t\tthis.$display.innerHTML = index === -1 ? value : this._names[ index ];\n\t\treturn this;\n\t}\n\n}\n\nclass StringController extends Controller {\n\n\tconstructor( parent, object, property ) {\n\n\t\tsuper( parent, object, property, 'string' );\n\n\t\tthis.$input = document.createElement( 'input' );\n\t\tthis.$input.setAttribute( 'type', 'text' );\n\t\tthis.$input.setAttribute( 'aria-labelledby', this.$name.id );\n\n\t\tthis.$input.addEventListener( 'input', () => {\n\t\t\tthis.setValue( this.$input.value );\n\t\t} );\n\n\t\tthis.$input.addEventListener( 'keydown', e => {\n\t\t\tif ( e.code === 'Enter' ) {\n\t\t\t\tthis.$input.blur();\n\t\t\t}\n\t\t} );\n\n\t\tthis.$input.addEventListener( 'blur', () => {\n\t\t\tthis._callOnFinishChange();\n\t\t} );\n\n\t\tthis.$widget.appendChild( this.$input );\n\n\t\tthis.$disable = this.$input;\n\n\t\tthis.updateDisplay();\n\n\t}\n\n\tupdateDisplay() {\n\t\tthis.$input.value = this.getValue();\n\t\treturn this;\n\t}\n\n}\n\nconst stylesheet = `.lil-gui {\n  font-family: var(--font-family);\n  font-size: var(--font-size);\n  line-height: 1;\n  font-weight: normal;\n  font-style: normal;\n  text-align: left;\n  background-color: var(--background-color);\n  color: var(--text-color);\n  user-select: none;\n  -webkit-user-select: none;\n  touch-action: manipulation;\n  --background-color: #1f1f1f;\n  --text-color: #ebebeb;\n  --title-background-color: #111111;\n  --title-text-color: #ebebeb;\n  --widget-color: #424242;\n  --hover-color: #4f4f4f;\n  --focus-color: #595959;\n  --number-color: #2cc9ff;\n  --string-color: #a2db3c;\n  --font-size: 11px;\n  --input-font-size: 11px;\n  --font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Arial, sans-serif;\n  --font-family-mono: Menlo, Monaco, Consolas, \"Droid Sans Mono\", monospace;\n  --padding: 4px;\n  --spacing: 4px;\n  --widget-height: 20px;\n  --name-width: 45%;\n  --slider-knob-width: 2px;\n  --slider-input-width: 27%;\n  --color-input-width: 27%;\n  --slider-input-min-width: 45px;\n  --color-input-min-width: 45px;\n  --folder-indent: 7px;\n  --widget-padding: 0 0 0 3px;\n  --widget-border-radius: 2px;\n  --checkbox-size: calc(0.75 * var(--widget-height));\n  --scrollbar-width: 5px;\n}\n.lil-gui, .lil-gui * {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n.lil-gui.root {\n  width: var(--width, 245px);\n  display: flex;\n  flex-direction: column;\n}\n.lil-gui.root > .title {\n  background: var(--title-background-color);\n  color: var(--title-text-color);\n}\n.lil-gui.root > .children {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n.lil-gui.root > .children::-webkit-scrollbar {\n  width: var(--scrollbar-width);\n  height: var(--scrollbar-width);\n  background: var(--background-color);\n}\n.lil-gui.root > .children::-webkit-scrollbar-thumb {\n  border-radius: var(--scrollbar-width);\n  background: var(--focus-color);\n}\n@media (pointer: coarse) {\n  .lil-gui.allow-touch-styles {\n    --widget-height: 28px;\n    --padding: 6px;\n    --spacing: 6px;\n    --font-size: 13px;\n    --input-font-size: 16px;\n    --folder-indent: 10px;\n    --scrollbar-width: 7px;\n    --slider-input-min-width: 50px;\n    --color-input-min-width: 65px;\n  }\n}\n.lil-gui.force-touch-styles {\n  --widget-height: 28px;\n  --padding: 6px;\n  --spacing: 6px;\n  --font-size: 13px;\n  --input-font-size: 16px;\n  --folder-indent: 10px;\n  --scrollbar-width: 7px;\n  --slider-input-min-width: 50px;\n  --color-input-min-width: 65px;\n}\n.lil-gui.autoPlace {\n  max-height: 100%;\n  position: fixed;\n  top: 0;\n  right: 15px;\n  z-index: 1001;\n}\n\n.lil-gui .controller {\n  display: flex;\n  align-items: center;\n  padding: 0 var(--padding);\n  margin: var(--spacing) 0;\n}\n.lil-gui .controller.disabled {\n  opacity: 0.5;\n}\n.lil-gui .controller.disabled, .lil-gui .controller.disabled * {\n  pointer-events: none !important;\n}\n.lil-gui .controller > .name {\n  min-width: var(--name-width);\n  flex-shrink: 0;\n  white-space: pre;\n  padding-right: var(--spacing);\n  line-height: var(--widget-height);\n}\n.lil-gui .controller .widget {\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  min-height: var(--widget-height);\n}\n.lil-gui .controller.string input {\n  color: var(--string-color);\n}\n.lil-gui .controller.boolean .widget {\n  cursor: pointer;\n}\n.lil-gui .controller.color .display {\n  width: 100%;\n  height: var(--widget-height);\n  border-radius: var(--widget-border-radius);\n  position: relative;\n}\n@media (hover: hover) {\n  .lil-gui .controller.color .display:hover:before {\n    content: \" \";\n    display: block;\n    position: absolute;\n    border-radius: var(--widget-border-radius);\n    border: 1px solid #fff9;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n}\n.lil-gui .controller.color input[type=color] {\n  opacity: 0;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n}\n.lil-gui .controller.color input[type=text] {\n  margin-left: var(--spacing);\n  font-family: var(--font-family-mono);\n  min-width: var(--color-input-min-width);\n  width: var(--color-input-width);\n  flex-shrink: 0;\n}\n.lil-gui .controller.option select {\n  opacity: 0;\n  position: absolute;\n  width: 100%;\n  max-width: 100%;\n}\n.lil-gui .controller.option .display {\n  position: relative;\n  pointer-events: none;\n  border-radius: var(--widget-border-radius);\n  height: var(--widget-height);\n  line-height: var(--widget-height);\n  max-width: 100%;\n  overflow: hidden;\n  word-break: break-all;\n  padding-left: 0.55em;\n  padding-right: 1.75em;\n  background: var(--widget-color);\n}\n@media (hover: hover) {\n  .lil-gui .controller.option .display.focus {\n    background: var(--focus-color);\n  }\n}\n.lil-gui .controller.option .display.active {\n  background: var(--focus-color);\n}\n.lil-gui .controller.option .display:after {\n  font-family: \"lil-gui\";\n  content: \"↕\";\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  padding-right: 0.375em;\n}\n.lil-gui .controller.option .widget,\n.lil-gui .controller.option select {\n  cursor: pointer;\n}\n@media (hover: hover) {\n  .lil-gui .controller.option .widget:hover .display {\n    background: var(--hover-color);\n  }\n}\n.lil-gui .controller.number input {\n  color: var(--number-color);\n}\n.lil-gui .controller.number.hasSlider input {\n  margin-left: var(--spacing);\n  width: var(--slider-input-width);\n  min-width: var(--slider-input-min-width);\n  flex-shrink: 0;\n}\n.lil-gui .controller.number .slider {\n  width: 100%;\n  height: var(--widget-height);\n  background-color: var(--widget-color);\n  border-radius: var(--widget-border-radius);\n  padding-right: var(--slider-knob-width);\n  overflow: hidden;\n  cursor: ew-resize;\n  touch-action: pan-y;\n}\n@media (hover: hover) {\n  .lil-gui .controller.number .slider:hover {\n    background-color: var(--hover-color);\n  }\n}\n.lil-gui .controller.number .slider.active {\n  background-color: var(--focus-color);\n}\n.lil-gui .controller.number .slider.active .fill {\n  opacity: 0.95;\n}\n.lil-gui .controller.number .fill {\n  height: 100%;\n  border-right: var(--slider-knob-width) solid var(--number-color);\n  box-sizing: content-box;\n}\n\n.lil-gui-dragging .lil-gui {\n  --hover-color: var(--widget-color);\n}\n.lil-gui-dragging * {\n  cursor: ew-resize !important;\n}\n\n.lil-gui-dragging.lil-gui-vertical * {\n  cursor: ns-resize !important;\n}\n\n.lil-gui .title {\n  --title-height: calc(var(--widget-height) + var(--spacing) * 1.25);\n  height: var(--title-height);\n  line-height: calc(var(--title-height) - 4px);\n  font-weight: 600;\n  padding: 0 var(--padding);\n  -webkit-tap-highlight-color: transparent;\n  cursor: pointer;\n  outline: none;\n  text-decoration-skip: objects;\n}\n.lil-gui .title:before {\n  font-family: \"lil-gui\";\n  content: \"▾\";\n  padding-right: 2px;\n  display: inline-block;\n}\n.lil-gui .title:active {\n  background: var(--title-background-color);\n  opacity: 0.75;\n}\n@media (hover: hover) {\n  body:not(.lil-gui-dragging) .lil-gui .title:hover {\n    background: var(--title-background-color);\n    opacity: 0.85;\n  }\n  .lil-gui .title:focus {\n    text-decoration: underline var(--focus-color);\n  }\n}\n.lil-gui.root > .title:focus {\n  text-decoration: none !important;\n}\n.lil-gui.closed > .title:before {\n  content: \"▸\";\n}\n.lil-gui.closed > .children {\n  transform: translateY(-7px);\n  opacity: 0;\n}\n.lil-gui.closed:not(.transition) > .children {\n  display: none;\n}\n.lil-gui.transition > .children {\n  transition-duration: 300ms;\n  transition-property: height, opacity, transform;\n  transition-timing-function: cubic-bezier(0.2, 0.6, 0.35, 1);\n  overflow: hidden;\n  pointer-events: none;\n}\n.lil-gui .children:empty:before {\n  content: \"Empty\";\n  padding: 0 var(--padding);\n  margin: var(--spacing) 0;\n  display: block;\n  height: var(--widget-height);\n  font-style: italic;\n  line-height: var(--widget-height);\n  opacity: 0.5;\n}\n.lil-gui.root > .children > .lil-gui > .title {\n  border: 0 solid var(--widget-color);\n  border-width: 1px 0;\n  transition: border-color 300ms;\n}\n.lil-gui.root > .children > .lil-gui.closed > .title {\n  border-bottom-color: transparent;\n}\n.lil-gui + .controller {\n  border-top: 1px solid var(--widget-color);\n  margin-top: 0;\n  padding-top: var(--spacing);\n}\n.lil-gui .lil-gui .lil-gui > .title {\n  border: none;\n}\n.lil-gui .lil-gui .lil-gui > .children {\n  border: none;\n  margin-left: var(--folder-indent);\n  border-left: 2px solid var(--widget-color);\n}\n.lil-gui .lil-gui .controller {\n  border: none;\n}\n\n.lil-gui input {\n  -webkit-tap-highlight-color: transparent;\n  border: 0;\n  outline: none;\n  font-family: var(--font-family);\n  font-size: var(--input-font-size);\n  border-radius: var(--widget-border-radius);\n  height: var(--widget-height);\n  background: var(--widget-color);\n  color: var(--text-color);\n  width: 100%;\n}\n@media (hover: hover) {\n  .lil-gui input:hover {\n    background: var(--hover-color);\n  }\n  .lil-gui input:active {\n    background: var(--focus-color);\n  }\n}\n.lil-gui input:disabled {\n  opacity: 1;\n}\n.lil-gui input[type=text],\n.lil-gui input[type=number] {\n  padding: var(--widget-padding);\n}\n.lil-gui input[type=text]:focus,\n.lil-gui input[type=number]:focus {\n  background: var(--focus-color);\n}\n.lil-gui input::-webkit-outer-spin-button,\n.lil-gui input::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n.lil-gui input[type=number] {\n  -moz-appearance: textfield;\n}\n.lil-gui input[type=checkbox] {\n  appearance: none;\n  -webkit-appearance: none;\n  height: var(--checkbox-size);\n  width: var(--checkbox-size);\n  border-radius: var(--widget-border-radius);\n  text-align: center;\n  cursor: pointer;\n}\n.lil-gui input[type=checkbox]:checked:before {\n  font-family: \"lil-gui\";\n  content: \"✓\";\n  font-size: var(--checkbox-size);\n  line-height: var(--checkbox-size);\n}\n@media (hover: hover) {\n  .lil-gui input[type=checkbox]:focus {\n    box-shadow: inset 0 0 0 1px var(--focus-color);\n  }\n}\n.lil-gui button {\n  -webkit-tap-highlight-color: transparent;\n  outline: none;\n  cursor: pointer;\n  font-family: var(--font-family);\n  font-size: var(--font-size);\n  color: var(--text-color);\n  width: 100%;\n  height: var(--widget-height);\n  text-transform: none;\n  background: var(--widget-color);\n  border-radius: var(--widget-border-radius);\n  border: 1px solid var(--widget-color);\n  text-align: center;\n  line-height: calc(var(--widget-height) - 4px);\n}\n@media (hover: hover) {\n  .lil-gui button:hover {\n    background: var(--hover-color);\n    border-color: var(--hover-color);\n  }\n  .lil-gui button:focus {\n    border-color: var(--focus-color);\n  }\n}\n.lil-gui button:active {\n  background: var(--focus-color);\n}\n\n@font-face {\n  font-family: \"lil-gui\";\n  src: url(\"data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAUsAAsAAAAACJwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAAH4AAADAImwmYE9TLzIAAAGIAAAAPwAAAGBKqH5SY21hcAAAAcgAAAD0AAACrukyyJBnbHlmAAACvAAAAF8AAACEIZpWH2hlYWQAAAMcAAAAJwAAADZfcj2zaGhlYQAAA0QAAAAYAAAAJAC5AHhobXR4AAADXAAAABAAAABMAZAAAGxvY2EAAANsAAAAFAAAACgCEgIybWF4cAAAA4AAAAAeAAAAIAEfABJuYW1lAAADoAAAASIAAAIK9SUU/XBvc3QAAATEAAAAZgAAAJCTcMc2eJxVjbEOgjAURU+hFRBK1dGRL+ALnAiToyMLEzFpnPz/eAshwSa97517c/MwwJmeB9kwPl+0cf5+uGPZXsqPu4nvZabcSZldZ6kfyWnomFY/eScKqZNWupKJO6kXN3K9uCVoL7iInPr1X5baXs3tjuMqCtzEuagm/AAlzQgPAAB4nGNgYRBlnMDAysDAYM/gBiT5oLQBAwuDJAMDEwMrMwNWEJDmmsJwgCFeXZghBcjlZMgFCzOiKOIFAB71Bb8AeJy1kjFuwkAQRZ+DwRAwBtNQRUGKQ8OdKCAWUhAgKLhIuAsVSpWz5Bbkj3dEgYiUIszqWdpZe+Z7/wB1oCYmIoboiwiLT2WjKl/jscrHfGg/pKdMkyklC5Zs2LEfHYpjcRoPzme9MWWmk3dWbK9ObkWkikOetJ554fWyoEsmdSlt+uR0pCJR34b6t/TVg1SY3sYvdf8vuiKrpyaDXDISiegp17p7579Gp3p++y7HPAiY9pmTibljrr85qSidtlg4+l25GLCaS8e6rRxNBmsnERunKbaOObRz7N72ju5vdAjYpBXHgJylOAVsMseDAPEP8LYoUHicY2BiAAEfhiAGJgZWBgZ7RnFRdnVJELCQlBSRlATJMoLV2DK4glSYs6ubq5vbKrJLSbGrgEmovDuDJVhe3VzcXFwNLCOILB/C4IuQ1xTn5FPilBTj5FPmBAB4WwoqAHicY2BkYGAA4sk1sR/j+W2+MnAzpDBgAyEMQUCSg4EJxAEAwUgFHgB4nGNgZGBgSGFggJMhDIwMqEAYAByHATJ4nGNgAIIUNEwmAABl3AGReJxjYAACIQYlBiMGJ3wQAEcQBEV4nGNgZGBgEGZgY2BiAAEQyQWEDAz/wXwGAAsPATIAAHicXdBNSsNAHAXwl35iA0UQXYnMShfS9GPZA7T7LgIu03SSpkwzYTIt1BN4Ak/gKTyAeCxfw39jZkjymzcvAwmAW/wgwHUEGDb36+jQQ3GXGot79L24jxCP4gHzF/EIr4jEIe7wxhOC3g2TMYy4Q7+Lu/SHuEd/ivt4wJd4wPxbPEKMX3GI5+DJFGaSn4qNzk8mcbKSR6xdXdhSzaOZJGtdapd4vVPbi6rP+cL7TGXOHtXKll4bY1Xl7EGnPtp7Xy2n00zyKLVHfkHBa4IcJ2oD3cgggWvt/V/FbDrUlEUJhTn/0azVWbNTNr0Ens8de1tceK9xZmfB1CPjOmPH4kitmvOubcNpmVTN3oFJyjzCvnmrwhJTzqzVj9jiSX911FjeAAB4nG3HMRKCMBBA0f0giiKi4DU8k0V2GWbIZDOh4PoWWvq6J5V8If9NVNQcaDhyouXMhY4rPTcG7jwYmXhKq8Wz+p762aNaeYXom2n3m2dLTVgsrCgFJ7OTmIkYbwIbC6vIB7WmFfAAAA==\") format(\"woff\");\n}`;\n\nfunction _injectStyles( cssContent ) {\n\tconst injected = document.createElement( 'style' );\n\tinjected.innerHTML = cssContent;\n\tconst before = document.querySelector( 'head link[rel=stylesheet], head style' );\n\tif ( before ) {\n\t\tdocument.head.insertBefore( injected, before );\n\t} else {\n\t\tdocument.head.appendChild( injected );\n\t}\n}\n\nlet stylesInjected = false;\n\nclass GUI {\n\n\t/**\n\t * Creates a panel that holds controllers.\n\t * @example\n\t * new GUI();\n\t * new GUI( { container: document.getElementById( 'custom' ) } );\n\t *\n\t * @param {object} [options]\n\t * @param {boolean} [options.autoPlace=true]\n\t * Adds the GUI to `document.body` and fixes it to the top right of the page.\n\t *\n\t * @param {HTMLElement} [options.container]\n\t * Adds the GUI to this DOM element. Overrides `autoPlace`.\n\t *\n\t * @param {number} [options.width=245]\n\t * Width of the GUI in pixels, usually set when name labels become too long. Note that you can make\n\t * name labels wider in CSS with `.lil‑gui { ‑‑name‑width: 55% }`\n\t *\n\t * @param {string} [options.title=Controls]\n\t * Name to display in the title bar.\n\t *\n\t * @param {boolean} [options.injectStyles=true]\n\t * Injects the default stylesheet into the page if this is the first GUI.\n\t * Pass `false` to use your own stylesheet.\n\t *\n\t * @param {number} [options.touchStyles=true]\n\t * Makes controllers larger on touch devices. Pass `false` to disable touch styles.\n\t *\n\t * @param {GUI} [options.parent]\n\t * Adds this GUI as a child in another GUI. Usually this is done for you by `addFolder()`.\n\t *\n\t */\n\tconstructor( {\n\t\tparent,\n\t\tautoPlace = parent === undefined,\n\t\tcontainer,\n\t\twidth,\n\t\ttitle = 'Controls',\n\t\tinjectStyles = true,\n\t\ttouchStyles = true\n\t} = {} ) {\n\n\t\t/**\n\t\t * The GUI containing this folder, or `undefined` if this is the root GUI.\n\t\t * @type {GUI}\n\t\t */\n\t\tthis.parent = parent;\n\n\t\t/**\n\t\t * The top level GUI containing this folder, or `this` if this is the root GUI.\n\t\t * @type {GUI}\n\t\t */\n\t\tthis.root = parent ? parent.root : this;\n\n\t\t/**\n\t\t * The list of controllers and folders contained by this GUI.\n\t\t * @type {Array<GUI|Controller>}\n\t\t */\n\t\tthis.children = [];\n\n\t\t/**\n\t\t * The list of controllers contained by this GUI.\n\t\t * @type {Array<Controller>}\n\t\t */\n\t\tthis.controllers = [];\n\n\t\t/**\n\t\t * The list of folders contained by this GUI.\n\t\t * @type {Array<GUI>}\n\t\t */\n\t\tthis.folders = [];\n\n\t\t/**\n\t\t * Used to determine if the GUI is closed. Use `gui.open()` or `gui.close()` to change this.\n\t\t * @type {boolean}\n\t\t */\n\t\tthis._closed = false;\n\n\t\t/**\n\t\t * Used to determine if the GUI is hidden. Use `gui.show()` or `gui.hide()` to change this.\n\t\t * @type {boolean}\n\t\t */\n\t\tthis._hidden = false;\n\n\t\t/**\n\t\t * The outermost container element.\n\t\t * @type {HTMLElement}\n\t\t */\n\t\tthis.domElement = document.createElement( 'div' );\n\t\tthis.domElement.classList.add( 'lil-gui' );\n\n\t\t/**\n\t\t * The DOM element that contains the title.\n\t\t * @type {HTMLElement}\n\t\t */\n\t\tthis.$title = document.createElement( 'div' );\n\t\tthis.$title.classList.add( 'title' );\n\t\tthis.$title.setAttribute( 'role', 'button' );\n\t\tthis.$title.setAttribute( 'aria-expanded', true );\n\t\tthis.$title.setAttribute( 'tabindex', 0 );\n\n\t\tthis.$title.addEventListener( 'click', () => this.openAnimated( this._closed ) );\n\t\tthis.$title.addEventListener( 'keydown', e => {\n\t\t\tif ( e.code === 'Enter' || e.code === 'Space' ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.$title.click();\n\t\t\t}\n\t\t} );\n\n\t\t// enables :active pseudo class on mobile\n\t\tthis.$title.addEventListener( 'touchstart', () => {}, { passive: true } );\n\n\t\t/**\n\t\t * The DOM element that contains children.\n\t\t * @type {HTMLElement}\n\t\t */\n\t\tthis.$children = document.createElement( 'div' );\n\t\tthis.$children.classList.add( 'children' );\n\n\t\tthis.domElement.appendChild( this.$title );\n\t\tthis.domElement.appendChild( this.$children );\n\n\t\tthis.title( title );\n\n\t\tif ( touchStyles ) {\n\t\t\tthis.domElement.classList.add( 'allow-touch-styles' );\n\t\t}\n\n\t\tif ( this.parent ) {\n\n\t\t\tthis.parent.children.push( this );\n\t\t\tthis.parent.folders.push( this );\n\n\t\t\tthis.parent.$children.appendChild( this.domElement );\n\n\t\t\t// Stop the constructor early, everything onward only applies to root GUI's\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.domElement.classList.add( 'root' );\n\n\t\t// Inject stylesheet if we haven't done that yet\n\t\tif ( !stylesInjected && injectStyles ) {\n\t\t\t_injectStyles( stylesheet );\n\t\t\tstylesInjected = true;\n\t\t}\n\n\t\tif ( container ) {\n\n\t\t\tcontainer.appendChild( this.domElement );\n\n\t\t} else if ( autoPlace ) {\n\n\t\t\tthis.domElement.classList.add( 'autoPlace' );\n\t\t\tdocument.body.appendChild( this.domElement );\n\n\t\t}\n\n\t\tif ( width ) {\n\t\t\tthis.domElement.style.setProperty( '--width', width + 'px' );\n\t\t}\n\n\t\t// Don't fire global key events while typing in the GUI:\n\t\tthis.domElement.addEventListener( 'keydown', e => e.stopPropagation() );\n\t\tthis.domElement.addEventListener( 'keyup', e => e.stopPropagation() );\n\n\t}\n\n\t/**\n\t * Adds a controller to the GUI, inferring controller type using the `typeof` operator.\n\t * @example\n\t * gui.add( object, 'property' );\n\t * gui.add( object, 'number', 0, 100, 1 );\n\t * gui.add( object, 'options', [ 1, 2, 3 ] );\n\t *\n\t * @param {object} object The object the controller will modify.\n\t * @param {string} property Name of the property to control.\n\t * @param {number|object|Array} [$1] Minimum value for number controllers, or the set of\n\t * selectable values for a dropdown.\n\t * @param {number} [max] Maximum value for number controllers.\n\t * @param {number} [step] Step value for number controllers.\n\t * @returns {Controller}\n\t */\n\tadd( object, property, $1, max, step ) {\n\n\t\tif ( Object( $1 ) === $1 ) {\n\n\t\t\treturn new OptionController( this, object, property, $1 );\n\n\t\t}\n\n\t\tconst initialValue = object[ property ];\n\n\t\tswitch ( typeof initialValue ) {\n\n\t\t\tcase 'number':\n\n\t\t\t\treturn new NumberController( this, object, property, $1, max, step );\n\n\t\t\tcase 'boolean':\n\n\t\t\t\treturn new BooleanController( this, object, property );\n\n\t\t\tcase 'string':\n\n\t\t\t\treturn new StringController( this, object, property );\n\n\t\t\tcase 'function':\n\n\t\t\t\treturn new FunctionController( this, object, property );\n\n\t\t}\n\n\t\tconsole.error( `gui.add failed\n\tproperty:`, property, `\n\tobject:`, object, `\n\tvalue:`, initialValue );\n\n\t}\n\n\t/**\n\t * Adds a color controller to the GUI.\n\t * @example\n\t * params = {\n\t * \tcssColor: '#ff00ff',\n\t * \trgbColor: { r: 0, g: 0.2, b: 0.4 },\n\t * \tcustomRange: [ 0, 127, 255 ],\n\t * };\n\t *\n\t * gui.addColor( params, 'cssColor' );\n\t * gui.addColor( params, 'rgbColor' );\n\t * gui.addColor( params, 'customRange', 255 );\n\t *\n\t * @param {object} object The object the controller will modify.\n\t * @param {string} property Name of the property to control.\n\t * @param {number} rgbScale Maximum value for a color channel when using an RGB color. You may\n\t * need to set this to 255 if your colors are too bright.\n\t * @returns {Controller}\n\t */\n\taddColor( object, property, rgbScale = 1 ) {\n\t\treturn new ColorController( this, object, property, rgbScale );\n\t}\n\n\t/**\n\t * Adds a folder to the GUI, which is just another GUI. This method returns\n\t * the nested GUI so you can add controllers to it.\n\t * @example\n\t * const folder = gui.addFolder( 'Position' );\n\t * folder.add( position, 'x' );\n\t * folder.add( position, 'y' );\n\t * folder.add( position, 'z' );\n\t *\n\t * @param {string} title Name to display in the folder's title bar.\n\t * @returns {GUI}\n\t */\n\taddFolder( title ) {\n\t\treturn new GUI( { parent: this, title } );\n\t}\n\n\t/**\n\t * Recalls values that were saved with `gui.save()`.\n\t * @param {object} obj\n\t * @param {boolean} recursive Pass false to exclude folders descending from this GUI.\n\t * @returns {this}\n\t */\n\tload( obj, recursive = true ) {\n\n\t\tif ( obj.controllers ) {\n\n\t\t\tthis.controllers.forEach( c => {\n\n\t\t\t\tif ( c instanceof FunctionController ) return;\n\n\t\t\t\tif ( c._name in obj.controllers ) {\n\t\t\t\t\tc.load( obj.controllers[ c._name ] );\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t\tif ( recursive && obj.folders ) {\n\n\t\t\tthis.folders.forEach( f => {\n\n\t\t\t\tif ( f._title in obj.folders ) {\n\t\t\t\t\tf.load( obj.folders[ f._title ] );\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns an object mapping controller names to values. The object can be passed to `gui.load()` to\n\t * recall these values.\n\t * @example\n\t * {\n\t * \tcontrollers: {\n\t * \t\tprop1: 1,\n\t * \t\tprop2: 'value',\n\t * \t\t...\n\t * \t},\n\t * \tfolders: {\n\t * \t\tfolderName1: { controllers, folders },\n\t * \t\tfolderName2: { controllers, folders }\n\t * \t\t...\n\t * \t}\n\t * }\n\t *\n\t * @param {boolean} recursive Pass false to exclude folders descending from this GUI.\n\t * @returns {object}\n\t */\n\tsave( recursive = true ) {\n\n\t\tconst obj = {\n\t\t\tcontrollers: {},\n\t\t\tfolders: {}\n\t\t};\n\n\t\tthis.controllers.forEach( c => {\n\n\t\t\tif ( c instanceof FunctionController ) return;\n\n\t\t\tif ( c._name in obj.controllers ) {\n\t\t\t\tthrow new Error( `Cannot save GUI with duplicate property \"${c._name}\"` );\n\t\t\t}\n\n\t\t\tobj.controllers[ c._name ] = c.save();\n\n\t\t} );\n\n\t\tif ( recursive ) {\n\n\t\t\tthis.folders.forEach( f => {\n\n\t\t\t\tif ( f._title in obj.folders ) {\n\t\t\t\t\tthrow new Error( `Cannot save GUI with duplicate folder \"${f._title}\"` );\n\t\t\t\t}\n\n\t\t\t\tobj.folders[ f._title ] = f.save();\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn obj;\n\n\t}\n\n\t/**\n\t * Opens a GUI or folder. GUI and folders are open by default.\n\t * @param {boolean} open Pass false to close\n\t * @returns {this}\n\t * @example\n\t * gui.open(); // open\n\t * gui.open( false ); // close\n\t * gui.open( gui._closed ); // toggle\n\t */\n\topen( open = true ) {\n\n\t\tthis._closed = !open;\n\n\t\tthis.$title.setAttribute( 'aria-expanded', !this._closed );\n\t\tthis.domElement.classList.toggle( 'closed', this._closed );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Closes the GUI.\n\t * @returns {this}\n\t */\n\tclose() {\n\t\treturn this.open( false );\n\t}\n\n\t/**\n\t * Shows the GUI after it's been hidden.\n\t * @param {boolean} show\n\t * @returns {this}\n\t * @example\n\t * gui.show();\n\t * gui.show( false ); // hide\n\t * gui.show( gui._hidden ); // toggle\n\t */\n\tshow( show = true ) {\n\n\t\tthis._hidden = !show;\n\n\t\tthis.domElement.style.display = this._hidden ? 'none' : '';\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Hides the GUI.\n\t * @returns {this}\n\t */\n\thide() {\n\t\treturn this.show( false );\n\t}\n\n\topenAnimated( open = true ) {\n\n\t\t// set state immediately\n\t\tthis._closed = !open;\n\n\t\tthis.$title.setAttribute( 'aria-expanded', !this._closed );\n\n\t\t// wait for next frame to measure $children\n\t\trequestAnimationFrame( () => {\n\n\t\t\t// explicitly set initial height for transition\n\t\t\tconst initialHeight = this.$children.clientHeight;\n\t\t\tthis.$children.style.height = initialHeight + 'px';\n\n\t\t\tthis.domElement.classList.add( 'transition' );\n\n\t\t\tconst onTransitionEnd = e => {\n\t\t\t\tif ( e.target !== this.$children ) return;\n\t\t\t\tthis.$children.style.height = '';\n\t\t\t\tthis.domElement.classList.remove( 'transition' );\n\t\t\t\tthis.$children.removeEventListener( 'transitionend', onTransitionEnd );\n\t\t\t};\n\n\t\t\tthis.$children.addEventListener( 'transitionend', onTransitionEnd );\n\n\t\t\t// todo: this is wrong if children's scrollHeight makes for a gui taller than maxHeight\n\t\t\tconst targetHeight = !open ? 0 : this.$children.scrollHeight;\n\n\t\t\tthis.domElement.classList.toggle( 'closed', !open );\n\n\t\t\trequestAnimationFrame( () => {\n\t\t\t\tthis.$children.style.height = targetHeight + 'px';\n\t\t\t} );\n\n\t\t} );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Change the title of this GUI.\n\t * @param {string} title\n\t * @returns {this}\n\t */\n\ttitle( title ) {\n\t\t/**\n\t\t * Current title of the GUI. Use `gui.title( 'Title' )` to modify this value.\n\t\t * @type {string}\n\t\t */\n\t\tthis._title = title;\n\t\tthis.$title.innerHTML = title;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Resets all controllers to their initial values.\n\t * @param {boolean} recursive Pass false to exclude folders descending from this GUI.\n\t * @returns {this}\n\t */\n\treset( recursive = true ) {\n\t\tconst controllers = recursive ? this.controllersRecursive() : this.controllers;\n\t\tcontrollers.forEach( c => c.reset() );\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pass a function to be called whenever a controller in this GUI changes.\n\t * @param {function({object:object, property:string, value:any, controller:Controller})} callback\n\t * @returns {this}\n\t * @example\n\t * gui.onChange( event => {\n\t * \tevent.object     // object that was modified\n\t * \tevent.property   // string, name of property\n\t * \tevent.value      // new value of controller\n\t * \tevent.controller // controller that was modified\n\t * } );\n\t */\n\tonChange( callback ) {\n\t\t/**\n\t\t * Used to access the function bound to `onChange` events. Don't modify this value\n\t\t * directly. Use the `gui.onChange( callback )` method instead.\n\t\t * @type {Function}\n\t\t */\n\t\tthis._onChange = callback;\n\t\treturn this;\n\t}\n\n\t_callOnChange( controller ) {\n\n\t\tif ( this.parent ) {\n\t\t\tthis.parent._callOnChange( controller );\n\t\t}\n\n\t\tif ( this._onChange !== undefined ) {\n\t\t\tthis._onChange.call( this, {\n\t\t\t\tobject: controller.object,\n\t\t\t\tproperty: controller.property,\n\t\t\t\tvalue: controller.getValue(),\n\t\t\t\tcontroller\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Pass a function to be called whenever a controller in this GUI has finished changing.\n\t * @param {function({object:object, property:string, value:any, controller:Controller})} callback\n\t * @returns {this}\n\t * @example\n\t * gui.onFinishChange( event => {\n\t * \tevent.object     // object that was modified\n\t * \tevent.property   // string, name of property\n\t * \tevent.value      // new value of controller\n\t * \tevent.controller // controller that was modified\n\t * } );\n\t */\n\tonFinishChange( callback ) {\n\t\t/**\n\t\t * Used to access the function bound to `onFinishChange` events. Don't modify this value\n\t\t * directly. Use the `gui.onFinishChange( callback )` method instead.\n\t\t * @type {Function}\n\t\t */\n\t\tthis._onFinishChange = callback;\n\t\treturn this;\n\t}\n\n\t_callOnFinishChange( controller ) {\n\n\t\tif ( this.parent ) {\n\t\t\tthis.parent._callOnFinishChange( controller );\n\t\t}\n\n\t\tif ( this._onFinishChange !== undefined ) {\n\t\t\tthis._onFinishChange.call( this, {\n\t\t\t\tobject: controller.object,\n\t\t\t\tproperty: controller.property,\n\t\t\t\tvalue: controller.getValue(),\n\t\t\t\tcontroller\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Destroys all DOM elements and event listeners associated with this GUI\n\t */\n\tdestroy() {\n\n\t\tif ( this.parent ) {\n\t\t\tthis.parent.children.splice( this.parent.children.indexOf( this ), 1 );\n\t\t\tthis.parent.folders.splice( this.parent.folders.indexOf( this ), 1 );\n\t\t}\n\n\t\tif ( this.domElement.parentElement ) {\n\t\t\tthis.domElement.parentElement.removeChild( this.domElement );\n\t\t}\n\n\t\tArray.from( this.children ).forEach( c => c.destroy() );\n\n\t}\n\n\t/**\n\t * Returns an array of controllers contained by this GUI and its descendents.\n\t * @returns {Controller[]}\n\t */\n\tcontrollersRecursive() {\n\t\tlet controllers = Array.from( this.controllers );\n\t\tthis.folders.forEach( f => {\n\t\t\tcontrollers = controllers.concat( f.controllersRecursive() );\n\t\t} );\n\t\treturn controllers;\n\t}\n\n\t/**\n\t * Returns an array of folders contained by this GUI and its descendents.\n\t * @returns {GUI[]}\n\t */\n\tfoldersRecursive() {\n\t\tlet folders = Array.from( this.folders );\n\t\tthis.folders.forEach( f => {\n\t\t\tfolders = folders.concat( f.foldersRecursive() );\n\t\t} );\n\t\treturn folders;\n\t}\n\n}\n\nexport default GUI;\nexport { BooleanController, ColorController, Controller, FunctionController, GUI, NumberController, OptionController, StringController };\n","import vert from \"./vertex.vert\";\nimport frag from \"./fragment.frag\";\n\nconst Sh = [vert, frag];\nexport default Sh;\n","attribute vec4 position;\n\nvarying vec2 v_xy;\n\nvoid main() {\n  gl_Position = position;\n  v_xy = position.xy;\n}\n  ","precision mediump float;\n\nuniform vec2 u_res;\nuniform float u_time;\nuniform vec2 u_mouse;\nvarying vec2 v_xy;\n\nuniform vec4 u_params;\nuniform vec4 u_params2;\nuniform vec3 u_color;\n\nconst float MPI = 6.28318530718;\n\n\n// cos mix\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n    return a + b * cos( 6.28318 * ( c * t + d));\n}\n\n// hue shift\nvec3 hueShift( vec3 color, float hueAdjust ){\n\n    const vec3  kRGBToYPrime = vec3 (0.299, 0.587, 0.114);\n    const vec3  kRGBToI      = vec3 (0.596, -0.275, -0.321);\n    const vec3  kRGBToQ      = vec3 (0.212, -0.523, 0.311);\n\n    const vec3  kYIQToR     = vec3 (1.0, 0.956, 0.621);\n    const vec3  kYIQToG     = vec3 (1.0, -0.272, -0.647);\n    const vec3  kYIQToB     = vec3 (1.0, -1.107, 1.704);\n\n    float   YPrime  = dot (color, kRGBToYPrime);\n    float   I       = dot (color, kRGBToI);\n    float   Q       = dot (color, kRGBToQ);\n    float   hue     = atan (Q, I);\n    float   chroma  = sqrt (I * I + Q * Q);\n\n    hue += hueAdjust;\n\n    Q = chroma * sin (hue);\n    I = chroma * cos (hue);\n\n    vec3    yIQ   = vec3 (YPrime, I, Q);\n\n    return vec3( dot (yIQ, kYIQToR), dot (yIQ, kYIQToG), dot (yIQ, kYIQToB) );\n\n}\n\n// noise\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\n\n// colors\nconst vec3 col1 = vec3(0.5, 0.5, 0.5);\nconst vec3 col2 = vec3(0.5, 0.5, 0.5);\nconst vec3 col3 = vec3(1.0, 1.0, 1.0);\n\t\t\t\t\n\nvoid main() {\n  // params\n float MULT_X = u_params.x;\n float MULT_Y = u_params.y;\n float HUE = u_params.z; // 0 / 360\n float BRIGHTNESS = u_params.w;\n float MOUSE_BRIGHTNESS = u_params2.x; // -1 / 1 -- -1 being black and 100% power\n float SCALE = u_params2.y;\n float NOISE_FACTOR = u_params2.z;\n float BW = u_params2.w;\n\n  // shader\n  vec2 uv = gl_FragCoord.xy / u_res;\n  vec2 scale_uv = uv;\n  scale_uv -= vec2(.5);\n  scale_uv *= SCALE;\n  \n  // noise\n  float noise = cnoise(vec3(scale_uv, u_time)) * NOISE_FACTOR;\n  \n  // mouse\n  float c_d = distance(scale_uv.x, .5);\n  c_d = smoothstep(0., .6, c_d);\n  vec2 m_uv = scale_uv * (c_d + cos(scale_uv.x * MULT_X) * noise - sin(scale_uv.y * MULT_Y) * noise);\n\n  // end uv deformation\n  scale_uv += vec2(.5);\n\n  // # COMPUTE\n  vec3 col = palette(\n    u_time + cos((m_uv.x) + (m_uv.y)), \n    col1, col2, col2, u_color\n  );\n\n  // mouse \n  float dist = distance(m_uv, u_mouse * SCALE/2.);\n  \n  dist = 1. - dist;\n  dist = smoothstep(.3, 1., dist);\n\n\n  vec3 shift_col = hueShift(col, sin(u_time * MPI));\n\n  col = mix(\n    col, \n    shift_col * col + (dist * MOUSE_BRIGHTNESS), \n    dist\n  );\n\n \n  // final shift\n  col = hueShift(col, HUE);\n  col *= BRIGHTNESS;\n\n  float bw_col = (col.r + col.g + col.b) * .3;\n  col = mix(col, vec3(bw_col), BW);\n  \n\n\n\n  gl_FragColor.rgb = col;\n  gl_FragColor.a = 1.;\n}\n  ","import {\n  createBufferInfoFromArrays,\n  createProgramInfo,\n  drawBufferInfo,\n  setBuffersAndAttributes,\n  setUniforms\n} from \"twgl.js\";\nimport GUI from \"lil-gui\";\n\nimport shaders from \"../mat/fsq\";\n\nexport default class {\n  constructor(gl, data = {}) {\n    this.gl = gl;\n    this.data = data;\n    this.shaders = shaders;\n    this.programInfo = createProgramInfo(this.gl, this.shaders);\n    console.log(this.data);\n\n    if (this.data.test) this.initGui();\n\n    this.gl.useProgram(this.programInfo.program);\n    this.setBuffAtt();\n    this.setUniforms();\n  }\n\n  setBuffAtt() {\n    const arrays = {\n      position: [-1, -1, 0, 1, -1, 0, -1, 1, 0, -1, 1, 0, 1, -1, 0, 1, 1, 0]\n    };\n    this.bufferInfo = createBufferInfoFromArrays(this.gl, arrays);\n  }\n\n  setUniforms() {\n    this.uniforms = {\n      u_res: [this.gl.canvas.width, this.gl.canvas.height],\n      u_time: 0,\n      u_params: [this.data.multx, this.data.multy, this.data.hue, this.data.brightness],\n      u_params2: [this.data.mouse, this.data.scale, this.data.noise, this.data.bw],\n      u_color: this.data.color\n    };\n\n    this.gl.useProgram(this.programInfo.program);\n    setUniforms(this.programInfo, this.uniforms);\n  }\n\n  render(t, { x, y }) {\n    this.gl.useProgram(this.programInfo.program);\n    setBuffersAndAttributes(this.gl, this.programInfo, this.bufferInfo);\n    setUniforms(this.programInfo, {\n      u_time: t * this.data.time,\n      u_mouse: [x, y]\n    });\n\n    drawBufferInfo(this.gl, this.bufferInfo);\n    // this.gl.LINES\n  }\n\n  resize(gl) {\n    this.gl = gl;\n\n    this.gl.useProgram(this.programInfo.program);\n    setUniforms(this.programInfo, {\n      u_res: [this.gl.canvas.width, this.gl.canvas.height]\n    });\n  }\n\n  initGui() {\n    this.gui = new GUI();\n    this.gui\n      .add(this.data, \"multx\", 0, 10)\n      .onChange(() => {\n        this.setUniforms();\n      })\n      .listen();\n    this.gui\n      .add(this.data, \"multy\", 0, 10)\n      .onChange(() => {\n        this.setUniforms();\n      })\n      .listen();\n    this.gui\n      .add(this.data, \"hue\", 0, 1)\n      .onChange(() => {\n        this.setUniforms();\n      })\n      .listen();\n    this.gui\n      .add(this.data, \"brightness\", 0, 5)\n      .onChange(() => {\n        this.setUniforms();\n      })\n      .listen();\n    this.gui\n      .add(this.data, \"mouse\", -1, 1)\n      .onChange(() => {\n        this.setUniforms();\n      })\n      .listen();\n    this.gui\n      .add(this.data, \"scale\", 0, 10)\n      .onChange(() => {\n        this.setUniforms();\n      })\n      .listen();\n    this.gui\n      .add(this.data, \"noise\", 0, 10)\n      .onChange(() => {\n        this.setUniforms();\n      })\n      .listen();\n    this.gui\n      .add(this.data, \"bw\", 0, 1)\n      .onChange(() => {\n        this.setUniforms();\n      })\n      .listen();\n    this.gui.add(this.data, \"time\", 0, 1);\n  }\n}\n","import Quad from \"./mod/_fsq\";\n\nexport default class {\n  constructor(gl) {\n    this.gl = gl;\n\n    this.computeParams();\n\n    this.events();\n    this.create();\n  }\n\n  events() {\n    this.mouse = { x: 0, y: 0, wx: window.innerWidth, wy: window.innerHeight };\n\n    document.addEventListener(\"mousemove\", (e) => {\n      this.mouse.x = (e.clientX / this.mouse.wx) * 2 - 1;\n      this.mouse.y = -(e.clientY / this.mouse.wy) * 2 + 1;\n      // console.log(this.mouse.x, this.mouse.y);\n    });\n  }\n\n  create() {\n    this.quad = new Quad(this.gl, this.params);\n  }\n\n  render(t, y) {\n    if (this.quad) this.quad.render(t, this.mouse);\n  }\n\n  resize(gl) {\n    this.gl = gl;\n    this.mouse.wx = window.innerWidth;\n    this.mouse.wy = window.innerHeight;\n\n    if (this.quad) this.quad.resize(this.gl);\n  }\n\n  computeParams() {\n    const wrapper = document.querySelector('[data-gradient=\"wrapper\"]');\n\n    const color = [\n      parseFloat(wrapper.dataset.red) || 0.0,\n      parseFloat(wrapper.dataset.green) || 0.33,\n      parseFloat(wrapper.dataset.blue) || 0.66\n    ];\n\n    this.params = {\n      test: wrapper.hasAttribute(\"data-test\"),\n      // shader\n      multx: parseFloat(wrapper.dataset.multx) || 0.2,\n      multy: parseFloat(wrapper.dataset.multy) || 0.8,\n      hue: parseFloat(wrapper.dataset.hue) || 0,\n      brightness: parseFloat(wrapper.dataset.brightness) || 0.8,\n      mouse: parseFloat(wrapper.dataset.mouse) || 1,\n      scale: parseFloat(wrapper.dataset.scale) || 0.2,\n      noise: parseFloat(wrapper.dataset.noise) || 1,\n      color: color,\n      bw: parseFloat(wrapper.dataset.bw) || 0,\n      // javascript\n      time: parseFloat(wrapper.dataset.time) || 1\n    };\n  }\n}\n","import vert from \"./vertex.vert\";\nimport frag from \"./fragment.frag\";\n\nconst Sh = [vert, frag];\nexport default Sh;\n","attribute vec4 position;\n\nvoid main() {\n  vec4 pos = position;\n  gl_Position = position;\n}\n  ","precision mediump float;\n\nuniform vec2 u_res;\nuniform float u_time;\n\nuniform sampler2D u_diff;\n\nvoid main() {\n  vec2 uv = gl_FragCoord.xy / u_res;\n\n  vec3 img = texture2D(u_diff, uv).rgb;\n\n  //img.rg += uv * .1;\n\n  gl_FragColor.rgb = img.rgb;\n  gl_FragColor.a = 1.;\n}\n  ","import * as twgl from \"twgl.js\";\nimport shaders from \"./mat/\";\n\nexport default class {\n  constructor(gl, data = {}) {\n    this.gl = gl;\n    this.data = data;\n    this.shaders = shaders;\n    this.programInfo = twgl.createProgramInfo(this.gl, this.shaders);\n\n    this.gl.useProgram(this.programInfo.program);\n    this.setBuffAtt();\n    this.setUniforms();\n  }\n\n  setBuffAtt() {\n    const arrays = {\n      position: [-1, -1, 0, 1, -1, 0, -1, 1, 0, -1, 1, 0, 1, -1, 0, 1, 1, 0]\n    };\n    this.bufferInfo = twgl.createBufferInfoFromArrays(this.gl, arrays);\n  }\n\n  setUniforms() {\n    this.uniforms = {\n      u_res: [this.gl.canvas.width, this.gl.canvas.height],\n      u_time: 0\n      //  u_diff: null\n    };\n\n    this.gl.useProgram(this.programInfo.program);\n    twgl.setUniforms(this.programInfo, this.uniforms);\n  }\n\n  render(time, diff = null) {\n    this.gl.useProgram(this.programInfo.program);\n    twgl.setBuffersAndAttributes(this.gl, this.programInfo, this.bufferInfo);\n    twgl.setUniforms(this.programInfo, {\n      u_time: time,\n      u_diff: diff\n    });\n\n    twgl.drawBufferInfo(this.gl, this.bufferInfo);\n    // this.gl.LINES\n  }\n\n  resize(gl) {\n    this.gl = gl;\n\n    this.gl.useProgram(this.programInfo.program);\n    twgl.setUniforms(this.programInfo, {\n      u_res: [this.gl.canvas.width, this.gl.canvas.height]\n    });\n  }\n}\n","import Quad from \"./quad\";\n\nexport default class {\n  constructor(gl) {\n    this.gl = gl;\n  }\n\n  create() {\n    // CREATE FRAMEBUFFER\n    this.fbi = this.gl.createFramebuffer();\n\n    // CREATE TEXTURE\n    this.texture = this.gl.createTexture();\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);\n    this.gl.texImage2D(\n      this.gl.TEXTURE_2D,\n      0,\n      this.gl.RGBA,\n      this.gl.canvas.width,\n      this.gl.canvas.height,\n      0,\n      this.gl.RGBA,\n      this.gl.UNSIGNED_BYTE,\n      null\n    );\n\n    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);\n    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\n    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\n\n    // CREATE RENDER BUFFER\n    this.depthBuffer = this.gl.createRenderbuffer();\n    this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthBuffer);\n    this.gl.renderbufferStorage(\n      this.gl.RENDERBUFFER,\n      this.gl.DEPTH_COMPONENT16,\n      this.gl.canvas.width,\n      this.gl.canvas.height\n    );\n\n    this.attach();\n    this.createPlane();\n    this.unbind();\n\n    //this.isActive = true;\n  }\n\n  /**\n   * FBO ops\n   */\n\n  attach() {\n    // attach texture and bugger to FBO -- BIND!\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.fbi);\n\n    this.gl.framebufferTexture2D(\n      this.gl.FRAMEBUFFER,\n      this.gl.COLOR_ATTACHMENT0,\n      this.gl.TEXTURE_2D,\n      this.texture,\n      0\n    );\n\n    this.gl.framebufferRenderbuffer(\n      this.gl.FRAMEBUFFER,\n      this.gl.DEPTH_ATTACHMENT,\n      this.gl.RENDERBUFFER,\n      this.depthBuffer\n    );\n  }\n\n  unbind() {\n    // unbind buffer object\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\n    this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n    this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, null);\n  }\n\n  /**\n   * Geometry ops\n   */\n\n  createPlane() {\n    this.quad = new Quad(this.gl);\n  }\n\n  /**\n   * Render Ops\n   */\n\n  setupRender() {\n    if (!this.isActive) return;\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.fbi);\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT || this.gl.DEPTH_BUFFER_BIT);\n  }\n\n  render(t) {\n    if (!this.isActive) return;\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\n    if (this.quad) this.quad.render(t, this.texture);\n  }\n\n  resize(gl) {\n    this.gl = gl;\n    this.create();\n    if (this.quad) this.quad.resize(this.gl);\n  }\n}\n","import { resizeCanvasToDisplaySize } from \"twgl.js\";\nimport Scroll from \"./utils/scroll.js\";\nimport Camera from \"./camera.js\";\nimport Scene from \"./scene\";\nimport Post from \"./post/post\";\n\nexport default class {\n  constructor() {\n    this.canvas = document.getElementById(\"c\");\n    this.gl = this.canvas.getContext(\"webgl\");\n    this.gl.clearColor(0.04, 0.04, 0.04, 1);\n    this.gl.vp = { dpr: Math.min(window.devicePixelRatio, 2) };\n    //this.gl.enable(this.gl.CULL_FACE);\n    //this.gl.cullFace(this.gl.BACK);\n    //this.gl.enable(this.gl.DEPTH_TEST)\n\n    this.camera = new Camera(this.gl);\n    this.gl.camera = this.camera.get(this.gl);\n\n    new ResizeObserver((entry) => this.resize(entry[0].contentRect)).observe(this.canvas);\n    this.resize();\n\n    this.scroll = new Scroll(this.gl);\n    this.time = 0;\n\n    this.create();\n\n    this.render();\n    this.resize();\n  }\n\n  create() {\n    this.post = new Post(this.gl);\n    this.post.isActive = false;\n    this.scene = new Scene(this.gl);\n  }\n\n  render() {\n    this.time += 0.01;\n\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT || this.gl.DEPTH_BUFFER_BIT);\n    this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n\n    if (this.post && this.post.isActive) this.post.setupRender();\n    if (this.scene) this.scene.render(this.time, this.scroll.y);\n    if (this.post && this.post.isActive) this.post.render(this.time);\n\n    requestAnimationFrame(this.render.bind(this));\n  }\n\n  resize() {\n    resizeCanvasToDisplaySize(this.gl.canvas, this.gl.vp.dpr);\n\n    // viewport data\n    this.gl.vp = {\n      viewSize: this.viewSize,\n      px: this.pixelSize,\n      inner: [window.innerWidth, window.innerHeight],\n      scroll: window.scrollY\n    };\n\n    if (this.gl.camera) this.gl.camera = this.camera.get(this.gl);\n    if (this.scroll) this.scroll.resize(this.gl);\n\n    // resize scene\n    if (this.post) this.post.resize(this.gl);\n    if (this.scene) this.scene.resize(this.gl);\n  }\n\n  /**\n   * ----- Utils\n   */\n\n  get viewSize() {\n    const height = Math.abs(this.gl.camera.z * Math.tan(this.gl.camera.fov / 2) * 2);\n    return [height * (this.gl.canvas.width / this.gl.canvas.height), height];\n  }\n\n  get pixelSize() {\n    return this.viewSize[0] / window.innerWidth;\n  }\n}\n","import Gl from \"./modules/gl/gl.js\";\n\nexport class App {\n  constructor() {\n    this.gl = new Gl(\"c\");\n  }\n}\n\nnew App();\n"],"names":["$7fcbd3e080a02651$var$VecType","Float32Array","$7fcbd3e080a02651$var$create","x","y","z","dst","$7fcbd3e080a02651$var$add","a","b","$7fcbd3e080a02651$var$subtract","$7fcbd3e080a02651$var$cross","t1","t2","$7fcbd3e080a02651$var$normalize","lenSq","len","Math","sqrt","$7fcbd3e080a02651$var$multiply","$7fcbd3e080a02651$var$xAxis","$7fcbd3e080a02651$var$yAxis","$7fcbd3e080a02651$var$zAxis","$7fcbd3e080a02651$var$MatType","$7fcbd3e080a02651$var$copy$1","m","$7fcbd3e080a02651$var$identity","$7fcbd3e080a02651$var$inverse","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","tmp_0","tmp_1","tmp_2","tmp_3","tmp_4","tmp_5","tmp_6","tmp_7","tmp_8","tmp_9","tmp_10","tmp_11","tmp_12","tmp_13","tmp_14","tmp_15","tmp_16","tmp_17","tmp_18","tmp_19","tmp_20","tmp_21","tmp_22","tmp_23","t0","t3","d","$7fcbd3e080a02651$var$transformPoint","v","v0","v1","v2","$7fcbd3e080a02651$var$transformDirection","$7fcbd3e080a02651$export$e318184adb044c73","Object","freeze","__proto__","axisRotate","axis","angleInRadians","n","xx","yy","zz","c","cos","s","sin","oneMinusCosine","r00","r01","r02","r10","r11","r12","r20","r21","r22","axisRotation","copy","create","fill","frustum","left","right","bottom","top","near","far","dx","dy","dz","getAxis","off","getTranslation","identity","inverse","lookAt","eye","target","up","multiply","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b10","b11","b12","b13","b20","b21","b22","b23","b30","b31","b32","b33","negate","ortho","perspective","fieldOfViewYInRadians","aspect","zNear","zFar","f","tan","PI","rangeInv","rotateX","rotateY","rotateZ","rotationX","rotationY","rotationZ","scale","scaling","setAxis","setDefaultType","ctor","oldType","setTranslation","transformDirection","transformNormal","mi","transformPoint","translate","translation","transpose","t","$7fcbd3e080a02651$var$BYTE","$7fcbd3e080a02651$var$UNSIGNED_BYTE","$7fcbd3e080a02651$var$SHORT","$7fcbd3e080a02651$var$UNSIGNED_SHORT","$7fcbd3e080a02651$var$INT","$7fcbd3e080a02651$var$UNSIGNED_INT","$7fcbd3e080a02651$var$FLOAT","$7fcbd3e080a02651$var$glTypeToTypedArray","tt","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","$7fcbd3e080a02651$export$bddf845047a0e959","typedArray","Uint8ClampedArray","Error","$7fcbd3e080a02651$export$9546290c15d36fce","typedArrayType","$7fcbd3e080a02651$export$9dd3754ae86f0017","SharedArrayBuffer","buffer","ArrayBuffer","$7fcbd3e080a02651$var$error","args","console","error","$7fcbd3e080a02651$var$isTexture","gl","WebGLTexture","$7fcbd3e080a02651$var$ARRAY_BUFFER","$7fcbd3e080a02651$var$defaults","attribPrefix","$7fcbd3e080a02651$var$setBufferFromTypedArray","type","array","drawType","bindBuffer","bufferData","$7fcbd3e080a02651$export$6ea00fe9d038b3f9","WebGLBuffer","createBuffer","$7fcbd3e080a02651$var$isIndices","name","$7fcbd3e080a02651$export$251e3bdee27f62a4","length","data","$7fcbd3e080a02651$var$texcoordRE","$7fcbd3e080a02651$var$colorRE","$7fcbd3e080a02651$var$guessNumComponentsFromName","numComponents","test","$7fcbd3e080a02651$export$bfceede8dab24cbd","arrayName","size","$7fcbd3e080a02651$var$makeTypedArray","Array","isArray","Type","$7fcbd3e080a02651$export$df835e2df67be3fe","arrays","attribs","keys","forEach","attribName","attrib","value","normalization","normalize","numValues","arrayType","numBytes","BYTES_PER_ELEMENT","undefined","$7fcbd3e080a02651$var$getNormalizationForTypedArray","stride","offset","divisor","$7fcbd3e080a02651$var$positionKeys","$7fcbd3e080a02651$export$140f5b0225138840","srcBufferInfo","newAttribs","bufferInfo","assign","indices","newIndices","numElements","elementType","key","ii","getBufferParameter","totalElements","$7fcbd3e080a02651$var$getNumElementsFromAttributes","$7fcbd3e080a02651$export$2750db2b7c74f6a0","$7fcbd3e080a02651$export$69d8acce17089372","buffers","$7fcbd3e080a02651$var$getNumElementsFromNonIndexedArrays","$7fcbd3e080a02651$var$augmentTypedArray","cursor","push","arguments","jj","reset","opt_index","defineProperty","get","this","$7fcbd3e080a02651$var$createAugmentedTypedArray","opt_type","$7fcbd3e080a02651$var$applyFuncToV3Array","matrix","fn","tmp","$7fcbd3e080a02651$var$transformNormal$1","$7fcbd3e080a02651$var$reorientDirections","$7fcbd3e080a02651$var$reorientNormals","$7fcbd3e080a02651$var$reorientPositions","$7fcbd3e080a02651$var$reorientVertices","indexOf","$7fcbd3e080a02651$var$createXYQuadVertices","xOffset","yOffset","position","normal","texcoord","$7fcbd3e080a02651$var$createPlaneVertices","width","depth","subdivisionsWidth","subdivisionsDepth","numVertices","positions","normals","texcoords","u","numVertsAcross","z1","x1","$7fcbd3e080a02651$var$createSphereVertices","radius","subdivisionsAxis","subdivisionsHeight","opt_startLatitudeInRadians","opt_endLatitudeInRadians","opt_startLongitudeInRadians","opt_endLongitudeInRadians","latRange","longRange","theta","phi","sinTheta","cosTheta","sinPhi","ux","uy","uz","numVertsAround","x2","y1","$7fcbd3e080a02651$var$CUBE_FACE_INDICES","$7fcbd3e080a02651$var$createCubeVertices","k","cornerVertices","faceNormals","uvCoords","faceIndices","uv","$7fcbd3e080a02651$var$createTruncatedConeVertices","bottomRadius","topRadius","height","radialSubdivisions","verticalSubdivisions","opt_topCap","opt_bottomCap","topCap","bottomCap","extra","vertsAroundEdge","slant","atan2","cosSlant","sinSlant","end","ringRadius","yy1","$7fcbd3e080a02651$var$expandRLEData","rleData","padding","runLength","element","slice","apply","$7fcbd3e080a02651$var$create3DFVertices","colors","numVerts","color","$7fcbd3e080a02651$var$createCrescentVertices","verticalRadius","outerRadius","innerRadius","thickness","subdivisionsDown","startOffset","endOffset","offsetRange","lerp1","createArc","arcRadius","normalMult","normalAdd","uMult","uAdd","uBack","xBack","angle","px","py","pz","x3","createSurface","leftArcOffset","rightArcOffset","numVerticesDown","$7fcbd3e080a02651$var$createCylinderVertices","$7fcbd3e080a02651$var$createTorusVertices","bodySubdivisions","startAngle","endAngle","range","radialParts","bodyParts","sliceAngle","sliceSin","ny","ring","ringAngle","xSin","zCos","nx","nz","slice1","nextRingIndex","nextSliceIndex","$7fcbd3e080a02651$var$createDiscVertices","divisions","stacks","stackPower","firstIndex","radiusSpan","pointsPerStack","stack","stackRadius","pow","i","$7fcbd3e080a02651$var$createBufferFunc","prototype","call","$7fcbd3e080a02651$var$createBufferInfoFunc","$7fcbd3e080a02651$export$e3518b1ac7891039","texStorage2D","$7fcbd3e080a02651$export$e97753eae63e4e62","haveEnumsForType","enums","constructor","existing","addEnums","toString","s_ctx","$7fcbd3e080a02651$var$formatInfo","$7fcbd3e080a02651$var$ALPHA","numColorComponents","$7fcbd3e080a02651$var$LUMINANCE","$7fcbd3e080a02651$var$LUMINANCE_ALPHA","$7fcbd3e080a02651$var$RGB","$7fcbd3e080a02651$var$RGBA","$7fcbd3e080a02651$var$RED","$7fcbd3e080a02651$var$RED_INTEGER","$7fcbd3e080a02651$var$RG","$7fcbd3e080a02651$var$RG_INTEGER","$7fcbd3e080a02651$var$RGB_INTEGER","$7fcbd3e080a02651$var$RGBA_INTEGER","$7fcbd3e080a02651$var$DEPTH_COMPONENT","$7fcbd3e080a02651$var$DEPTH_STENCIL","$7fcbd3e080a02651$var$error$1","$7fcbd3e080a02651$var$getElementById","id","document","getElementById","$7fcbd3e080a02651$var$TEXTURE0","$7fcbd3e080a02651$var$ARRAY_BUFFER$1","$7fcbd3e080a02651$var$FLOAT$3","$7fcbd3e080a02651$var$INT$3","$7fcbd3e080a02651$var$UNSIGNED_INT$3","$7fcbd3e080a02651$var$TEXTURE_2D$1","$7fcbd3e080a02651$var$TEXTURE_CUBE_MAP$1","$7fcbd3e080a02651$var$TEXTURE_3D$1","$7fcbd3e080a02651$var$TEXTURE_2D_ARRAY$1","$7fcbd3e080a02651$var$typeMap","$7fcbd3e080a02651$var$getBindPointForSamplerType","bindPoint","$7fcbd3e080a02651$var$intSetter","location","uniform1i","$7fcbd3e080a02651$var$intArraySetter","uniform1iv","$7fcbd3e080a02651$var$intVec2Setter","uniform2iv","$7fcbd3e080a02651$var$intVec3Setter","uniform3iv","$7fcbd3e080a02651$var$intVec4Setter","uniform4iv","$7fcbd3e080a02651$var$samplerSetter","unit","textureOrPair","texture","sampler","activeTexture","bindTexture","bindSampler","$7fcbd3e080a02651$var$samplerArraySetter","units","textures2","index","textures3","$7fcbd3e080a02651$var$floatAttribSetter","disableVertexAttribArray","vertexAttrib4fv","vertexAttrib3fv","vertexAttrib2fv","vertexAttrib1fv","enableVertexAttribArray","vertexAttribPointer","vertexAttribDivisor","$7fcbd3e080a02651$var$intAttribSetter","vertexAttrib4iv","vertexAttribIPointer","$7fcbd3e080a02651$var$uintAttribSetter","vertexAttrib4uiv","$7fcbd3e080a02651$var$matAttribSetter","typeInfo1","defaultSize","count","normalize1","rowOffset","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","cols","uniform3fv","uniform4fv","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","rows","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","$7fcbd3e080a02651$var$attrTypeMap","$7fcbd3e080a02651$var$errorRE","$7fcbd3e080a02651$var$spaceRE","$7fcbd3e080a02651$var$prepShaderSource","shaderSource","lineOffset","replace","$7fcbd3e080a02651$var$reportError","progOptions","msg","errorCallback","callback","setTimeout","errors","join","$7fcbd3e080a02651$var$loadShader","shaderType","shader","createShader","compileShader","errFn","compiled","getShaderParameter","lastError","getShaderInfoLog","getShaderSource","src","log","matches","matchAll","lineNoToErrorMap","Map","map","ndx","lineNo","parseInt","next","substring","split","line","err","$7fcbd3e080a02651$var$addLineNumbersWithError","$7fcbd3e080a02651$var$checkShaderStatus","deleteShader","$7fcbd3e080a02651$var$getProgramOptions","opt_attribs","opt_locations","opt_errorCallback","transformFeedbackVaryings","transformFeedbackMode","opt","attribLocations","options","$7fcbd3e080a02651$var$defaultShaderType","$7fcbd3e080a02651$var$getShaderTypeFromScriptType","scriptType","$7fcbd3e080a02651$var$deleteShaders","shaders","$7fcbd3e080a02651$var$wait","ms","Promise","resolve","$7fcbd3e080a02651$export$327d24a04cd0dc17","realShaders","newShaders","elem","text","WebGLShader","program","createProgram","attachShader","bindAttribLocation","varyings","linkProgram","async","gl1","program1","ext","getExtension","checkFn","getProgramParameter","COMPLETION_STATUS_KHR","waitTime","success","$7fcbd3e080a02651$var$checkProgramStatus","deleteProgram","$7fcbd3e080a02651$var$checkForProgramLinkCompletionAsync","linked","getProgramInfoLog","$7fcbd3e080a02651$export$87c7c742dccfe3af","shaderSources","$7fcbd3e080a02651$var$isBuiltIn","info","startsWith","$7fcbd3e080a02651$var$tokenRE","$7fcbd3e080a02651$var$addSetterToUniformTree","fullPath","node1","uniformSetters","tokens","filter","tokenNdx","path","token","isArrayIndex","accessor","child","node","$7fcbd3e080a02651$var$setUniformTree","$7fcbd3e080a02651$export$fe2460765a628597","textureUnit","createUniformSetter","uniformInfo","endsWith","typeInfo","uniformTree","numUniforms","getActiveUniform","substr","getUniformLocation","$7fcbd3e080a02651$export$ca1b1131a9f3199c","numVaryings","varying","getTransformFeedbackVarying","$7fcbd3e080a02651$export$7b680ab060795ae5","uniformData","uniformIndices","pair","pname","getActiveUniforms","blockSpecs","numUniformBlocks","ii2","getActiveUniformBlockName","blockSpec","getUniformBlockIndex","usedByVertexShader","getActiveUniformBlockParameter","usedByFragmentShader","used","tree","values","prop","$7fcbd3e080a02651$export$1fa517b18dd66830","setters","actualSetters","numArgs","aNdx","$7fcbd3e080a02651$export$ca2da2c8098eca9b","attribSetters","numAttribs","attribInfo","getActiveAttrib","getAttribLocation","$7fcbd3e080a02651$export$74da2cba014bdc09","$7fcbd3e080a02651$export$186607e23079b9e5","programInfo","vertexArrayObject","bindVertexArray","$7fcbd3e080a02651$export$9d683a1d425bd0b2","uniformBlockSpec","transformFeedbackInfo","$7fcbd3e080a02651$var$notIdRE","$7fcbd3e080a02651$export$2965a73560492a94","source","script","origCallback","program2","$7fcbd3e080a02651$export$459017ad3380cbb9","instanceCount","drawElementsInstanced","drawElements","drawArraysInstanced","drawArrays","$7fcbd3e080a02651$var$DEPTH_ATTACHMENT","$7fcbd3e080a02651$var$DEPTH_STENCIL_ATTACHMENT","$7fcbd3e080a02651$var$attachmentsByFormat","$7fcbd3e080a02651$var$DEPTH_STENCIL$1","$7fcbd3e080a02651$var$renderbufferFormats","$7fcbd3e080a02651$export$4d986a341d0b1b6c","canvas","multiplier","max","clientWidth","clientHeight","$254a79757ec22827$export$2e2bcd8739ae039","isActive","canScroll","onscroll","e","onScroll","window","scrollY","vp","resize","documentElement","scrollHeight","innerHeight","$3abb2d0ba337146b$export$2e2bcd8739ae039","fov","camera","mat","$75989585bc6e71e1$export$bd0bf19f25da8474","parent","object","property","className","widgetTag","_disabled","_hidden","initialValue","getValue","domElement","createElement","classList","add","$name","nextNameID","$widget","$disable","appendChild","children","controllers","$children","_listenCallback","bind","_name","innerHTML","onChange","_onChange","_callOnChange","_changed","onFinishChange","_onFinishChange","_callOnFinishChange","setValue","enable","enabled","disable","disabled","toggle","toggleAttribute","show","style","display","hide","controller","destroy","min","step","decimals","listen","_listening","_listenCallbackID","cancelAnimationFrame","requestAnimationFrame","curValue","save","_listenPrevValue","updateDisplay","load","splice","removeChild","$75989585bc6e71e1$export$c6f57966aed3cc84","super","$input","setAttribute","addEventListener","checked","$75989585bc6e71e1$var$normalizeColorString","string","match","result","padStart","$75989585bc6e71e1$var$STRING","isPrimitive","fromHexString","toHexString","$75989585bc6e71e1$var$INT","$75989585bc6e71e1$var$ARRAY","rgbScale","int","r","g","$75989585bc6e71e1$var$OBJECT","$75989585bc6e71e1$var$FORMATS","$75989585bc6e71e1$export$3a401c49038ca28a","$text","$display","_format","find","format","_rgbScale","_initialValueHexString","_textFocused","_setValueFromHexString","tryParse","select","newValue","backgroundColor","$75989585bc6e71e1$export$2d7dcf9d07c8b352","$button","preventDefault","passive","$75989585bc6e71e1$export$ee52b68072d314b9","_initInput","stepExplicit","_getImplicitStep","_decimals","_min","_onUpdateMinMax","_max","explicit","_step","_stepExplicit","_hasSlider","percent","$fill","_inputFocused","toFixed","increment","delta","parseFloat","isNaN","_snapClampSetValue","initClientX","initClientY","prevClientY","initValue","dragDelta","testingForVerticalDrag","onMouseMove","clientX","clientY","abs","blur","_setDraggingStyle","onMouseUp","_arrowKeyMultiplier","removeEventListener","_snap","_clamp","code","_normalizeMouseWheel","_initSlider","$slider","insertBefore","setValueFromX","rect","getBoundingClientRect","mouseMove","mouseUp","prevClientX","testingForScroll","beginTouchDrag","touches","onTouchMove","onTouchEnd","callOnFinishChange","wheelFinishChangeTimeout","_hasScrollBar","deltaX","deltaY","clearTimeout","active","body","_hasMin","_hasMax","floor","wheelDelta","mult","shiftKey","altKey","round","toPrecision","root","$75989585bc6e71e1$export$25f00c724c27c8b4","$select","_values","_names","$option","selectedIndex","remove","$75989585bc6e71e1$export$786d0ebe8f71368e","$75989585bc6e71e1$var$stylesInjected","$75989585bc6e71e1$export$983832d820c96993","autoPlace","container","title","injectStyles","touchStyles","folders","_closed","$title","openAnimated","click","cssContent","injected","before","querySelector","head","$75989585bc6e71e1$var$_injectStyles","setProperty","stopPropagation","$1","addColor","addFolder","obj","recursive","_title","open","close","initialHeight","onTransitionEnd","targetHeight","controllersRecursive","parentElement","from","concat","foldersRecursive","$75989585bc6e71e1$export$2e2bcd8739ae039","$e530876b992768cf$export$2e2bcd8739ae039","$parcel$interopDefault","$aa47204955e0d134$export$2e2bcd8739ae039","initGui","useProgram","setBuffAtt","setUniforms","uniforms","u_res","u_time","u_params","multx","multy","hue","brightness","u_params2","mouse","noise","bw","u_color","render","time","u_mouse","gui","$fc17e4c8b0611626$export$2e2bcd8739ae039","computeParams","events","wx","innerWidth","wy","quad","params","wrapper","dataset","red","green","blue","hasAttribute","$594c3d20003ad6e9$export$2e2bcd8739ae039","$c02c11598559542a$export$2e2bcd8739ae039","diff","u_diff","$464923427aef0ad3$export$2e2bcd8739ae039","fbi","createFramebuffer","createTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","depthBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","attach","createPlane","unbind","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","setupRender","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","$3fc802fd44b9793e$export$2e2bcd8739ae039","getContext","clearColor","dpr","devicePixelRatio","ResizeObserver","entry","contentRect","observe","scroll","post","scene","viewport","viewSize","pixelSize","inner"],"version":3,"file":"app.js.map"}